<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>code-016</title>
  
  <subtitle>技术宅拯救世界~</subtitle>
  <link href="https://hutaohub.github.io/atom.xml" rel="self"/>
  
  <link href="https://hutaohub.github.io/"/>
  <updated>2023-03-28T12:26:43.921Z</updated>
  <id>https://hutaohub.github.io/</id>
  
  <author>
    <name>code-016</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【数据结构】第三章 栈 队列和数组</title>
    <link href="https://hutaohub.github.io/posts/a35a5643.html"/>
    <id>https://hutaohub.github.io/posts/a35a5643.html</id>
    <published>2023-03-28T16:54:20.000Z</published>
    <updated>2023-03-28T12:26:43.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第三章-知识体系"><a href="#第三章-知识体系" class="headerlink" title="第三章 知识体系"></a>第三章 知识体系</h2><p><img src="https://img-blog.csdnimg.cn/f1a1bb4c52d04988965773fa790cb21e.png" alt="在这里插入图片描述"></p><h3 id="3-1-栈"><a href="#3-1-栈" class="headerlink" title="3.1 栈"></a>3.1 栈</h3><h4 id="3-1-1-栈的基本概念"><a href="#3-1-1-栈的基本概念" class="headerlink" title="3.1.1 栈的基本概念"></a>3.1.1 栈的基本概念</h4><p><img src="https://img-blog.csdnimg.cn/8ac66646dd8f447c84410ee1e23b15ba.png" alt="在这里插入图片描述"></p><h4 id="3-1-2-栈的顺序存储结构"><a href="#3-1-2-栈的顺序存储结构" class="headerlink" title="3.1.2 栈的顺序存储结构"></a>3.1.2 栈的顺序存储结构</h4><p><img src="https://img-blog.csdnimg.cn/5b33435fa71c4687b6eed600003355d8.png" alt="在这里插入图片描述"></p><h4 id="3-1-3-栈的链式存储结构"><a href="#3-1-3-栈的链式存储结构" class="headerlink" title="3.1.3 栈的链式存储结构"></a>3.1.3 栈的链式存储结构</h4><p><img src="https://img-blog.csdnimg.cn/cb7d2a8584d945a0a048e7ddbe351464.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/89f9a5c9f0df41f4923d67e725a15e2b.png" alt="在这里插入图片描述"></p><h4 id="3-1-4-栈的操作"><a href="#3-1-4-栈的操作" class="headerlink" title="3.1.4 栈的操作"></a>3.1.4 栈的操作</h4><p><img src="https://img-blog.csdnimg.cn/8b227c15f8f8437c88128c54b72a9ee5.png" alt="在这里插入图片描述"></p><h3 id="3-2-队列"><a href="#3-2-队列" class="headerlink" title="3.2 队列"></a>3.2 队列</h3><h4 id="3-2-1-队列的基本概念"><a href="#3-2-1-队列的基本概念" class="headerlink" title="3.2.1 队列的基本概念"></a>3.2.1 队列的基本概念</h4><p><img src="https://img-blog.csdnimg.cn/53cbddb028ba43b2b7abf3f3d8ce2653.png" alt="在这里插入图片描述"></p><h4 id="3-2-2-队列的顺序存储结构"><a href="#3-2-2-队列的顺序存储结构" class="headerlink" title="3.2.2 队列的顺序存储结构"></a>3.2.2 队列的顺序存储结构</h4><p><img src="https://img-blog.csdnimg.cn/98c16cfce82c4950bcd51d09b7f720d1.png" alt="在这里插入图片描述"></p><h4 id="3-2-3-队列的链式存储结构"><a href="#3-2-3-队列的链式存储结构" class="headerlink" title="3.2.3 队列的链式存储结构"></a>3.2.3 队列的链式存储结构</h4><p><img src="https://img-blog.csdnimg.cn/daa56df5b3384963ae3bb44c3aa0b436.png" alt="在这里插入图片描述"></p><h4 id="3-2-4-双端队列"><a href="#3-2-4-双端队列" class="headerlink" title="3.2.4 双端队列"></a>3.2.4 双端队列</h4><p><img src="https://img-blog.csdnimg.cn/17e29899e4d841d3a77e7dece66eec29.png" alt="在这里插入图片描述"></p><h4 id="3-2-5-队列的运算"><a href="#3-2-5-队列的运算" class="headerlink" title="3.2.5 队列的运算"></a>3.2.5 队列的运算</h4><p><img src="https://img-blog.csdnimg.cn/52b7dbf3166e45d2af9fac51da62fb55.png" alt="在这里插入图片描述"></p><h3 id="3-3-栈和队列的应用"><a href="#3-3-栈和队列的应用" class="headerlink" title="3.3 栈和队列的应用"></a>3.3 栈和队列的应用</h3><h4 id="3-3-1-栈的应用"><a href="#3-3-1-栈的应用" class="headerlink" title="3.3.1 栈的应用"></a>3.3.1 栈的应用</h4><p><img src="https://img-blog.csdnimg.cn/8de9ab449bea45c983d7ff04d037794e.png" alt="在这里插入图片描述"></p><h4 id="3-3-2-队列的应用"><a href="#3-3-2-队列的应用" class="headerlink" title="3.3.2 队列的应用"></a>3.3.2 队列的应用</h4><p><img src="https://img-blog.csdnimg.cn/36bdfc53699e47b0afe8eea657f3a7e6.png" alt="在这里插入图片描述"></p><h3 id="3-4-数组和特殊矩阵"><a href="#3-4-数组和特殊矩阵" class="headerlink" title="3.4 数组和特殊矩阵"></a>3.4 数组和特殊矩阵</h3><p><img src="https://img-blog.csdnimg.cn/bb88081afbed4bf7b992061b3403fcac.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第三章-知识体系&quot;&gt;&lt;a href=&quot;#第三章-知识体系&quot; class=&quot;headerlink&quot; title=&quot;第三章 知识体系&quot;&gt;&lt;/a&gt;第三章 知识体系&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/f1a1bb4c</summary>
      
    
    
    
    <category term="数据结构" scheme="https://hutaohub.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="栈 队列 数组" scheme="https://hutaohub.github.io/tags/%E6%A0%88-%E9%98%9F%E5%88%97-%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>【计算机组成原理】第二章 数据的表示和运算</title>
    <link href="https://hutaohub.github.io/posts/c0a25ce8.html"/>
    <id>https://hutaohub.github.io/posts/c0a25ce8.html</id>
    <published>2023-03-19T20:51:37.000Z</published>
    <updated>2023-03-28T12:26:43.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二章-知识体系"><a href="#第二章-知识体系" class="headerlink" title="第二章 知识体系"></a>第二章 知识体系</h3><p><img src="https://img-blog.csdnimg.cn/d8f0456ccf3d44b99357c2327d26dff9.png" alt="在这里插入图片描述"></p><h3 id="2-1-数制和编码"><a href="#2-1-数制和编码" class="headerlink" title="2.1 数制和编码"></a>2.1 数制和编码</h3><p><img src="https://img-blog.csdnimg.cn/7a1f7a313a6e4215aba2627c57c2e170.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/6ad6f116210647b1ac35289ef799fea0.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1a962c428dbc46bf93c5a18fc7559f2d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/91a60fa75db141c0a2a0838f478697f6.png" alt="在这里插入图片描述"></p><h3 id="2-2-运算方法和运算电路"><a href="#2-2-运算方法和运算电路" class="headerlink" title="2.2 运算方法和运算电路"></a>2.2 运算方法和运算电路</h3><p><img src="https://img-blog.csdnimg.cn/138866cf95ba47b7b46fe12f5c3bd884.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3e123e60edfe4f38b0a8bc31422c2183.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6ecc626b50714b64b593cd3458605e8a.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/c6ebbe78cd2e42b7afee7f48cf20694d.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/c7e1b7be7d3d43bd802ac6ec7de2318f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/15c5fa0ac9964abd9a18864cc1b55272.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fb00c14b881c4db086ba6c6bcb0ba16b.png" alt="在这里插入图片描述"></p><h3 id="2-3-浮点数的表示和运算"><a href="#2-3-浮点数的表示和运算" class="headerlink" title="2.3 浮点数的表示和运算"></a>2.3 浮点数的表示和运算</h3><p><img src="https://img-blog.csdnimg.cn/c1bfcce9fd5d41908e13c408e231ea18.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/bdded017a62e4062a1d72ef3056940e9.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3ca4f670b35b4b93a2a6444c7e50f719.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ba512797ad4644799eb9cc793aea1296.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/dfc67794601d47b39ba41505fd5d2dbb.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/587f520f1b484b9393accfc00662ccc0.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/4d5fa65a34d8438f95d7e996d4aebe16.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f4f5ecc8b74b41dc8890616e43e21cad.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/54f8bec13007418aa69be45d6b24b853.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8dbc71e8a9134506b43cfd494058b4a4.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第二章-知识体系&quot;&gt;&lt;a href=&quot;#第二章-知识体系&quot; class=&quot;headerlink&quot; title=&quot;第二章 知识体系&quot;&gt;&lt;/a&gt;第二章 知识体系&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/d8f0456c</summary>
      
    
    
    
    <category term="计算机组成原理" scheme="https://hutaohub.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="数据的表示和运算" scheme="https://hutaohub.github.io/tags/%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>【计算机网络】第二章 物理层</title>
    <link href="https://hutaohub.github.io/posts/fd452614.html"/>
    <id>https://hutaohub.github.io/posts/fd452614.html</id>
    <published>2023-02-13T16:13:06.000Z</published>
    <updated>2023-03-28T12:26:43.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二章-知识体系"><a href="#第二章-知识体系" class="headerlink" title="第二章 知识体系"></a>第二章 知识体系</h3><p><img src="https://img-blog.csdnimg.cn/4c1da6b91d2d455b853e59b5215a84d3.png" alt="在这里插入图片描述"></p><h3 id="2-1-通信基础"><a href="#2-1-通信基础" class="headerlink" title="2.1 通信基础"></a>2.1 通信基础</h3><h4 id="2-1-1-基本概念"><a href="#2-1-1-基本概念" class="headerlink" title="2.1.1 基本概念"></a>2.1.1 基本概念</h4><p><img src="https://img-blog.csdnimg.cn/8abda37c0c5045c79ab7bb05e4023cb8.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/03ec911445d64b06a218506e0a783450.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a221e4465e6b444fb75eb74db50644fe.png" alt="在这里插入图片描述"></p><h4 id="2-1-2-奈奎斯特定理与香浓定理"><a href="#2-1-2-奈奎斯特定理与香浓定理" class="headerlink" title="2.1.2 奈奎斯特定理与香浓定理"></a>2.1.2 奈奎斯特定理与香浓定理</h4><p><img src="https://img-blog.csdnimg.cn/9185bc78fd54415c9f7fa55c60472251.png" alt="在这里插入图片描述"></p><h4 id="2-1-3-编码与调制"><a href="#2-1-3-编码与调制" class="headerlink" title="2.1.3 编码与调制"></a>2.1.3 编码与调制</h4><p><img src="https://img-blog.csdnimg.cn/5f5ec3c5eba04d0d86e5f16de11f457a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c7bc37c9b1324443853ca9460255f151.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/558c99415b5e41f89b96bb3e634f7f1e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/71069ac951ab43a089ed193d0dc8547a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c70e801e4ea844c3b7838a82982c851d.png" alt="在这里插入图片描述"></p><h4 id="2-1-4-电路交换、报文交换与分组交换"><a href="#2-1-4-电路交换、报文交换与分组交换" class="headerlink" title="2.1.4 电路交换、报文交换与分组交换"></a>2.1.4 电路交换、报文交换与分组交换</h4><p><img src="https://img-blog.csdnimg.cn/928a8a7d4b7f456291ae31ed837c0dac.png" alt="在这里插入图片描述"></p><h4 id="2-1-5-数据报与虚电路"><a href="#2-1-5-数据报与虚电路" class="headerlink" title="2.1.5 数据报与虚电路"></a>2.1.5 数据报与虚电路</h4><p><img src="https://img-blog.csdnimg.cn/b17c503abde54f6982f144773a40cbb2.png" alt="在这里插入图片描述"></p><h3 id="2-2-传输介质"><a href="#2-2-传输介质" class="headerlink" title="2.2 传输介质"></a>2.2 传输介质</h3><p><img src="https://img-blog.csdnimg.cn/ff46644c97d14c6fba1651bef8dd7bda.png" alt="在这里插入图片描述"></p><h3 id="2-3-物理层设备"><a href="#2-3-物理层设备" class="headerlink" title="2.3 物理层设备"></a>2.3 物理层设备</h3><p><img src="https://img-blog.csdnimg.cn/18dbbe97971f4349ba3ac00e9df7949b.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第二章-知识体系&quot;&gt;&lt;a href=&quot;#第二章-知识体系&quot; class=&quot;headerlink&quot; title=&quot;第二章 知识体系&quot;&gt;&lt;/a&gt;第二章 知识体系&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/4c1da6b9</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://hutaohub.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="物理层" scheme="https://hutaohub.github.io/tags/%E7%89%A9%E7%90%86%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】第二章 线性表</title>
    <link href="https://hutaohub.github.io/posts/63a3fb91.html"/>
    <id>https://hutaohub.github.io/posts/63a3fb91.html</id>
    <published>2023-02-10T18:44:39.000Z</published>
    <updated>2023-03-28T12:26:43.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二章-知识体系"><a href="#第二章-知识体系" class="headerlink" title="第二章 知识体系"></a>第二章 知识体系</h3><p><img src="https://img-blog.csdnimg.cn/1782e40e9ea1478e99db583c41d67d15.png" alt="在这里插入图片描述"></p><h3 id="2-1-线性表的定义和基本操作"><a href="#2-1-线性表的定义和基本操作" class="headerlink" title="2.1  线性表的定义和基本操作"></a>2.1  线性表的定义和基本操作</h3><h4 id="2-1-1-线性表的定义"><a href="#2-1-1-线性表的定义" class="headerlink" title="2.1.1 线性表的定义"></a>2.1.1 线性表的定义</h4><p><img src="https://img-blog.csdnimg.cn/4d62f4b44a6749b19be3a115dfc30e28.png" alt="在这里插入图片描述"></p><h4 id="2-1-2-线性表的基本操作"><a href="#2-1-2-线性表的基本操作" class="headerlink" title="2.1.2 线性表的基本操作"></a>2.1.2 线性表的基本操作</h4><p><img src="https://img-blog.csdnimg.cn/e456c9208d14495ab1002a322be49c66.png" alt="在这里插入图片描述"></p><h3 id="2-2-线性表的顺序表示"><a href="#2-2-线性表的顺序表示" class="headerlink" title="2.2 线性表的顺序表示"></a>2.2 线性表的顺序表示</h3><h4 id="2-2-1-顺序表的定义"><a href="#2-2-1-顺序表的定义" class="headerlink" title="2.2.1 顺序表的定义"></a>2.2.1 顺序表的定义</h4><p><img src="https://img-blog.csdnimg.cn/4aa8bef86d4d45b28608ec61b6675450.png" alt="在这里插入图片描述"></p><h4 id="2-2-2-顺序表的基本操作的实现"><a href="#2-2-2-顺序表的基本操作的实现" class="headerlink" title="2.2.2 顺序表的基本操作的实现"></a>2.2.2 顺序表的基本操作的实现</h4><p><img src="https://img-blog.csdnimg.cn/9144d7125304486e8f839327aa55e2cc.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/11ccc1ab47f1406e9816ec76db8bb758.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d1781433ceeb4a62aee383a45bb3594d.png" alt="在这里插入图片描述"></p><h3 id="2-3-线性表的链式表示"><a href="#2-3-线性表的链式表示" class="headerlink" title="2.3 线性表的链式表示"></a>2.3 线性表的链式表示</h3><h4 id="2-3-1-单链表的定义"><a href="#2-3-1-单链表的定义" class="headerlink" title="2.3.1 单链表的定义"></a>2.3.1 单链表的定义</h4><p><img src="https://img-blog.csdnimg.cn/fe158d8afffe49dda51ff01ffc4ff1fc.png" alt="在这里插入图片描述"></p><h4 id="2-3-2-单链表的基本操作实现"><a href="#2-3-2-单链表的基本操作实现" class="headerlink" title="2.3.2 单链表的基本操作实现"></a>2.3.2 单链表的基本操作实现</h4><p><img src="https://img-blog.csdnimg.cn/a6d8b323d8fe4e5eb74ab4d153e93b8d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/929001554ab84b76825ed7576d6b5bf7.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/db7018ab6d8d486ab0208a2f3cbe3675.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/50032c3b5696422299be06e45163487e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cd473ecddb1a4566b1dbfc4114cd6986.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e170693b87cf4d7c8177f6ca1edfa286.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/df823816232a4243a6992fec872b8e80.png" alt="在这里插入图片描述"></p><h4 id="2-3-3-双链表"><a href="#2-3-3-双链表" class="headerlink" title="2.3.3 双链表"></a>2.3.3 双链表</h4><p><img src="https://img-blog.csdnimg.cn/d211e053adaa47e198d8afae6e2d9a07.png" alt="在这里插入图片描述"></p><h4 id="2-3-4-循环链表"><a href="#2-3-4-循环链表" class="headerlink" title="2.3.4 循环链表"></a>2.3.4 循环链表</h4><p><img src="https://img-blog.csdnimg.cn/57c800041071484ba6aa835d7b1f566a.png" alt="在这里插入图片描述"></p><h4 id="2-3-5-静态链表"><a href="#2-3-5-静态链表" class="headerlink" title="2.3.5 静态链表"></a>2.3.5 静态链表</h4><p><img src="https://img-blog.csdnimg.cn/5e1ececa824749dfbfb0d64bf8a6d679.png" alt="在这里插入图片描述"></p><h4 id="2-3-6-顺序表和链表的比较"><a href="#2-3-6-顺序表和链表的比较" class="headerlink" title="2.3.6 顺序表和链表的比较"></a>2.3.6 顺序表和链表的比较</h4><p><img src="https://img-blog.csdnimg.cn/33ac9bf12dc84a8890931a1668d016b9.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/997714f930b24ab09a5cacdd3b325845.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第二章-知识体系&quot;&gt;&lt;a href=&quot;#第二章-知识体系&quot; class=&quot;headerlink&quot; title=&quot;第二章 知识体系&quot;&gt;&lt;/a&gt;第二章 知识体系&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/1782e40e</summary>
      
    
    
    
    <category term="数据结构" scheme="https://hutaohub.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="线性表" scheme="https://hutaohub.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【操作系统】第二章 进程与线程</title>
    <link href="https://hutaohub.github.io/posts/25ec9ef7.html"/>
    <id>https://hutaohub.github.io/posts/25ec9ef7.html</id>
    <published>2023-02-01T15:49:51.000Z</published>
    <updated>2023-03-28T12:26:43.917Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="第二章-知识体系"><a href="#第二章-知识体系" class="headerlink" title="第二章 知识体系"></a>第二章 知识体系</h2><p><img src="https://img-blog.csdnimg.cn/e372fb44e553445da596cea38cf348cb.png" alt="在这里插入图片描述"></p><h3 id="2-1-进程与线程"><a href="#2-1-进程与线程" class="headerlink" title="2.1 进程与线程"></a>2.1 进程与线程</h3><h4 id="2-1-1-进程的概念和特征"><a href="#2-1-1-进程的概念和特征" class="headerlink" title="2.1.1 进程的概念和特征"></a>2.1.1 进程的概念和特征</h4><p><img src="https://img-blog.csdnimg.cn/c267f788766c4c258d843315587eba93.png" alt="在这里插入图片描述"></p><h4 id="2-1-2-进程的状态与转换"><a href="#2-1-2-进程的状态与转换" class="headerlink" title="2.1.2 进程的状态与转换"></a>2.1.2 进程的状态与转换</h4><p><img src="https://img-blog.csdnimg.cn/6fd63353c111441abf999420d069c2ea.png" alt="在这里插入图片描述"></p><h4 id="2-1-3-进程的组成"><a href="#2-1-3-进程的组成" class="headerlink" title="2.1.3 进程的组成"></a>2.1.3 进程的组成</h4><p>进程的数据结构 = PCB（进程控制块） + 程序段 + 数据段<br><img src="https://img-blog.csdnimg.cn/44914c3ad94548cfb98269acb212dfbe.png" alt="在这里插入图片描述"></p><h4 id="2-1-4-进程控制"><a href="#2-1-4-进程控制" class="headerlink" title="2.1.4 进程控制"></a>2.1.4 进程控制</h4><p><img src="https://img-blog.csdnimg.cn/e9e2156f78d44f0a8e44de8aac0ffc2f.png" alt="在这里插入图片描述"></p><h4 id="2-1-5-进程通信"><a href="#2-1-5-进程通信" class="headerlink" title="2.1.5 进程通信"></a>2.1.5 进程通信</h4><p><img src="https://img-blog.csdnimg.cn/ac87279c3ed84386837cfbfb46d64772.png" alt="在这里插入图片描述"></p><h4 id="2-1-6-进程的上下文切换"><a href="#2-1-6-进程的上下文切换" class="headerlink" title="2.1.6 进程的上下文切换"></a>2.1.6 进程的上下文切换</h4><p><img src="https://img-blog.csdnimg.cn/f2189b38bacc45af91626d1fce96b82f.png" alt="在这里插入图片描述"></p><h4 id="2-1-7-线程和多线程模型"><a href="#2-1-7-线程和多线程模型" class="headerlink" title="2.1.7 线程和多线程模型"></a>2.1.7 线程和多线程模型</h4><p><img src="https://img-blog.csdnimg.cn/b7758f87d219444fb0893e22b0176c51.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/392da93314864f06b750272fe37b82cc.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/48d12201c836444b9d888867b88d3df8.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/bc6fff63199b44c99a583c16a7b3f517.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/81edf19704cb481083c4f2d4fd7a1055.png" alt="在这里插入图片描述"></p><h3 id="2-2-处理机调度"><a href="#2-2-处理机调度" class="headerlink" title="2.2 处理机调度"></a>2.2 处理机调度</h3><h4 id="2-2-1-调度的概念"><a href="#2-2-1-调度的概念" class="headerlink" title="2.2.1 调度的概念"></a>2.2.1 调度的概念</h4><p><img src="https://img-blog.csdnimg.cn/4d4554d53e784edb8ae8d3ab316e26c9.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/78a25c1ac44647c6877762ec2cf55121.png" alt="在这里插入图片描述"></p><h4 id="2-2-2-调度的层次分类"><a href="#2-2-2-调度的层次分类" class="headerlink" title="2.2.2 调度的层次分类"></a>2.2.2 调度的层次分类</h4><p><img src="https://img-blog.csdnimg.cn/4f3625c6bbd545398e6fe0555adf3e1a.png" alt="在这里插入图片描述"></p><h4 id="2-2-3-调度的实现"><a href="#2-2-3-调度的实现" class="headerlink" title="2.2.3 调度的实现"></a>2.2.3 调度的实现</h4><p><img src="https://img-blog.csdnimg.cn/0b653fc6691b4225894260425de990b7.png" alt="在这里插入图片描述"></p><h4 id="2-2-4-典型的调度算法"><a href="#2-2-4-典型的调度算法" class="headerlink" title="2.2.4 典型的调度算法"></a>2.2.4 典型的调度算法</h4><p><img src="https://img-blog.csdnimg.cn/45033739fefb4217a1f1013d41a94f68.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/07fa6ae3af13415ea4a70067ae02347f.png" alt="在这里插入图片描述"></p><h4 id="2-2-5-进程切换"><a href="#2-2-5-进程切换" class="headerlink" title="2.2.5 进程切换"></a>2.2.5 进程切换</h4><p>见本文 2.1.6</p><h3 id="2-3-互斥与同步"><a href="#2-3-互斥与同步" class="headerlink" title="2.3 互斥与同步"></a>2.3 互斥与同步</h3><h4 id="2-3-1-同步与互斥的基本概念"><a href="#2-3-1-同步与互斥的基本概念" class="headerlink" title="2.3.1 同步与互斥的基本概念"></a>2.3.1 同步与互斥的基本概念</h4><p><img src="https://img-blog.csdnimg.cn/138646bddf5e4857b627d7898c18baa9.png" alt="在这里插入图片描述"></p><h4 id="2-3-2-实现临界区互斥的方法"><a href="#2-3-2-实现临界区互斥的方法" class="headerlink" title="2.3.2 实现临界区互斥的方法"></a>2.3.2 实现临界区互斥的方法</h4><p><img src="https://img-blog.csdnimg.cn/0723dd669e4d4d69b93f7f18a1018833.png" alt="在这里插入图片描述"></p><h4 id="2-3-3-互斥锁"><a href="#2-3-3-互斥锁" class="headerlink" title="2.3.3 互斥锁"></a>2.3.3 互斥锁</h4><p><img src="https://img-blog.csdnimg.cn/fc4ea0cf2c464e41b6eff6224820feaa.png" alt="在这里插入图片描述"></p><h4 id="2-3-4-信号量"><a href="#2-3-4-信号量" class="headerlink" title="2.3.4 信号量"></a>2.3.4 信号量</h4><p><img src="https://img-blog.csdnimg.cn/7820c39429d44e18b30bb6d37b61c222.png" alt="在这里插入图片描述"></p><h4 id="2-3-5-管程"><a href="#2-3-5-管程" class="headerlink" title="2.3.5 管程"></a>2.3.5 管程</h4><p><img src="https://img-blog.csdnimg.cn/b27aba47ac524e69ba6b8e0112ae11a2.png" alt="在这里插入图片描述"></p><h4 id="2-3-6-经典同步问题"><a href="#2-3-6-经典同步问题" class="headerlink" title="2.3.6 经典同步问题"></a>2.3.6 经典同步问题</h4><p><img src="https://img-blog.csdnimg.cn/44326b3fdcec4ffd8dde5fc7f893b862.png" alt="在这里插入图片描述"><br>待续。。。</p><h3 id="2-4-死锁"><a href="#2-4-死锁" class="headerlink" title="2.4 死锁"></a>2.4 死锁</h3><h4 id="2-4-1-死锁的概念"><a href="#2-4-1-死锁的概念" class="headerlink" title="2.4.1 死锁的概念"></a>2.4.1 死锁的概念</h4><p><img src="https://img-blog.csdnimg.cn/88846c95e122494c9ae47c521024e546.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c784cb8fae23404ea031e661fa3583e3.png" alt="在这里插入图片描述"></p><h4 id="2-4-2-死锁预防"><a href="#2-4-2-死锁预防" class="headerlink" title="2.4.2 死锁预防"></a>2.4.2 死锁预防</h4><p><img src="https://img-blog.csdnimg.cn/7f2b4630fcd74a5094104078196b56bd.png" alt="在这里插入图片描述"></p><h4 id="2-4-3-死锁避免"><a href="#2-4-3-死锁避免" class="headerlink" title="2.4.3 死锁避免"></a>2.4.3 死锁避免</h4><p><img src="https://img-blog.csdnimg.cn/20a48451f03740cdaaabf56f0065762d.png" alt="在这里插入图片描述"></p><h4 id="2-4-4-死锁的检测与解除"><a href="#2-4-4-死锁的检测与解除" class="headerlink" title="2.4.4 死锁的检测与解除"></a>2.4.4 死锁的检测与解除</h4><p><img src="https://img-blog.csdnimg.cn/652f289e701c4e5badb21b963f92ba2b.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/47f51835a5f643b9870aff59645c95ed.png" alt="在这里插入图片描述"></p><h4 id="2-4-5-例题"><a href="#2-4-5-例题" class="headerlink" title="2.4.5 例题"></a>2.4.5 例题</h4><p><img src="https://img-blog.csdnimg.cn/5015e2b285904377aff385bd2d98d12f.png" alt="在这里插入图片描述"></p><p><strong>1. 安全性算法解答</strong><br><img src="https://img-blog.csdnimg.cn/bd0ef45a15464bf98e0b0945d0911169.png" alt="在这里插入图片描述"></p><p><strong>2.银行家算法解答</strong><br> <img src="https://img-blog.csdnimg.cn/1a584d5bfb0743678d8c1e141d48e615.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;第二章-知识体系&quot;&gt;&lt;a href=&quot;#第二章-知识体系&quot; class=&quot;headerlink&quot; title=&quot;第二章 知识体系&quot;&gt;&lt;/a&gt;第二章 知识体系&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/e37</summary>
      
    
    
    
    <category term="操作系统" scheme="https://hutaohub.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统 第二章" scheme="https://hutaohub.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>【计算机网络】第一章 计算机网络结构</title>
    <link href="https://hutaohub.github.io/posts/f62e441.html"/>
    <id>https://hutaohub.github.io/posts/f62e441.html</id>
    <published>2023-01-30T11:45:13.000Z</published>
    <updated>2023-03-28T12:26:43.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章-体系结构"><a href="#第一章-体系结构" class="headerlink" title="第一章 体系结构"></a>第一章 体系结构</h3><p><img src="https://img-blog.csdnimg.cn/6cfb98a4a19d4b85b050fcf4733bd5a2.png" alt="在这里插入图片描述"></p><h3 id="1-1-计算机网络概述"><a href="#1-1-计算机网络概述" class="headerlink" title="1.1 计算机网络概述"></a>1.1 计算机网络概述</h3><h4 id="1-1-1-计算机网络的概念"><a href="#1-1-1-计算机网络的概念" class="headerlink" title="1.1.1 计算机网络的概念"></a>1.1.1 计算机网络的概念</h4><p><img src="https://img-blog.csdnimg.cn/589d8ceb3fb5492784c52301e92d9974.png" alt="在这里插入图片描述"></p><h4 id="1-1-2-计算机网络的组成"><a href="#1-1-2-计算机网络的组成" class="headerlink" title="1.1.2 计算机网络的组成"></a>1.1.2 计算机网络的组成</h4><p><img src="https://img-blog.csdnimg.cn/e25cf73bb95046d2995a1f4eb3bce49e.png" alt="在这里插入图片描述"></p><h4 id="1-1-3-计算机网络的功能"><a href="#1-1-3-计算机网络的功能" class="headerlink" title="1.1.3 计算机网络的功能"></a>1.1.3 计算机网络的功能</h4><p><img src="https://img-blog.csdnimg.cn/3f2faa0fa4ed4d4895c5a68d809e8416.png" alt="在这里插入图片描述"></p><h4 id="1-1-4-计算机网络的分类"><a href="#1-1-4-计算机网络的分类" class="headerlink" title="1.1.4 计算机网络的分类"></a>1.1.4 计算机网络的分类</h4><p><img src="https://img-blog.csdnimg.cn/cf42179f2cc241e9ab26ef8ba71a8f3b.png" alt="在这里插入图片描述"></p><h4 id="1-1-5-计算机网络的标准化工作"><a href="#1-1-5-计算机网络的标准化工作" class="headerlink" title="*1.1.5 计算机网络的标准化工作"></a>*1.1.5 计算机网络的标准化工作</h4><p>计算机网络的标准化工作 计算机网络的标准化需要经历以下4个步骤∶<br>①互联网草案；<br>②建议标准（RFC文档）；<br>③草案标准；<br>④互联网标准。</p><h4 id="1-1-6-计算机网络的性能指标"><a href="#1-1-6-计算机网络的性能指标" class="headerlink" title="1.1.6 计算机网络的性能指标"></a>1.1.6 计算机网络的性能指标</h4><p><img src="https://img-blog.csdnimg.cn/98190b9676384e6587787197e8074f6f.png" alt="在这里插入图片描述"></p><h3 id="1-2-计算机网络体系结构与参考模型"><a href="#1-2-计算机网络体系结构与参考模型" class="headerlink" title="1.2 计算机网络体系结构与参考模型"></a>1.2 计算机网络体系结构与参考模型</h3><h4 id="1-2-1-计算机网络分层结构"><a href="#1-2-1-计算机网络分层结构" class="headerlink" title="1.2.1 计算机网络分层结构"></a>1.2.1 计算机网络分层结构</h4><p><img src="https://img-blog.csdnimg.cn/c81cafdc5c4a4a7394db187f79f81630.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/807f21df0f0e4d6590e1fc6692cbee24.png" alt="在这里插入图片描述"></p><h4 id="1-2-2-计算机网络协议、接口、服务的概念"><a href="#1-2-2-计算机网络协议、接口、服务的概念" class="headerlink" title="1.2.2 计算机网络协议、接口、服务的概念"></a>1.2.2 计算机网络协议、接口、服务的概念</h4><p><img src="https://img-blog.csdnimg.cn/09226072ce794b378064099d96b2e9d9.png" alt="在这里插入图片描述"></p><h4 id="1-2-3-ISO和OSI参考模型和TCP-IP模型"><a href="#1-2-3-ISO和OSI参考模型和TCP-IP模型" class="headerlink" title="1.2.3 ISO和OSI参考模型和TCP/IP模型"></a>1.2.3 ISO和OSI参考模型和TCP/IP模型</h4><p><img src="https://img-blog.csdnimg.cn/9c7a8896a9a849c78ab9b04cd6b3ee21.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第一章-体系结构&quot;&gt;&lt;a href=&quot;#第一章-体系结构&quot; class=&quot;headerlink&quot; title=&quot;第一章 体系结构&quot;&gt;&lt;/a&gt;第一章 体系结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/6cfb98a4</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://hutaohub.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络 第一章" scheme="https://hutaohub.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>【计算机组成原理】第一章 计算机系统概述</title>
    <link href="https://hutaohub.github.io/posts/50cc1b00.html"/>
    <id>https://hutaohub.github.io/posts/50cc1b00.html</id>
    <published>2023-01-22T23:06:35.000Z</published>
    <updated>2023-03-28T12:26:43.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章-知识体系"><a href="#第一章-知识体系" class="headerlink" title="第一章 知识体系"></a>第一章 知识体系</h3><p><img src="https://img-blog.csdnimg.cn/f30331d6bbee43899ab15ff2bb96187a.png" alt="在这里插入图片描述"></p><hr><h3 id="1-1-计算机发展历程"><a href="#1-1-计算机发展历程" class="headerlink" title="1.1 计算机发展历程"></a>1.1 计算机发展历程</h3><h4 id="1-1-1-计算机硬件的发展"><a href="#1-1-1-计算机硬件的发展" class="headerlink" title="1.1.1 计算机硬件的发展"></a>1.1.1 计算机硬件的发展</h4><p>计算机发展趋势：<br><img src="https://img-blog.csdnimg.cn/a26f4cb8fc7d4a41907032425aab1b16.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/60186cf084724ae6ae511c75fa3349df.png" alt="在这里插入图片描述"></p><h4 id="1-1-2-计算机软件的发展"><a href="#1-1-2-计算机软件的发展" class="headerlink" title="1.1.2 计算机软件的发展"></a>1.1.2 计算机软件的发展</h4><p><img src="https://img-blog.csdnimg.cn/1f09e4b5e22547bb96f0367d197204f7.png" alt="在这里插入图片描述"></p><h3 id="1-2-计算机系统层次结构"><a href="#1-2-计算机系统层次结构" class="headerlink" title="1.2 计算机系统层次结构"></a>1.2 计算机系统层次结构</h3><h4 id="1-2-1-计算机系统的组成"><a href="#1-2-1-计算机系统的组成" class="headerlink" title="1.2.1 计算机系统的组成"></a>1.2.1 计算机系统的组成</h4><p><img src="https://img-blog.csdnimg.cn/15cbe86771c343749c95f7e128ac4b53.png" alt="在这里插入图片描述"></p><h4 id="1-2-2-计算机硬件"><a href="#1-2-2-计算机硬件" class="headerlink" title="1.2.2 计算机硬件"></a>1.2.2 计算机硬件</h4><p><img src="https://img-blog.csdnimg.cn/16a710a1d761402a938a9b4aa2766064.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/408c79c892664bcc85459e6da031aca0.png" alt="在这里插入图片描述"></p><h4 id="1-2-3-计算机软件"><a href="#1-2-3-计算机软件" class="headerlink" title="1.2.3 计算机软件"></a>1.2.3 计算机软件</h4><p><img src="https://img-blog.csdnimg.cn/63d4714d13c34e989b111fe36ad493f5.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/eda7eeb418d347ffb6cba375c18d8f6a.png" alt="在这里插入图片描述"></p><h4 id="1-2-4-计算机的层次结构"><a href="#1-2-4-计算机的层次结构" class="headerlink" title="1.2.4 计算机的层次结构"></a>1.2.4 计算机的层次结构</h4><p><img src="https://img-blog.csdnimg.cn/177d3f124c944f5facfd383b8d870252.png" alt="在这里插入图片描述"></p><h4 id="1-2-5-计算机系统的工作原理"><a href="#1-2-5-计算机系统的工作原理" class="headerlink" title="1.2.5 计算机系统的工作原理"></a>1.2.5 计算机系统的工作原理</h4><p><img src="https://img-blog.csdnimg.cn/13319301bb704b679d3242089bfc9ba2.png" alt="在这里插入图片描述"></p><h3 id="1-3-计算机的性能指标"><a href="#1-3-计算机的性能指标" class="headerlink" title="1.3 计算机的性能指标"></a>1.3 计算机的性能指标</h3><p><img src="https://img-blog.csdnimg.cn/d3e6d56c61f1412693ee2745905ac785.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第一章-知识体系&quot;&gt;&lt;a href=&quot;#第一章-知识体系&quot; class=&quot;headerlink&quot; title=&quot;第一章 知识体系&quot;&gt;&lt;/a&gt;第一章 知识体系&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/f30331d6</summary>
      
    
    
    
    <category term="计算机组成原理" scheme="https://hutaohub.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="https://hutaohub.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】第一章 绪论</title>
    <link href="https://hutaohub.github.io/posts/ad613aa9.html"/>
    <id>https://hutaohub.github.io/posts/ad613aa9.html</id>
    <published>2023-01-17T20:15:01.000Z</published>
    <updated>2023-03-28T12:26:43.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="知识体系"><a href="#知识体系" class="headerlink" title="知识体系"></a>知识体系</h3><p><img src="https://img-blog.csdnimg.cn/7c71c346839c4559966c049d256d7fa5.png" alt="在这里插入图片描述"></p><h3 id="1-1-数据结构的基本概念"><a href="#1-1-数据结构的基本概念" class="headerlink" title="1.1 数据结构的基本概念"></a>1.1 数据结构的基本概念</h3><h4 id="1-1-1-基本概念和术语"><a href="#1-1-1-基本概念和术语" class="headerlink" title="1.1.1 基本概念和术语"></a>1.1.1 基本概念和术语</h4><p><img src="https://img-blog.csdnimg.cn/46430f1f0f664e59bd92f713ff8deec0.png" alt="在这里插入图片描述"></p><h4 id="1-1-2-数据结构三要素"><a href="#1-1-2-数据结构三要素" class="headerlink" title="1.1.2 数据结构三要素"></a>1.1.2 数据结构三要素</h4><p><img src="https://img-blog.csdnimg.cn/e5d99c5d44254380a00bf676aa257a49.png" alt="在这里插入图片描述"></p><h3 id="1-2-算法和算法评价"><a href="#1-2-算法和算法评价" class="headerlink" title="1.2 算法和算法评价"></a>1.2 算法和算法评价</h3><h4 id="1-2-1-算法的基本概念"><a href="#1-2-1-算法的基本概念" class="headerlink" title="1.2.1 算法的基本概念"></a>1.2.1 算法的基本概念</h4><p><img src="https://img-blog.csdnimg.cn/b3eef0567d5f484e93e554d1f51cf83d.png" alt="在这里插入图片描述"></p><h4 id="1-2-2-算法效率的度量"><a href="#1-2-2-算法效率的度量" class="headerlink" title="1.2.2 算法效率的度量"></a>1.2.2 算法效率的度量</h4><p>时间复杂度和空间复杂度：<br><code>O(1) &lt; O(logN) &lt; O(n) &lt; O(nlogN) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</code></p><h3 id="1-3-常考点"><a href="#1-3-常考点" class="headerlink" title="1.3 常考点"></a>1.3 常考点</h3><p><img src="https://img-blog.csdnimg.cn/86d7b383199a45058f42badd91dfd0f9.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;知识体系&quot;&gt;&lt;a href=&quot;#知识体系&quot; class=&quot;headerlink&quot; title=&quot;知识体系&quot;&gt;&lt;/a&gt;知识体系&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/7c71c346839c4559966c049d</summary>
      
    
    
    
    <category term="第一章" scheme="https://hutaohub.github.io/categories/%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    
    
    <category term="数据结构" scheme="https://hutaohub.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【操作系统】 第一章 操作系统概述</title>
    <link href="https://hutaohub.github.io/posts/fe64d28f.html"/>
    <id>https://hutaohub.github.io/posts/fe64d28f.html</id>
    <published>2023-01-15T21:52:12.000Z</published>
    <updated>2023-03-28T12:26:43.917Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="第一章-知识体系"><a href="#第一章-知识体系" class="headerlink" title="第一章 知识体系"></a>第一章 知识体系</h3><p><img src="https://img-blog.csdnimg.cn/b0f6209a1e174c7e847dba24f9c524cf.png" alt="在这里插入图片描述"></p><hr><h3 id="1-1-操作系统的基本概念"><a href="#1-1-操作系统的基本概念" class="headerlink" title="1.1 操作系统的基本概念"></a>1.1 操作系统的基本概念</h3><h4 id="1-1-1-操作系统的概念"><a href="#1-1-1-操作系统的概念" class="headerlink" title="1.1.1 操作系统的概念"></a>1.1.1 操作系统的概念</h4><ul><li>操作系统负责管理协调硬件、软件等计算机资源的工作;</li><li>操作系统为上层用户、应用程序提供简单易用的服务;</li><li>操作系统是一种系统软件;<h4 id="1-1-2-操作系统的特征"><a href="#1-1-2-操作系统的特征" class="headerlink" title="1.1.2 操作系统的特征"></a>1.1.2 操作系统的特征</h4></li><li>并发和共享是<code>最基本的</code>两个性质, 两者互为存在条件；</li><li>没有并发和共享，虚拟和异步就无从谈起；<br><img src="https://img-blog.csdnimg.cn/e8bc68bc204a49a2b6153f2188bea245.png" alt="在这里插入图片描述"></li></ul><h4 id="1-1-3-操作系统的目标和功能"><a href="#1-1-3-操作系统的目标和功能" class="headerlink" title="1.1.3 操作系统的目标和功能"></a>1.1.3 操作系统的目标和功能</h4><p><img src="https://img-blog.csdnimg.cn/a83c9fbe6bd94e8885c6e66b62febdb4.png" alt="在这里插入图片描述"></p><h3 id="1-2-操作系统的发展历程"><a href="#1-2-操作系统的发展历程" class="headerlink" title="1.2 操作系统的发展历程"></a>1.2 操作系统的发展历程</h3><p><img src="https://img-blog.csdnimg.cn/14154035bc3941229409b08ba6d57c25.png" alt="在这里插入图片描述"></p><h3 id="1-3-操作系统的运行环境"><a href="#1-3-操作系统的运行环境" class="headerlink" title="1.3 操作系统的运行环境"></a>1.3 操作系统的运行环境</h3><h4 id="1-3-1-处理器的运行模式"><a href="#1-3-1-处理器的运行模式" class="headerlink" title="1.3.1 处理器的运行模式"></a>1.3.1 处理器的运行模式</h4><p><img src="https://img-blog.csdnimg.cn/89e99052319f48b291b3225afebc1a31.png" alt="在这里插入图片描述"></p><h4 id="1-3-2-中断和异常的概念"><a href="#1-3-2-中断和异常的概念" class="headerlink" title="1.3.2 中断和异常的概念"></a>1.3.2 中断和异常的概念</h4><p><img src="https://img-blog.csdnimg.cn/f5b2e7b512a04775b877bd8858d0f391.png" alt="在这里插入图片描述"></p><h4 id="1-3-3-系统调用"><a href="#1-3-3-系统调用" class="headerlink" title="1.3.3 系统调用"></a>1.3.3 系统调用</h4><p><img src="https://img-blog.csdnimg.cn/800b2368937c4055b3e2ecf34869f68e.png" alt="在这里插入图片描述"></p><h3 id="1-4-操作系统结构"><a href="#1-4-操作系统结构" class="headerlink" title="1.4 操作系统结构"></a>1.4 操作系统结构</h3><p><img src="https://img-blog.csdnimg.cn/e0ce49519f244402a031b340e56d1854.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/efaed683b4f4412fa2ea293fd92a432f.png" alt="在这里插入图片描述"></p><h3 id="1-5-操作系统引导"><a href="#1-5-操作系统引导" class="headerlink" title="1.5 操作系统引导"></a>1.5 操作系统引导</h3><p><img src="https://img-blog.csdnimg.cn/9b38e1291a714baab8a5ec481aa4f81b.png" alt="在这里插入图片描述"></p><h3 id="1-6-虚拟机"><a href="#1-6-虚拟机" class="headerlink" title="1.6 虚拟机"></a>1.6 虚拟机</h3><p><img src="https://img-blog.csdnimg.cn/1f84289fa44a4fc088df94ee1ba61dd4.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;第一章-知识体系&quot;&gt;&lt;a href=&quot;#第一章-知识体系&quot; class=&quot;headerlink&quot; title=&quot;第一章 知识体系&quot;&gt;&lt;/a&gt;第一章 知识体系&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/b0f</summary>
      
    
    
    
    <category term="操作系统" scheme="https://hutaohub.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统概述 第一章" scheme="https://hutaohub.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>【环境配置】vs2022引入libevent库</title>
    <link href="https://hutaohub.github.io/posts/aef1f81f.html"/>
    <id>https://hutaohub.github.io/posts/aef1f81f.html</id>
    <published>2022-10-24T22:42:58.000Z</published>
    <updated>2023-03-28T12:26:43.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="libevent库的引入（注意：平台debug-x86）"><a href="#libevent库的引入（注意：平台debug-x86）" class="headerlink" title="libevent库的引入（注意：平台debug x86）"></a>libevent库的引入（注意：平台debug x86）</h2><p>（0）这里直接提供生成好的静态库</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1Bvc501g2NS1aWkqzfbfR4A">https://pan.baidu.com/s/1Bvc501g2NS1aWkqzfbfR4A</a><br>提取码：8888</p></blockquote><p>（1）下载解压后，有个libevent文件夹，可以随意放，但要记得路径，最好和项目同级目录，便于寻找。<br>（2）确保该项目中有一个.cpp文件，右键项目属性-&gt;VC++目录-&gt;包含目录-&gt;libevent\include路径<br>（3）属性-&gt;VC++目录-&gt;包含目录-&gt;libevent\include路径<br>（4）属性-&gt;VC++目录-&gt;包含目录-&gt;libevent\WIN32-Code\nmake<br>（5）属性-&gt;VC++目录-&gt;库目录-&gt;libevent\lib<br>（6）属性-&gt;链接器-&gt;输入-&gt;附加依赖项-&gt;</p><blockquote><p>libevent.lib<br>libevent_core.lib<br>libevent_extras.lib<br><strong>(注意：确定后一定有要用;隔开)</strong></p></blockquote><h2 id="测试程序："><a href="#测试程序：" class="headerlink" title="测试程序："></a>测试程序：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************</span></span><br><span class="line"><span class="comment">* 每隔两秒在控制台输出&quot;Hello World!&quot;</span></span><br><span class="line"><span class="comment">*************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;event.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnTime</span><span class="params">(<span class="type">int</span> sock, <span class="type">short</span> event_value, <span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Hello World!\n&quot;</span>;</span><br><span class="line">timeval tv;</span><br><span class="line">tv.tv_sec = <span class="number">1</span>;</span><br><span class="line">tv.tv_usec = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">event_add</span>((<span class="keyword">struct</span> event*)arg, &amp;tv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">1</span>, <span class="number">1</span>), &amp;wsaData) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">event_init</span>();</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">event</span> ev_time;</span><br><span class="line"><span class="built_in">evtimer_set</span>(&amp;ev_time, OnTime, &amp;ev_time);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">timeval</span> tv;</span><br><span class="line">tv.tv_sec = <span class="number">1</span>;</span><br><span class="line">tv.tv_usec = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">event_add</span>(&amp;ev_time, &amp;tv);</span><br><span class="line"><span class="built_in">event_dispatch</span>();</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（参考文章：<a href="https://blog.csdn.net/wzh1378008099/article/details/107577936）">https://blog.csdn.net/wzh1378008099/article/details/107577936）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;libevent库的引入（注意：平台debug-x86）&quot;&gt;&lt;a href=&quot;#libevent库的引入（注意：平台debug-x86）&quot; class=&quot;headerlink&quot; title=&quot;libevent库的引入（注意：平台debug x86）&quot;&gt;&lt;/a&gt;li</summary>
      
    
    
    
    <category term="环境配置" scheme="https://hutaohub.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="vs2022 libevent" scheme="https://hutaohub.github.io/tags/vs2022-libevent/"/>
    
  </entry>
  
  <entry>
    <title>【环境配置】vs2022搭建jsoncpp</title>
    <link href="https://hutaohub.github.io/posts/a90c58e2.html"/>
    <id>https://hutaohub.github.io/posts/a90c58e2.html</id>
    <published>2022-10-24T22:38:25.000Z</published>
    <updated>2023-03-28T12:26:43.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="json库的引入（注意：vs2022-debug-x86）"><a href="#json库的引入（注意：vs2022-debug-x86）" class="headerlink" title="json库的引入（注意：vs2022 debug x86）"></a>json库的引入（注意：vs2022 debug x86）</h2><p>（0）下载jsoncpp，这里直接提供已经生成好的静态库</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1Quuf01JtC0MtCT4y1ionvw">https://pan.baidu.com/s/1Quuf01JtC0MtCT4y1ionvw</a><br>提取码：8888</p></blockquote><p>（1）下载解压后，有个json文件夹，可以随意放，但要记得路径，最好和项目同级目录，便于寻找。<br>（2）确保该项目中有一个.cpp文件，右键项目属性-&gt;C/C++-&gt;常规-&gt;附加包含目录-&gt;添加json/include路径<br>（3）属性-&gt;链接器-&gt;常规-&gt;附加库目录-&gt;添加json/lib路径<br>（4）属性-&gt;链接器-&gt;输入-&gt;附加依赖项-&gt;添加json/lib下的.lib文件名<br>（5）属性-&gt;C/C++-&gt;代码生成-&gt;运行库-&gt;多线程调试(/MTD)<br>（6）测试是否成功引入：看是否能够编译连接通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.h&quot;</span> </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">Json::Value a; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>（环境搭建参考文章）<a href="https://www.cnblogs.com/heyyw1119/p/6810561.html">https://www.cnblogs.com/heyyw1119/p/6810561.html</a><br>（json学习参考文章）<a href="https://www.cnblogs.com/__tudou__/p/14957646.html">https://www.cnblogs.com/__tudou__/p/14957646.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;json库的引入（注意：vs2022-debug-x86）&quot;&gt;&lt;a href=&quot;#json库的引入（注意：vs2022-debug-x86）&quot; class=&quot;headerlink&quot; title=&quot;json库的引入（注意：vs2022 debug x86）&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="环境配置" scheme="https://hutaohub.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="vs2022 jsoncpp C++ 环境配置" scheme="https://hutaohub.github.io/tags/vs2022-jsoncpp-C-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>【review-list 1】反转链表</title>
    <link href="https://hutaohub.github.io/posts/4778594c.html"/>
    <id>https://hutaohub.github.io/posts/4778594c.html</id>
    <published>2022-06-14T23:32:13.000Z</published>
    <updated>2023-03-28T12:26:43.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p><img src="https://img-blog.csdnimg.cn/52711c335e0c436dbab39c9a991dfcd4.png" alt="在这里插入图片描述"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>解法一：双指针迭代（推荐）</p><p>step1: 定义pre指向pHead前一个结点、next指向pHead下一个结点<br>step2: 通过头指针的移动来不断使用pre、pHead、next指针进行方向逆转，直到pHead == nullptr<br>step3: 此时退出循环，pre指向最后一个结点，也就是反转后的头结点</p><p><strong>C++实现代码</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        ListNode* pre = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* next = pHead-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(pHead != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            next = pHead-&gt;next;</span><br><span class="line">            pHead-&gt;next = pre;</span><br><span class="line">            pre = pHead;</span><br><span class="line">            pHead = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><blockquote><p>时间复杂度O(n)<br>空间复杂度O(1)</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/52711c335e0c436dbab39c9a991dfcd4</summary>
      
    
    
    
    <category term="newcoder" scheme="https://hutaohub.github.io/categories/newcoder/"/>
    
    
    <category term="list" scheme="https://hutaohub.github.io/tags/list/"/>
    
  </entry>
  
  <entry>
    <title>【C++】模板元编程栗子</title>
    <link href="https://hutaohub.github.io/posts/5be19ab.html"/>
    <id>https://hutaohub.github.io/posts/5be19ab.html</id>
    <published>2022-05-29T18:51:05.000Z</published>
    <updated>2023-03-28T12:26:43.913Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><blockquote><p><strong>使用c++提供的模板编程，将二进制数转换成十进制</strong></p></blockquote><h3 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> N&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinToDec</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> value = BinToDec&lt;N / <span class="number">10</span>&gt;::value * <span class="number">2</span> + N % <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinToDec</span>&lt;<span class="number">0</span>&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> res = BinToDec&lt;<span class="number">110</span>&gt;::value;</span><br><span class="line">cout &lt;&lt; res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、代码分析"><a href="#三、代码分析" class="headerlink" title="三、代码分析"></a>三、代码分析</h3><p><img src="https://img-blog.csdnimg.cn/d0c36e3732a341f68ced500ebdb7aa86.png" alt="在这里插入图片描述"><br>结果：<br><img src="https://img-blog.csdnimg.cn/d2aa5112346f4682a834d3a12b724980.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;一、题目描述&quot;&gt;&lt;a href=&quot;#一、题目描述&quot; class=&quot;headerlink&quot; title=&quot;一、题目描述&quot;&gt;&lt;/a&gt;一、题目描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用c++提供的模板编程，将二进制数转换成十进制&lt;/st</summary>
      
    
    
    
    <category term="C++" scheme="https://hutaohub.github.io/categories/C/"/>
    
    
    <category term="模板元编程" scheme="https://hutaohub.github.io/tags/%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】并查集</title>
    <link href="https://hutaohub.github.io/posts/2e7813af.html"/>
    <id>https://hutaohub.github.io/posts/2e7813af.html</id>
    <published>2022-05-29T18:14:46.000Z</published>
    <updated>2023-03-28T12:26:43.917Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><blockquote><p><a href="https://www.runoob.com/data-structures/union-find-basic.html">并查集的相关介绍</a></p></blockquote><h3 id="二、C-实现"><a href="#二、C-实现" class="headerlink" title="二、C++实现"></a>二、C++实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ufset</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span>* parent;</span><br><span class="line"><span class="type">size_t</span> size;<span class="comment">//parent对象的个数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Showchild</span><span class="params">(<span class="type">int</span> child)</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; child &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (child == parent[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Showchild</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Ufset</span>(<span class="type">int</span> sz) :<span class="built_in">parent</span>(<span class="keyword">new</span> <span class="type">int</span>[sz]), <span class="built_in">size</span>(sz)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line">parent[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Ufset</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != parent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] parent;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找根节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindRoot</span><span class="params">(<span class="type">int</span> child)</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (parent[child] &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">child = parent[child];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//并集</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> cha, <span class="type">int</span> chb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">bool</span> res = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//求得两个对象的根</span></span><br><span class="line"><span class="type">int</span> left = <span class="built_in">FindRoot</span>(cha);</span><br><span class="line"><span class="type">int</span> right = <span class="built_in">FindRoot</span>(chb);</span><br><span class="line"><span class="comment">//两个未在同一个根下</span></span><br><span class="line"><span class="keyword">if</span> (left != right)</span><br><span class="line">&#123;</span><br><span class="line">parent[left] += parent[right];</span><br><span class="line">parent[right] = left;</span><br><span class="line">res = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出所有的集合</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowAllSet</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> si = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//根节点</span></span><br><span class="line"><span class="keyword">if</span> (parent[i] &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;set&quot;</span> &lt;&lt; si++ &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line"><span class="built_in">Showchild</span>(i);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Ufset <span class="title">s</span><span class="params">(<span class="number">12</span>)</span></span>;</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">6</span>, <span class="number">10</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">7</span>, <span class="number">4</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">2</span>, <span class="number">11</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">11</span>, <span class="number">0</span>);</span><br><span class="line">s.<span class="built_in">ShowAllSet</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/12fbaea93b34435298c7b755c0102b24.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;一、引言&quot;&gt;&lt;a href=&quot;#一、引言&quot; class=&quot;headerlink&quot; title=&quot;一、引言&quot;&gt;&lt;/a&gt;一、引言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/data-structu</summary>
      
    
    
    
    <category term="数据结构" scheme="https://hutaohub.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="并查集" scheme="https://hutaohub.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】B/B-树（目录树）</title>
    <link href="https://hutaohub.github.io/posts/b36eb58c.html"/>
    <id>https://hutaohub.github.io/posts/b36eb58c.html</id>
    <published>2022-05-27T17:38:15.000Z</published>
    <updated>2023-03-28T12:26:43.917Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p><a href="https://baike.baidu.com/item/B%E6%A0%91/5411672">关于B树的性质</a></p><h3 id="一、B树的结构"><a href="#一、B树的结构" class="headerlink" title="一、B树的结构"></a>一、B树的结构</h3><p><img src="https://img-blog.csdnimg.cn/f923b82b1b6642328c573f6d0064ff55.png" alt="请添加图片描述"></p><h3 id="二、B树的实现"><a href="#二、B树的实现" class="headerlink" title="二、B树的实现"></a>二、B树的实现</h3></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="comment">//5分支Btree</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 5<span class="comment">//奇数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE (M-1)<span class="comment">//最多元素个数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MINSIZE (M/2)<span class="comment">//最少元素个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//B树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Btree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//关键码类型</span></span><br><span class="line"><span class="keyword">using</span> KeyType = <span class="type">char</span>;</span><br><span class="line"><span class="comment">//元素类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">KeyType key;<span class="comment">//关键码</span></span><br><span class="line"><span class="type">void</span>* infoptr;<span class="comment">//记录集</span></span><br><span class="line">&#125;ElemType;</span><br><span class="line"><span class="comment">//树结点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BNode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> keysize;<span class="comment">//当前结点中data中挂接关键码的个数</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BNode</span>* parent;<span class="comment">//指向双亲结点</span></span><br><span class="line">ElemType data[M + <span class="number">1</span>];<span class="comment">//结点下的元素&#123;关键码，记录集&#125;</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BNode</span>* sub[M + <span class="number">1</span>];<span class="comment">//分支链</span></span><br><span class="line">&#125;BNode;</span><br><span class="line"><span class="comment">//查询的结果类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResultNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">BNode* pnode;<span class="comment">//关键码所在的树结点地址</span></span><br><span class="line"><span class="type">int</span> index;<span class="comment">//关键码所在pnode-&gt;data的前一个下标</span></span><br><span class="line"><span class="type">bool</span> tag;<span class="comment">//是否存在的标志位 存在true,不存在false;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ResultNode</span>() :<span class="built_in">pnode</span>(<span class="literal">nullptr</span>), <span class="built_in">index</span>(<span class="number">-1</span>), <span class="built_in">tag</span>(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line">~<span class="built_in">ResultNode</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//申请BNode结点</span></span><br><span class="line"><span class="function">BNode* <span class="title">BuyBNode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BNode* s = (BNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BNode));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == s) <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="built_in">sizeof</span>(BNode));</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//申请并初始化根节点</span></span><br><span class="line"><span class="function">BNode* <span class="title">MakeRoot</span><span class="params">(<span class="type">const</span> ElemType&amp; item, BNode* left, BNode* right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BNode* root = <span class="built_in">BuyBNode</span>();</span><br><span class="line">root-&gt;keysize = <span class="number">1</span>;</span><br><span class="line">root-&gt;parent = <span class="literal">nullptr</span>;</span><br><span class="line">root-&gt;data[<span class="number">1</span>] = item;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != left) </span><br><span class="line">&#123;</span><br><span class="line">left-&gt;parent = root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != right)</span><br><span class="line">&#123;</span><br><span class="line">right-&gt;parent = root;</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;sub[<span class="number">0</span>] = left;</span><br><span class="line">root-&gt;sub[<span class="number">1</span>] = right;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//pos位置插入item操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert_Item</span><span class="params">(BNode* ptr, <span class="type">int</span> pos, <span class="type">const</span> ElemType&amp; item, BNode* right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = ptr-&gt;keysize; i &gt; pos; --i)</span><br><span class="line">&#123;</span><br><span class="line">ptr-&gt;data[i + <span class="number">1</span>] = ptr-&gt;data[i];</span><br><span class="line">ptr-&gt;sub[i + <span class="number">1</span>] = ptr-&gt;sub[i];</span><br><span class="line">&#125;</span><br><span class="line">ptr-&gt;data[pos + <span class="number">1</span>] = item;</span><br><span class="line">ptr-&gt;sub[pos + <span class="number">1</span>] = right;</span><br><span class="line">++ptr-&gt;keysize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将ptr中后半截的元素移动到新开辟的s分支中</span></span><br><span class="line"><span class="function">ElemType <span class="title">MoveElem</span><span class="params">(BNode* s, BNode* ptr, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = pos + <span class="number">1</span>; j &lt;= ptr-&gt;keysize; ++i, ++j)</span><br><span class="line">&#123;</span><br><span class="line">s-&gt;data[i] = ptr-&gt;data[j];</span><br><span class="line">s-&gt;sub[i] = ptr-&gt;sub[j];</span><br><span class="line"><span class="keyword">if</span> (s-&gt;sub[i] != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">s-&gt;sub[i]-&gt;parent = s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ptr-&gt;keysize = MINSIZE;</span><br><span class="line">s-&gt;keysize = MINSIZE;</span><br><span class="line">s-&gt;parent = ptr-&gt;parent;</span><br><span class="line"><span class="keyword">return</span> s-&gt;data[<span class="number">0</span>];<span class="comment">//返回哨兵结点的elem</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分裂产生返回新根节点</span></span><br><span class="line"><span class="function">BNode* <span class="title">SplitNewRoot</span><span class="params">(BNode* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BNode* s = <span class="built_in">BuyBNode</span>();</span><br><span class="line"><span class="comment">//将ptr中后半截的元素移动到新开辟的s分支中</span></span><br><span class="line">ElemType item = <span class="built_in">MoveElem</span>(s, ptr, MINSIZE);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == ptr-&gt;parent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">MakeRoot</span>(item, ptr, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将item在ptr-&gt;parent结点中再进行找位置，插入，再分裂</span></span><br><span class="line">BNode* pa = ptr-&gt;parent;</span><br><span class="line"><span class="type">int</span> pos = pa-&gt;keysize;</span><br><span class="line">pa-&gt;data[<span class="number">0</span>] = item;<span class="comment">//哨兵位填充</span></span><br><span class="line"><span class="keyword">while</span> (pos &gt; <span class="number">0</span> &amp;&amp; item.key &lt; pa-&gt;data[pos].key)</span><br><span class="line">&#123;</span><br><span class="line">--pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//s是pa的右孩子</span></span><br><span class="line"><span class="built_in">Insert_Item</span>(pa, pos, item, s);</span><br><span class="line"><span class="comment">//pa分支满了，对pa进行递归分裂</span></span><br><span class="line"><span class="keyword">if</span> (pa-&gt;keysize &gt; MAXSIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">SplitNewRoot</span>(pa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">BNode* root;<span class="comment">//根节点</span></span><br><span class="line"><span class="type">int</span> size;<span class="comment">//当前树的关键码的个数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Btree</span>() :<span class="built_in">root</span>(<span class="literal">nullptr</span>), <span class="built_in">size</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">~<span class="built_in">Btree</span>() &#123;&#125;</span><br><span class="line"><span class="comment">//得到root结点地址</span></span><br><span class="line"><span class="function">BNode* <span class="title">GetRoot</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找关键码</span></span><br><span class="line"><span class="function">ResultNode <span class="title">FindKey</span><span class="params">(KeyType ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ResultNode res;<span class="comment">//默认构造nullptr, -1, false;</span></span><br><span class="line">BNode* p = root;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;data[<span class="number">0</span>].key = ch;</span><br><span class="line"><span class="type">int</span> index = p-&gt;keysize;<span class="comment">//逆序查询</span></span><br><span class="line"><span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; ch &lt; p-&gt;data[index].key)</span><br><span class="line">&#123;</span><br><span class="line">--index;</span><br><span class="line">&#125;</span><br><span class="line">res.pnode = p;<span class="comment">//结果指向当前的树结点</span></span><br><span class="line">res.index = index;</span><br><span class="line"><span class="comment">//找到了</span></span><br><span class="line"><span class="keyword">if</span> (index &gt; <span class="number">0</span> &amp;&amp; ch == p-&gt;data[index].key)</span><br><span class="line">&#123;</span><br><span class="line">res.tag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;sub[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入ElemType</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Insert</span><span class="params">(<span class="type">const</span> ElemType&amp; item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == root)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="built_in">MakeRoot</span>(item, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">size = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找item.key是否存在</span></span><br><span class="line">ResultNode res = <span class="built_in">FindKey</span>(item.key);</span><br><span class="line"><span class="comment">//说明已经存在</span></span><br><span class="line"><span class="keyword">if</span> (res.pnode != <span class="literal">nullptr</span> &amp;&amp; res.tag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//不存在，从find的res.pnode开始进行插入</span></span><br><span class="line">BNode* ptr = res.pnode;</span><br><span class="line"><span class="comment">//插入位置</span></span><br><span class="line"><span class="type">int</span> pos = res.index;</span><br><span class="line"><span class="comment">//插入并后移元素</span></span><br><span class="line"><span class="built_in">Insert_Item</span>(ptr, pos, item, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">//插入元素后个数 &gt; MAXSIZE，需要分裂重生出新根节点</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != ptr &amp;&amp; ptr-&gt;keysize &gt; MAXSIZE)</span><br><span class="line">&#123;</span><br><span class="line">BNode* newroot = <span class="built_in">SplitNewRoot</span>(ptr);</span><br><span class="line"><span class="comment">//根节点改变</span></span><br><span class="line"><span class="keyword">if</span> (newroot != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = newroot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">++size;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有序输出B树中的所有元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BTreeShow</span><span class="params">(BNode* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == ptr) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">BTreeShow</span>(ptr-&gt;sub[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ptr-&gt;keysize; ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; ptr-&gt;data[i].key;</span><br><span class="line"><span class="built_in">BTreeShow</span>(ptr-&gt;sub[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、插入、查询、输出测试"><a href="#三、插入、查询、输出测试" class="headerlink" title="三、插入、查询、输出测试"></a>三、插入、查询、输出测试</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Btree::KeyType ch[] = &#123;<span class="string">&quot;heqwertsycjgkzlxlowrd&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">Btree bt;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch[i] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">Btree::ElemType tmp = &#123; ch[i], <span class="literal">nullptr</span> &#125;;</span><br><span class="line">cout &lt;&lt; bt.<span class="built_in">Insert</span>(tmp);</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">bt.<span class="built_in">BTreeShow</span>(bt.<span class="built_in">GetRoot</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/173035e60c7844208c43ca2e0f66083f.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/B%E6%A0%91/541</summary>
      
    
    
    
    <category term="数据结构" scheme="https://hutaohub.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="B树 B-树" scheme="https://hutaohub.github.io/tags/B%E6%A0%91-B-%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】字典树T树</title>
    <link href="https://hutaohub.github.io/posts/e64d031c.html"/>
    <id>https://hutaohub.github.io/posts/e64d031c.html</id>
    <published>2022-05-21T20:58:24.000Z</published>
    <updated>2023-03-28T12:26:43.917Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="引言：为什么需要字典树？"><a href="#引言：为什么需要字典树？" class="headerlink" title="引言：为什么需要字典树？"></a>引言：为什么需要字典树？</h3><ul><li><p>实现类似搜索引擎的效果，当输入“西安”关键字时，下面出现的联想词（如下图）</p><p><img src="https://img-blog.csdnimg.cn/d7888a40e68449e58f0db8edc739c3f0.png" alt="在这里插入图片描述"></p><h3 id="一、字典树逻辑图"><a href="#一、字典树逻辑图" class="headerlink" title="一、字典树逻辑图"></a>一、字典树逻辑图</h3><p><img src="https://img-blog.csdnimg.cn/67592b86f2424c529560375cbf4595bc.png" alt="在这里插入图片描述"></p></li><li>T字典树功能，只能插入结点、暂不能删除结点（删除过程比较复杂）、根据关键码进行查询<h3 id="二、数据结点的设计"><a href="#二、数据结点的设计" class="headerlink" title="二、数据结点的设计"></a>二、数据结点的设计</h3><h4 id="（1）逻辑图"><a href="#（1）逻辑图" class="headerlink" title="（1）逻辑图"></a>（1）逻辑图</h4><img src="https://img-blog.csdnimg.cn/70801c94613d44babbe64bb0913d8acc.png" alt="在这里插入图片描述"><h4 id="（2）详细类型"><a href="#（2）详细类型" class="headerlink" title="（2）详细类型"></a>（2）详细类型</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MaxChSize = <span class="number">26</span>;<span class="comment">//最长关键码</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LinkSize = <span class="number">27</span>;<span class="comment">//分支结点的指针个数</span></span><br><span class="line"><span class="comment">//T树结点的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;ELEM = <span class="number">1</span>, BRCH = <span class="number">2</span>&#125; NodeType;<span class="comment">//1元素结点，2分支结点</span></span><br><span class="line"><span class="comment">//关键码类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch[MaxChSize];<span class="comment">//关键字符</span></span><br><span class="line"><span class="type">int</span> CurSize;<span class="comment">//当前的字符长度</span></span><br><span class="line">&#125;KeyType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素类型(关键码 + 相关信息)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">KeyType key;<span class="comment">//关键码</span></span><br><span class="line"><span class="type">void</span>* InfoPtr;<span class="comment">//相关信息</span></span><br><span class="line">&#125;ElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明TrieNode</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TrieNode</span>;</span><br><span class="line"><span class="comment">//分支结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">TrieNode* Link[LinkSize];<span class="comment">//分支链</span></span><br><span class="line">&#125;BranchNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//T树结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TrieNode</span></span><br><span class="line">&#123;</span><br><span class="line">NodeType Ttype;<span class="comment">//结点类型</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line">ElemType elem;</span><br><span class="line">BranchNode brchNode;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;TrieNode;</span><br></pre></td></tr></table></figure><h3 id="三、T树的详细实现"><a href="#三、T树的详细实现" class="headerlink" title="三、T树的详细实现"></a>三、T树的详细实现</h3></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxChSize = <span class="number">26</span>;<span class="comment">//最长关键码</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LinkSize = <span class="number">27</span>;<span class="comment">//分支结点的指针个数</span></span><br><span class="line"><span class="comment">//T树结点的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; ELEM = <span class="number">1</span>, BRCH = <span class="number">2</span> &#125; NodeType;<span class="comment">//1元素结点，2分支结点</span></span><br><span class="line"><span class="comment">//关键码类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch[MaxChSize];<span class="comment">//关键字符</span></span><br><span class="line"><span class="type">int</span> CurSize;<span class="comment">//当前的字符长度</span></span><br><span class="line">&#125;KeyType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素类型(关键码 + 相关信息)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">KeyType key;<span class="comment">//关键码</span></span><br><span class="line"><span class="type">void</span>* InfoPtr;<span class="comment">//相关信息</span></span><br><span class="line">&#125;ElemType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明TrieNode</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TrieNode</span>;</span><br><span class="line"><span class="comment">//分支结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">TrieNode* Link[LinkSize];<span class="comment">//分支链</span></span><br><span class="line">&#125;BranchNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//T树结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TrieNode</span></span><br><span class="line">&#123;</span><br><span class="line">NodeType Ttype;<span class="comment">//结点类型</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line">ElemType elem;</span><br><span class="line">BranchNode brchNode;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;TrieNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//T字典树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrieTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">TrieNode* root;<span class="comment">//根节点</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TrieTree</span>() : <span class="built_in">root</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">~<span class="built_in">TrieTree</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//第k个元素的下标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TransIndex</span><span class="params">(<span class="type">const</span> KeyType&amp; kch, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>;<span class="comment">//默认0下标</span></span><br><span class="line"><span class="keyword">if</span> (k &lt; kch.CurSize)</span><br><span class="line">&#123;</span><br><span class="line">index = kch.ch[k] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//申请TrieNode结点</span></span><br><span class="line"><span class="function">TrieNode* <span class="title">BuyTrieNode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TrieNode* p = (TrieNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(TrieNode));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == p) <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="built_in">sizeof</span>(TrieNode));</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//申请元素类型结点</span></span><br><span class="line"><span class="function">TrieNode* <span class="title">MakeElemNode</span><span class="params">(<span class="type">const</span> ElemType&amp; item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TrieNode* s = <span class="built_in">BuyTrieNode</span>();</span><br><span class="line">s-&gt;Ttype = ELEM;</span><br><span class="line">s-&gt;elem = item;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//申请分支类型结点</span></span><br><span class="line"><span class="function">TrieNode* <span class="title">MakeBrchNode</span><span class="params">(TrieNode* ptr, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//返回值作为改变root的ptr指向的元素结点</span></span><br><span class="line">TrieNode* s = <span class="built_in">BuyTrieNode</span>();</span><br><span class="line">s-&gt;Ttype = BRCH;</span><br><span class="line"><span class="type">int</span> index = <span class="built_in">TransIndex</span>(ptr-&gt;elem.key, k);</span><br><span class="line">s-&gt;brchNode.Link[index] = ptr;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert_item</span><span class="params">(TrieNode*&amp; ptr, <span class="type">const</span> ElemType&amp; item, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//ptr指向是nullptr</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == ptr)</span><br><span class="line">&#123;</span><br><span class="line">ptr = <span class="built_in">MakeElemNode</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ptr指向是分支结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ptr-&gt;Ttype == BRCH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//寻找第k个字符的分支位置</span></span><br><span class="line"><span class="type">int</span> index = <span class="built_in">TransIndex</span>(item.key, k);</span><br><span class="line"><span class="built_in">Insert_item</span>(ptr-&gt;brchNode.Link[index], item, k + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ptr指向是元素结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ptr-&gt;Ttype == ELEM)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//增加分支, 指向元素结点的ptr重新指向分支</span></span><br><span class="line">ptr = <span class="built_in">MakeBrchNode</span>(ptr, k);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算当前elem的k个字母的下标</span></span><br><span class="line"><span class="type">int</span> index = <span class="built_in">TransIndex</span>(item.key, k);</span><br><span class="line"></span><br><span class="line"><span class="comment">//继续搜寻k+1个字符对应的位置</span></span><br><span class="line"><span class="built_in">Insert_item</span>(ptr-&gt;brchNode.Link[index], item, k + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//通过关键码进行查询</span></span><br><span class="line"><span class="function">TrieNode* <span class="title">FindTrieNode</span><span class="params">(<span class="type">const</span> KeyType&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TrieNode* p = root;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; p-&gt;Ttype == BRCH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> index = <span class="built_in">TransIndex</span>(key, k);</span><br><span class="line">p = p-&gt;brchNode.Link[index];</span><br><span class="line">++k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">nullptr</span> &amp;&amp; <span class="built_in">strcmp</span>(p-&gt;elem.key.ch, key.ch) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Insert</span><span class="params">(<span class="type">const</span> ElemType&amp; item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//去重,存在则插入失败</span></span><br><span class="line">TrieNode* res = <span class="built_in">FindTrieNode</span>(item.key);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != res) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Insert_item</span>(root, item, k);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="四、插入、查询测试"><a href="#四、插入、查询测试" class="headerlink" title="四、插入、查询测试"></a>四、插入、查询测试</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//给定关键码</span></span><br><span class="line">KeyType keySet[] = &#123; <span class="string">&quot;cao&quot;</span>, <span class="number">3</span>, <span class="string">&quot;cai&quot;</span>, <span class="number">3</span>, <span class="string">&quot;feng&quot;</span>, <span class="number">4</span>, <span class="string">&quot;fengt&quot;</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span> size = <span class="built_in">sizeof</span>(keySet) / <span class="built_in">sizeof</span>(keySet[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//构建T树(是在插入元素结点的过程中不断的扩充、分裂)</span></span><br><span class="line">TrieTree Tt;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line">ElemType node = &#123; keySet[i], <span class="literal">nullptr</span> &#125;;</span><br><span class="line">Tt.<span class="built_in">Insert</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line">TrieNode* res = Tt.<span class="built_in">FindTrieNode</span>(keySet[i]);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;found it! &quot;</span> &lt;&lt; res-&gt;elem.key.ch &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3035bf61e6844b039bd5ab41c6c09a7e.png" alt="在这里插入图片描述"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;引言：为什么需要字典树？&quot;&gt;&lt;a href=&quot;#引言：为什么需要字典树？&quot; class=&quot;headerlink&quot; title=&quot;引言：为什么需要字典树？&quot;&gt;&lt;/a&gt;引言：为什么需要字典树？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;实现类似搜索引擎的效果，当输入“</summary>
      
    
    
    
    <category term="数据结构" scheme="https://hutaohub.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="字典树 T树" scheme="https://hutaohub.github.io/tags/%E5%AD%97%E5%85%B8%E6%A0%91-T%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【设计模式】类关系</title>
    <link href="https://hutaohub.github.io/posts/9a72630a.html"/>
    <id>https://hutaohub.github.io/posts/9a72630a.html</id>
    <published>2022-05-11T14:58:11.000Z</published>
    <updated>2023-03-28T12:26:43.921Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p><strong>耦合性：</strong><a href="https://blog.csdn.net/qingfeng812/article/details/8962836">参考文章</a></p><h2 id="下面就通过耦合性的由弱到强，依赖、关联、聚合、组合、继承（泛化）、实现。（总结：衣冠剧组呈现）"><a href="#下面就通过耦合性的由弱到强，依赖、关联、聚合、组合、继承（泛化）、实现。（总结：衣冠剧组呈现）" class="headerlink" title="下面就通过耦合性的由弱到强，依赖、关联、聚合、组合、继承（泛化）、实现。（总结：衣冠剧组呈现）"></a>下面就通过耦合性的由弱到强，依赖、关联、聚合、组合、继承（泛化）、实现。（总结：衣冠剧组呈现）</h2></blockquote><h3 id="一、依赖Dependency"><a href="#一、依赖Dependency" class="headerlink" title="一、依赖Dependency"></a>一、依赖Dependency</h3><p><strong>例：A类是B类的成员函数的参数、返回值（局部变量）</strong><br><img src="https://img-blog.csdnimg.cn/1b187a706ef7421680e0601ba60e48ce.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FunB</span><span class="params">(A&amp; a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function">A <span class="title">GetA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">A</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二、关联Association"><a href="#二、关联Association" class="headerlink" title="二、关联Association"></a>二、关联Association</h3><p><strong>例：A类是B类的一个成员属性</strong></p><p><strong>（1）弱关联</strong><br><img src="https://img-blog.csdnimg.cn/de22977859444cdfa16b597c650ea64c.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">A* pa;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(A* ptr):<span class="built_in">pa</span>(ptr)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="comment">//B析构函数不能delete pa，弱关联关系</span></span><br><span class="line">~<span class="built_in">B</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A a;</span><br><span class="line"><span class="function">B <span class="title">b</span><span class="params">(&amp;a)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）强关联</strong><br><img src="https://img-blog.csdnimg.cn/29e59227011b4b0eb52b7752973911bb.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">A&amp; aref;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//强关联，引用必须初始化</span></span><br><span class="line"><span class="comment">//注意：参数不能使用A a 来构造aref</span></span><br><span class="line"><span class="comment">//（当a的声明周期结束后（只有该函数内），函数结束aref就会失效）</span></span><br><span class="line"><span class="built_in">B</span>(A&amp; a):<span class="built_in">aref</span>(a)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">B</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A a;</span><br><span class="line"><span class="function">B <span class="title">b</span><span class="params">(a)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、聚合Aggregation"><a href="#三、聚合Aggregation" class="headerlink" title="三、聚合Aggregation"></a>三、聚合Aggregation</h3><p><img src="https://img-blog.csdnimg.cn/d7c223bee38e45c3890a5e42c6af4bf3.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _x;</span><br><span class="line"><span class="type">int</span> _y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">point</span>(<span class="type">int</span> x, <span class="type">int</span> y): _x(x), _y(y)&#123;&#125;</span><br><span class="line">~<span class="built_in">point</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">point center;<span class="comment">//圆心</span></span><br><span class="line"><span class="type">int</span> radius;<span class="comment">//半径</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Circle</span>():<span class="built_in">center</span>(<span class="built_in">pointer</span>(<span class="number">0</span>, <span class="number">0</span>)), <span class="built_in">radius</span>(<span class="number">0</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="四、组合Composition"><a href="#四、组合Composition" class="headerlink" title="四、组合Composition"></a>四、组合Composition</h3><p><img src="https://img-blog.csdnimg.cn/56a94a4921e64fbca4bb9a8537c42dda.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">body</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">soul</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">human</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">body _bd;</span><br><span class="line">soul _sl;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">human</span>(<span class="type">const</span> body&amp; bd, <span class="type">const</span> soul&amp; sl):_bd(bd), _sl(sl)</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="五、继承Generalization"><a href="#五、继承Generalization" class="headerlink" title="五、继承Generalization"></a>五、继承Generalization</h3><p><img src="https://img-blog.csdnimg.cn/26e73ea3d8f24442b74386b8292754b4.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> : <span class="keyword">public</span> Animal&#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="六、实现Realization"><a href="#六、实现Realization" class="headerlink" title="六、实现Realization"></a>六、实现Realization</h3><p>实现对应的是面向对象中的”接口”，即动物都要移动，但是每种移动的方式不一样，鸟要实现自己独有的移动的方法。<br>在C++中，接口通过的纯虚函数来实现，C++的多态就是通过虚函数来实现的。</p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">vitual <span class="type">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span>: <span class="keyword">public</span> Animal&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//鸟的移动方式，飞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></h2><p>参考文章：<br><a href="https://www.cnblogs.com/xiaojiang1025/p/6677978.html">面向对象的类关系及其C++实现</a><br><a href="https://blog.csdn.net/kiki44944/article/details/81153804">设计模式中类的关系：依赖、关联、聚合、组合、继承、实现。耦合度依次递增</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;耦合性：&lt;/strong&gt;&lt;a href=&quot;https://blog.csdn.net/</summary>
      
    
    
    
    <category term="设计模式" scheme="https://hutaohub.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="类关系 UML" scheme="https://hutaohub.github.io/tags/%E7%B1%BB%E5%85%B3%E7%B3%BB-UML/"/>
    
  </entry>
  
  <entry>
    <title>【C++多线程】银行多人转账模拟</title>
    <link href="https://hutaohub.github.io/posts/6a6371fd.html"/>
    <id>https://hutaohub.github.io/posts/6a6371fd.html</id>
    <published>2022-05-03T17:02:14.000Z</published>
    <updated>2023-03-28T12:26:43.913Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h3><blockquote><p><strong>使用C++的线程并发库，实现并模拟多人在线同时转账的过程，确保转账不能出现差错。</strong></p><p>例如：<br>Account A(“xiaoming”, 1000);<br>Account B(“zhangqiang”, 2000);<br>Account C(“zq”, 1500);</p></blockquote><pre><code>B-&gt;A 200    A 1200 B 1800B-&gt;C 500    B 1300 C 2000C-&gt;A 300    A 1500 C 1700</code></pre><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Account</span>() :<span class="built_in">name</span>(), <span class="built_in">money</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"><span class="built_in">Account</span>(<span class="type">const</span> string&amp; na, <span class="type">int</span> my) : <span class="built_in">name</span>(na), <span class="built_in">money</span>(my) &#123;&#125;</span><br><span class="line">~<span class="built_in">Account</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">int</span> <span class="title">GetMoney</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> money;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetMoney</span><span class="params">(<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">money = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">const</span> string&amp; <span class="title">GetName</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> money;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">~<span class="built_in">Bank</span>() &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> Bank&amp; <span class="title">GetSingleBank</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> bank;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//A转给B money</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TransAccounts</span><span class="params">(Account&amp; A, Account&amp; B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (map.<span class="built_in">count</span>(A.<span class="built_in">GetName</span>()) &gt; <span class="number">0</span> || map.<span class="built_in">count</span>(B.<span class="built_in">GetName</span>()) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cv.<span class="built_in">wait</span>(lock);</span><br><span class="line">&#125;</span><br><span class="line">map[A.<span class="built_in">GetName</span>()] = A.<span class="built_in">GetMoney</span>();</span><br><span class="line">map[B.<span class="built_in">GetName</span>()] = B.<span class="built_in">GetMoney</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清除交易完成的账户</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ClearAccount</span><span class="params">(Account&amp; A, Account&amp; B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lcok</span><span class="params">(mtx)</span></span>;</span><br><span class="line">map.<span class="built_in">erase</span>(A.<span class="built_in">GetName</span>());</span><br><span class="line">map.<span class="built_in">erase</span>(B.<span class="built_in">GetName</span>());</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Bank</span>() = <span class="keyword">default</span>;</span><br><span class="line">Bank&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Bank&amp; b) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="type">static</span> Bank bank;</span><br><span class="line"></span><br><span class="line">std::map&lt;string, <span class="type">int</span>&gt; map;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//单例：类外初始化</span></span><br><span class="line">Bank Bank::bank;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ThreadFun</span><span class="params">(Account&amp; A, Account&amp; B, <span class="type">int</span> money)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (money &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">Bank&amp; bank = Bank::<span class="built_in">GetSingleBank</span>();</span><br><span class="line">bank.<span class="built_in">TransAccounts</span>(A, B);</span><br><span class="line"><span class="keyword">if</span> (A.<span class="built_in">GetMoney</span>() &gt;= money)</span><br><span class="line">&#123;</span><br><span class="line">A.<span class="built_in">SetMoney</span>(A.<span class="built_in">GetMoney</span>() - money);</span><br><span class="line">B.<span class="built_in">SetMoney</span>(B.<span class="built_in">GetMoney</span>() + money);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; A.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt; B.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;交易失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">bank.<span class="built_in">ClearAccount</span>(A, B);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Account <span class="title">A</span><span class="params">(<span class="string">&quot;xiaoming&quot;</span>, <span class="number">1000</span>)</span></span>;</span><br><span class="line"><span class="function">Account <span class="title">B</span><span class="params">(<span class="string">&quot;zhangqiang&quot;</span>, <span class="number">2000</span>)</span></span>;</span><br><span class="line"><span class="function">Account <span class="title">C</span><span class="params">(<span class="string">&quot;zq&quot;</span>, <span class="number">1500</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(ThreadFun, std::ref(B), std::ref(A), <span class="number">200</span>)</span></span>; <span class="comment">//A 1200 B 1800</span></span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(ThreadFun, std::ref(B), std::ref(C), <span class="number">500</span>)</span></span>; <span class="comment">//B 1300 C 2000</span></span><br><span class="line"><span class="function">thread <span class="title">thc</span><span class="params">(ThreadFun, std::ref(C), std::ref(A), <span class="number">300</span>)</span></span>; <span class="comment">//A 1500 C 1700</span></span><br><span class="line"></span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line">thc.<span class="built_in">join</span>();</span><br><span class="line"><span class="comment">//A 1500 B 1300 C 1700</span></span><br><span class="line">cout &lt;&lt; A.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;: &quot;</span>&lt;&lt; A.<span class="built_in">GetMoney</span>()&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; B.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;: &quot;</span>&lt;&lt; B.<span class="built_in">GetMoney</span>()&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; C.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; C.<span class="built_in">GetMoney</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/33a666ab0d1e4a3d8b9b2c4a528f883e.png" alt="在这里插入图片描述"></p><h3 id="三、使用线程并发库"><a href="#三、使用线程并发库" class="headerlink" title="三、使用线程并发库"></a>三、使用线程并发库</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Account</span>() :<span class="built_in">name</span>(), <span class="built_in">money</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"><span class="built_in">Account</span>(<span class="type">const</span> string&amp; na, <span class="type">int</span> my) : <span class="built_in">name</span>(na), <span class="built_in">money</span>(my) &#123;&#125;</span><br><span class="line">~<span class="built_in">Account</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">int</span> <span class="title">GetMoney</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> money;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetMoney</span><span class="params">(<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">money = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">const</span> string&amp; <span class="title">GetName</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> money;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">mutex mtx1;</span><br><span class="line">mutex mtx2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ThreadFun</span><span class="params">(Account&amp; A, Account&amp; B, <span class="type">int</span> money)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock1</span><span class="params">(mtx1, defer_lock)</span></span>;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock2</span><span class="params">(mtx2, defer_lock)</span></span>;</span><br><span class="line"><span class="built_in">lock</span>(lock1, lock2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (A.<span class="built_in">GetMoney</span>() &gt;= money)</span><br><span class="line">&#123;</span><br><span class="line">A.<span class="built_in">SetMoney</span>(A.<span class="built_in">GetMoney</span>() - money);</span><br><span class="line">B.<span class="built_in">SetMoney</span>(B.<span class="built_in">GetMoney</span>() + money);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Account <span class="title">A</span><span class="params">(<span class="string">&quot;xiaoming&quot;</span>, <span class="number">1000</span>)</span></span>;</span><br><span class="line"><span class="function">Account <span class="title">B</span><span class="params">(<span class="string">&quot;zhangqiang&quot;</span>, <span class="number">2000</span>)</span></span>;</span><br><span class="line"><span class="function">Account <span class="title">C</span><span class="params">(<span class="string">&quot;zq&quot;</span>, <span class="number">1500</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(ThreadFun, std::ref(B), std::ref(A), <span class="number">200</span>)</span></span>; <span class="comment">//A 1200 B 1800</span></span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(ThreadFun, std::ref(B), std::ref(C), <span class="number">500</span>)</span></span>; <span class="comment">//B 1300 C 2000</span></span><br><span class="line"><span class="function">thread <span class="title">thc</span><span class="params">(ThreadFun, std::ref(C), std::ref(A), <span class="number">300</span>)</span></span>; <span class="comment">//A 1500 C 1700</span></span><br><span class="line"></span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line">thc.<span class="built_in">join</span>();</span><br><span class="line"><span class="comment">//A 1500 B 1300 C 1700</span></span><br><span class="line">cout &lt;&lt; A.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; A.<span class="built_in">GetMoney</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; B.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; B.<span class="built_in">GetMoney</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; C.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; C.<span class="built_in">GetMoney</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/eed88e2b6a2b486bb53dae5d64a67acd.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;一、题目要求&quot;&gt;&lt;a href=&quot;#一、题目要求&quot; class=&quot;headerlink&quot; title=&quot;一、题目要求&quot;&gt;&lt;/a&gt;一、题目要求&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用C++的线程并发库，实现并模拟多人在线同时转账的过程</summary>
      
    
    
    
    <category term="C++" scheme="https://hutaohub.github.io/categories/C/"/>
    
    
    <category term="银行多人转账" scheme="https://hutaohub.github.io/tags/%E9%93%B6%E8%A1%8C%E5%A4%9A%E4%BA%BA%E8%BD%AC%E8%B4%A6/"/>
    
  </entry>
  
  <entry>
    <title>【C++多线程】生产者消费者模型</title>
    <link href="https://hutaohub.github.io/posts/7878fa2b.html"/>
    <id>https://hutaohub.github.io/posts/7878fa2b.html</id>
    <published>2022-04-29T19:41:53.000Z</published>
    <updated>2023-03-28T12:26:43.913Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h3><blockquote><p><strong>生产者消费者模型：在多线程下生产0~100个数，生产者线程1生产20个数据后，消费者线程1进行消费输出。</strong></p></blockquote><h3 id="二、解答"><a href="#二、解答" class="headerlink" title="二、解答"></a>二、解答</h3><p>使用到的技术：互斥锁、条件变量、多线程、双端队列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//生产数据: index是生产者编号，val是生产的结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PushData</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="comment">//size == 20</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock, [<span class="keyword">this</span>]()-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> qu.<span class="built_in">size</span>() != <span class="number">20</span>; &#125;);</span><br><span class="line">qu.<span class="built_in">push_back</span>(val);</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Producer:&quot;</span> &lt;&lt; index &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;val:&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费数据: index是消费者编号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PopData</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="comment">//!qu空 -&gt;真 , 继续执行</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock, [<span class="keyword">this</span>]()-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> !qu.<span class="built_in">empty</span>(); &#125;);</span><br><span class="line"><span class="type">int</span> val = qu.<span class="built_in">front</span>();</span><br><span class="line">qu.<span class="built_in">pop_front</span>();</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Customer:&quot;</span> &lt;&lt; index &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;val:&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; qu;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Producer</span><span class="params">(Queue&amp; qu, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">qu.<span class="built_in">PushData</span>(index, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Customer</span><span class="params">(Queue&amp; qu, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">qu.<span class="built_in">PopData</span>(index);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue qu;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(Producer, std::ref(qu), <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(Customer, std::ref(qu), <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//thread thc(Producer, std::ref(qu), 2);</span></span><br><span class="line"><span class="comment">//thread thd(Customer, std::ref(qu), 2);</span></span><br><span class="line"></span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line"><span class="comment">//thc.join();</span></span><br><span class="line"><span class="comment">//thd.join();</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/40ce8cb27461475eb0cd63711ad7fc1a.png" alt="在这里插入图片描述"></p><h3 id="三、题目要求"><a href="#三、题目要求" class="headerlink" title="三、题目要求"></a>三、题目要求</h3><blockquote><p><strong>实现一个循环队列，生产者线程生产0~100， 每次最多生产8个，然后消费者线程进行输出使用。</strong></p><p><strong>根据锁的粒度分为：</strong></p><ul><li><strong>行锁：并发性强，锁开销较大</strong></li><li><strong>表锁：并发性弱，锁开销较小</strong><h3 id="四、解答"><a href="#四、解答" class="headerlink" title="四、解答"></a>四、解答</h3><h4 id="（1）行锁"><a href="#（1）行锁" class="headerlink" title="（1）行锁"></a>（1）行锁</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Queue</span>() </span><br><span class="line">:<span class="built_in">data</span>(<span class="keyword">new</span> T[MAXSIZE]), <span class="built_in">maxsize</span>(MAXSIZE), <span class="built_in">front</span>(<span class="number">0</span>), <span class="built_in">rear</span>(<span class="number">0</span>), <span class="built_in">size</span>(<span class="number">0</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line">~<span class="built_in">Queue</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> data;</span><br><span class="line">&#125;</span><br><span class="line">maxsize = <span class="number">-1</span>;</span><br><span class="line">front = <span class="number">-1</span>;</span><br><span class="line">rear = <span class="number">-1</span>;</span><br><span class="line">size = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Capacity</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> maxsize; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Size</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> size == <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Full</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> size == maxsize; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push_back</span><span class="params">(T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Full</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">data[rear] = val;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxsize;</span><br><span class="line">++size;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop_front</span><span class="params">(T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">val = data[front];</span><br><span class="line">front = (front + <span class="number">1</span>) % maxsize;</span><br><span class="line">--size;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* data;</span><br><span class="line"><span class="type">int</span> maxsize;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="type">int</span> front;</span><br><span class="line"><span class="type">int</span> rear;</span><br><span class="line">&#125;;</span><br><span class="line">Queue&lt;<span class="type">int</span>&gt; qu;</span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"><span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Producer</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = number; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//行锁</span></span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="comment">//当qu不满 为真，继续执行</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock, []()-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> !qu.<span class="built_in">Full</span>(); &#125;);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">qu.<span class="built_in">Push_back</span>(i);</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Producer:&quot;</span> &lt;&lt; index &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; <span class="string">&quot;val:&quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Customer</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = number; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//行锁</span></span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="comment">//当qu不空 为真，继续执行</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock, []()-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> !qu.<span class="built_in">Empty</span>(); &#125;);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">qu.<span class="built_in">Pop_front</span>(val);</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Customer:&quot;</span> &lt;&lt; index &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;val:&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(Producer, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(Customer, <span class="number">1</span>)</span></span>;</span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/e4439598dfbd492885739904f1999e51.png" alt="在这里插入图片描述"></li></ul></blockquote><h4 id="（2）表锁"><a href="#（2）表锁" class="headerlink" title="（2）表锁"></a>（2）表锁</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Queue</span>() </span><br><span class="line">:<span class="built_in">data</span>(<span class="keyword">new</span> T[MAXSIZE]), <span class="built_in">maxsize</span>(MAXSIZE), <span class="built_in">front</span>(<span class="number">0</span>), <span class="built_in">rear</span>(<span class="number">0</span>), <span class="built_in">size</span>(<span class="number">0</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line">~<span class="built_in">Queue</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> data;</span><br><span class="line">&#125;</span><br><span class="line">maxsize = <span class="number">-1</span>;</span><br><span class="line">front = <span class="number">-1</span>;</span><br><span class="line">rear = <span class="number">-1</span>;</span><br><span class="line">size = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Capacity</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> maxsize; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Size</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> size == <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Full</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> size == maxsize; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push_back</span><span class="params">(T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Full</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">data[rear] = val;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxsize;</span><br><span class="line">++size;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop_front</span><span class="params">(T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">val = data[front];</span><br><span class="line">front = (front + <span class="number">1</span>) % maxsize;</span><br><span class="line">--size;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* data;</span><br><span class="line"><span class="type">int</span> maxsize;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="type">int</span> front;</span><br><span class="line"><span class="type">int</span> rear;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Queue&lt;<span class="type">int</span>&gt; qu;</span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"><span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Producer</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = number; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当qu不满 为真，继续执行</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock, []()-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> !qu.<span class="built_in">Full</span>(); &#125;);</span><br><span class="line">qu.<span class="built_in">Push_back</span>(i);</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Producer:&quot;</span> &lt;&lt; index &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; <span class="string">&quot;val:&quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line"><span class="comment">//std::this_thread::sleep_for(std::chrono::milliseconds(100));</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Customer</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = number; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当qu不空 为真，继续执行</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock, []()-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> !qu.<span class="built_in">Empty</span>(); &#125;);</span><br><span class="line"><span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">qu.<span class="built_in">Pop_front</span>(val);</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Customer:&quot;</span> &lt;&lt; index &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;val:&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(Producer, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(Customer, <span class="number">1</span>)</span></span>;</span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fd75f26553d240d188f2de6899501021.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;一、题目要求&quot;&gt;&lt;a href=&quot;#一、题目要求&quot; class=&quot;headerlink&quot; title=&quot;一、题目要求&quot;&gt;&lt;/a&gt;一、题目要求&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;生产者消费者模型：在多线程下生产0~100个数，生产者线</summary>
      
    
    
    
    <category term="C++" scheme="https://hutaohub.github.io/categories/C/"/>
    
    
    <category term="多线程 生产者 消费者" scheme="https://hutaohub.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>【LC动态规划】542. 01 矩阵</title>
    <link href="https://hutaohub.github.io/posts/f0b54c00.html"/>
    <id>https://hutaohub.github.io/posts/f0b54c00.html</id>
    <published>2022-04-27T20:14:25.000Z</published>
    <updated>2023-03-28T12:26:43.917Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><img src="https://img-blog.csdnimg.cn/46242c7bc8ee44869f00449042cecf29.png" alt="在这里插入图片描述"></p><h3 id="二、算法分析"><a href="#二、算法分析" class="headerlink" title="二、算法分析"></a>二、算法分析</h3><p><img src="https://img-blog.csdnimg.cn/7134134c5aa648eb8cbd03629d1ebbda.png" alt="在这里插入图片描述"></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat) &#123;</span><br><span class="line">        <span class="type">int</span> m = mat.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, INT_MAX - <span class="number">100000</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从左上-&gt;右下遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//上邻居</span></span><br><span class="line">                <span class="keyword">if</span>(i &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i - <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//左邻居</span></span><br><span class="line">                <span class="keyword">if</span>(j &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右下-&gt;左上</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//下</span></span><br><span class="line">                <span class="keyword">if</span>(i &lt; m - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i + <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//右</span></span><br><span class="line">                <span class="keyword">if</span>(j &lt; n - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][j + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ul><li>时间复杂度：O(m * n)</li><li>空间复杂度：O(m * n)</li><li><a href="https://leetcode-cn.com/problems/01-matrix/">题目传送门</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;一、题目描述&quot;&gt;&lt;a href=&quot;#一、题目描述&quot; class=&quot;headerlink&quot; title=&quot;一、题目描述&quot;&gt;&lt;/a&gt;一、题目描述&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/46242c7bc8e</summary>
      
    
    
    
    <category term="LC" scheme="https://hutaohub.github.io/categories/LC/"/>
    
    
    <category term="01矩阵" scheme="https://hutaohub.github.io/tags/01%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
</feed>
