<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【操作系统】第三章 内存管理</title>
      <link href="/posts/a575ca89.html"/>
      <url>/posts/a575ca89.html</url>
      
        <content type="html"><![CDATA[<h2 id="第三章-知识体系"><a href="#第三章-知识体系" class="headerlink" title="第三章 知识体系"></a>第三章 知识体系</h2><p><img src="https://img-blog.csdnimg.cn/d5e76a2a56ba41c1949efbe7a3d40a0f.png" alt="在这里插入图片描述"></p><h3 id="3-1-内存管理概念"><a href="#3-1-内存管理概念" class="headerlink" title="3.1 内存管理概念"></a>3.1 内存管理概念</h3><h4 id="3-1-1-内存管理的基本原理和要求"><a href="#3-1-1-内存管理的基本原理和要求" class="headerlink" title="3.1.1 内存管理的基本原理和要求"></a>3.1.1 内存管理的基本原理和要求</h4><p><img src="https://img-blog.csdnimg.cn/f9a39fb59d914a69bdf366165360b581.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7a489f128f15423c8218c01b602869cf.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/75ca7b2a95574cea865cc53f85c4e74e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0769190bfe434bc0956a2cdb5f92559a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c5e8a4177634451bb73aba2e3037abd4.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a5021768017d4b5f9c8b545da182c93b.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/735502412bf747908bf22ec42d3c95b8.png" alt="在这里插入图片描述"></p><h4 id="3-1-2-覆盖和交换"><a href="#3-1-2-覆盖和交换" class="headerlink" title="3.1.2 覆盖和交换"></a>3.1.2 覆盖和交换</h4><p><img src="https://img-blog.csdnimg.cn/baabce00c20d46809c39fb39df7cc7cf.png" alt="在这里插入图片描述"></p><h4 id="3-1-3-连续分配管理方式"><a href="#3-1-3-连续分配管理方式" class="headerlink" title="3.1.3 连续分配管理方式"></a>3.1.3 连续分配管理方式</h4><p><img src="https://img-blog.csdnimg.cn/6d09d8a837e143808788a0a2b9720553.png" alt="在这里插入图片描述"></p><h4 id="3-1-4-基本分页存储管理"><a href="#3-1-4-基本分页存储管理" class="headerlink" title="3.1.4 基本分页存储管理"></a>3.1.4 基本分页存储管理</h4><p><img src="https://img-blog.csdnimg.cn/3cdda505880b4bbbb8a51ebebcbf5eae.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/23c8cf963bcc4265bb480b5acee0b370.png" alt="在这里插入图片描述"></p><h4 id="3-1-5-基本分段存储管理"><a href="#3-1-5-基本分段存储管理" class="headerlink" title="3.1.5 基本分段存储管理"></a>3.1.5 基本分段存储管理</h4><p><img src="https://img-blog.csdnimg.cn/c24fe2ceeb0a415db8d93c3bb7625420.png" alt="在这里插入图片描述"></p><h4 id="3-1-6-段页式管理"><a href="#3-1-6-段页式管理" class="headerlink" title="3.1.6 段页式管理"></a>3.1.6 段页式管理</h4><p><img src="https://img-blog.csdnimg.cn/3d157ff1bb774fd898f1f75c0f34832e.png" alt="在这里插入图片描述"></p><h4 id="3-1-7-分页、分段与段页式的比较"><a href="#3-1-7-分页、分段与段页式的比较" class="headerlink" title="3.1.7 分页、分段与段页式的比较"></a>3.1.7 分页、分段与段页式的比较</h4><p><img src="https://img-blog.csdnimg.cn/d7514bdc24914610b4c7bd567d082d4f.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/335c98eb3cbe43e69dc6a08f4aa86f25.png" alt="在这里插入图片描述"></p><h3 id="3-2-虚拟内存管理"><a href="#3-2-虚拟内存管理" class="headerlink" title="3.2 虚拟内存管理"></a>3.2 虚拟内存管理</h3><p><img src="https://img-blog.csdnimg.cn/2466f2953c5748ffa2b1812ba6401f74.png" alt="在这里插入图片描述"></p><h4 id="3-2-1-虚拟内存的基本概念"><a href="#3-2-1-虚拟内存的基本概念" class="headerlink" title="3.2.1 虚拟内存的基本概念"></a>3.2.1 虚拟内存的基本概念</h4><p><img src="https://img-blog.csdnimg.cn/200007c12c174d1f85380d05b9a3ae7a.png" alt="在这里插入图片描述"></p><h4 id="3-2-2-请求分页管理方式"><a href="#3-2-2-请求分页管理方式" class="headerlink" title="3.2.2 请求分页管理方式"></a>3.2.2 请求分页管理方式</h4><p><img src="https://img-blog.csdnimg.cn/74b07e45afcb45fd95bf289a7b3cf07b.png" alt="在这里插入图片描述"></p><h4 id="3-2-3-页框分配"><a href="#3-2-3-页框分配" class="headerlink" title="3.2.3 页框分配"></a>3.2.3 页框分配</h4><p><img src="https://img-blog.csdnimg.cn/fc7b8926efdc41db8cf5fb639e3a609b.png" alt="在这里插入图片描述"></p><h4 id="3-2-4-页面置换算法"><a href="#3-2-4-页面置换算法" class="headerlink" title="3.2.4 页面置换算法"></a>3.2.4 页面置换算法</h4><p><img src="https://img-blog.csdnimg.cn/13f8468f22ff473e8a7133f0a5a8d5ab.png" alt="在这里插入图片描述"></p><h4 id="3-2-5-抖动和工作集"><a href="#3-2-5-抖动和工作集" class="headerlink" title="3.2.5 抖动和工作集"></a>3.2.5 抖动和工作集</h4><p><img src="https://img-blog.csdnimg.cn/07d6a786ac074e4ba74b908d9360541b.png" alt="在这里插入图片描述"></p><h4 id="3-2-6-内存映射文件"><a href="#3-2-6-内存映射文件" class="headerlink" title="3.2.6 内存映射文件"></a>3.2.6 内存映射文件</h4><p><img src="https://img-blog.csdnimg.cn/4ad5edfd47e2494cac31ea354cef970b.png" alt="在这里插入图片描述"></p><h4 id="3-2-7-虚拟存储器性能影响因素"><a href="#3-2-7-虚拟存储器性能影响因素" class="headerlink" title="3.2.7 虚拟存储器性能影响因素"></a>3.2.7 虚拟存储器性能影响因素</h4><p><img src="https://img-blog.csdnimg.cn/72dc6cc49b8c4008ab7d2c26dff11487.png" alt="因素"></p><h4 id="3-2-8-地址翻译"><a href="#3-2-8-地址翻译" class="headerlink" title="3.2.8 地址翻译"></a>3.2.8 地址翻译</h4><p>待补充…</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】第四章 串</title>
      <link href="/posts/9250aaf9.html"/>
      <url>/posts/9250aaf9.html</url>
      
        <content type="html"><![CDATA[<h2 id="第四章-知识体系"><a href="#第四章-知识体系" class="headerlink" title="第四章 知识体系"></a>第四章 知识体系</h2><p><img src="https://img-blog.csdnimg.cn/39524b399f2f4afc99c781fb360a8091.png" alt="在这里插入图片描述"></p><h3 id="4-1-串的定义和实现"><a href="#4-1-串的定义和实现" class="headerlink" title="4.1 串的定义和实现"></a>4.1 串的定义和实现</h3><p><img src="https://img-blog.csdnimg.cn/52b15e7dc28d47aa92a19187ede557c3.png" alt="在这里插入图片描述"></p><h3 id="4-2-串的模式匹配"><a href="#4-2-串的模式匹配" class="headerlink" title="4.2 串的模式匹配"></a>4.2 串的模式匹配</h3><h4 id="4-2-1-BF简单模式匹配算法"><a href="#4-2-1-BF简单模式匹配算法" class="headerlink" title="4.2.1 BF简单模式匹配算法"></a>4.2.1 BF简单模式匹配算法</h4><p><img src="https://img-blog.csdnimg.cn/83c9d45672e84afdbf78659083727fe7.png" alt="在这里插入图片描述"></p><h4 id="4-2-2-KMP算法"><a href="#4-2-2-KMP算法" class="headerlink" title="4.2.2 KMP算法"></a>4.2.2 KMP算法</h4><p><img src="https://img-blog.csdnimg.cn/13bd10fdd03d4635a515d062e21d2413.png" alt="在这里插入图片描述"></p><h4 id="4-2-3-KMP算法的优化"><a href="#4-2-3-KMP算法的优化" class="headerlink" title="4.2.3 KMP算法的优化"></a>4.2.3 KMP算法的优化</h4><p>KMP算法的优化就是对next数组进行优化 并使用nextval作为新的模式串的回退数组，进而达到优化KMP算法，详细优化思想如下<br><img src="https://img-blog.csdnimg.cn/1cd27150e89846e691b67c2c3ba5983a.png" alt="请添加图片描述"><br>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对next数组进行优化-&gt;生成nextval数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetNextVal</span><span class="params">(<span class="type">char</span>* str, <span class="type">int</span> len, <span class="type">int</span>* next, <span class="type">int</span>* nextval)</span></span>&#123;</span><br><span class="line">nextval[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= len; ++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(str[j] == str[next[j]])</span><br><span class="line">nextval[j] = nextval[next[j]];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">nextval[j] = next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BF KMP 串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】第三章 栈 队列和数组</title>
      <link href="/posts/a35a5643.html"/>
      <url>/posts/a35a5643.html</url>
      
        <content type="html"><![CDATA[<h2 id="第三章-知识体系"><a href="#第三章-知识体系" class="headerlink" title="第三章 知识体系"></a>第三章 知识体系</h2><p><img src="https://img-blog.csdnimg.cn/f1a1bb4c52d04988965773fa790cb21e.png" alt="在这里插入图片描述"></p><h3 id="3-1-栈"><a href="#3-1-栈" class="headerlink" title="3.1 栈"></a>3.1 栈</h3><h4 id="3-1-1-栈的基本概念"><a href="#3-1-1-栈的基本概念" class="headerlink" title="3.1.1 栈的基本概念"></a>3.1.1 栈的基本概念</h4><p><img src="https://img-blog.csdnimg.cn/8ac66646dd8f447c84410ee1e23b15ba.png" alt="在这里插入图片描述"></p><h4 id="3-1-2-栈的顺序存储结构"><a href="#3-1-2-栈的顺序存储结构" class="headerlink" title="3.1.2 栈的顺序存储结构"></a>3.1.2 栈的顺序存储结构</h4><p><img src="https://img-blog.csdnimg.cn/5b33435fa71c4687b6eed600003355d8.png" alt="在这里插入图片描述"></p><h4 id="3-1-3-栈的链式存储结构"><a href="#3-1-3-栈的链式存储结构" class="headerlink" title="3.1.3 栈的链式存储结构"></a>3.1.3 栈的链式存储结构</h4><p><img src="https://img-blog.csdnimg.cn/cb7d2a8584d945a0a048e7ddbe351464.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/89f9a5c9f0df41f4923d67e725a15e2b.png" alt="在这里插入图片描述"></p><h4 id="3-1-4-栈的操作"><a href="#3-1-4-栈的操作" class="headerlink" title="3.1.4 栈的操作"></a>3.1.4 栈的操作</h4><p><img src="https://img-blog.csdnimg.cn/8b227c15f8f8437c88128c54b72a9ee5.png" alt="在这里插入图片描述"></p><h3 id="3-2-队列"><a href="#3-2-队列" class="headerlink" title="3.2 队列"></a>3.2 队列</h3><h4 id="3-2-1-队列的基本概念"><a href="#3-2-1-队列的基本概念" class="headerlink" title="3.2.1 队列的基本概念"></a>3.2.1 队列的基本概念</h4><p><img src="https://img-blog.csdnimg.cn/53cbddb028ba43b2b7abf3f3d8ce2653.png" alt="在这里插入图片描述"></p><h4 id="3-2-2-队列的顺序存储结构"><a href="#3-2-2-队列的顺序存储结构" class="headerlink" title="3.2.2 队列的顺序存储结构"></a>3.2.2 队列的顺序存储结构</h4><p><img src="https://img-blog.csdnimg.cn/98c16cfce82c4950bcd51d09b7f720d1.png" alt="在这里插入图片描述"></p><h4 id="3-2-3-队列的链式存储结构"><a href="#3-2-3-队列的链式存储结构" class="headerlink" title="3.2.3 队列的链式存储结构"></a>3.2.3 队列的链式存储结构</h4><p><img src="https://img-blog.csdnimg.cn/daa56df5b3384963ae3bb44c3aa0b436.png" alt="在这里插入图片描述"></p><h4 id="3-2-4-双端队列"><a href="#3-2-4-双端队列" class="headerlink" title="3.2.4 双端队列"></a>3.2.4 双端队列</h4><p><img src="https://img-blog.csdnimg.cn/17e29899e4d841d3a77e7dece66eec29.png" alt="在这里插入图片描述"></p><h4 id="3-2-5-队列的运算"><a href="#3-2-5-队列的运算" class="headerlink" title="3.2.5 队列的运算"></a>3.2.5 队列的运算</h4><p><img src="https://img-blog.csdnimg.cn/52b7dbf3166e45d2af9fac51da62fb55.png" alt="在这里插入图片描述"></p><h3 id="3-3-栈和队列的应用"><a href="#3-3-栈和队列的应用" class="headerlink" title="3.3 栈和队列的应用"></a>3.3 栈和队列的应用</h3><h4 id="3-3-1-栈的应用"><a href="#3-3-1-栈的应用" class="headerlink" title="3.3.1 栈的应用"></a>3.3.1 栈的应用</h4><p><img src="https://img-blog.csdnimg.cn/8de9ab449bea45c983d7ff04d037794e.png" alt="在这里插入图片描述"></p><h4 id="3-3-2-队列的应用"><a href="#3-3-2-队列的应用" class="headerlink" title="3.3.2 队列的应用"></a>3.3.2 队列的应用</h4><p><img src="https://img-blog.csdnimg.cn/36bdfc53699e47b0afe8eea657f3a7e6.png" alt="在这里插入图片描述"></p><h3 id="3-4-数组和特殊矩阵"><a href="#3-4-数组和特殊矩阵" class="headerlink" title="3.4 数组和特殊矩阵"></a>3.4 数组和特殊矩阵</h3><p><img src="https://img-blog.csdnimg.cn/bb88081afbed4bf7b992061b3403fcac.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 队列 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机组成原理】第二章 数据的表示和运算</title>
      <link href="/posts/c0a25ce8.html"/>
      <url>/posts/c0a25ce8.html</url>
      
        <content type="html"><![CDATA[<h3 id="第二章-知识体系"><a href="#第二章-知识体系" class="headerlink" title="第二章 知识体系"></a>第二章 知识体系</h3><p><img src="https://img-blog.csdnimg.cn/d8f0456ccf3d44b99357c2327d26dff9.png" alt="在这里插入图片描述"></p><h3 id="2-1-数制和编码"><a href="#2-1-数制和编码" class="headerlink" title="2.1 数制和编码"></a>2.1 数制和编码</h3><p><img src="https://img-blog.csdnimg.cn/7a1f7a313a6e4215aba2627c57c2e170.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/6ad6f116210647b1ac35289ef799fea0.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1a962c428dbc46bf93c5a18fc7559f2d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/91a60fa75db141c0a2a0838f478697f6.png" alt="在这里插入图片描述"></p><h3 id="2-2-运算方法和运算电路"><a href="#2-2-运算方法和运算电路" class="headerlink" title="2.2 运算方法和运算电路"></a>2.2 运算方法和运算电路</h3><p><img src="https://img-blog.csdnimg.cn/138866cf95ba47b7b46fe12f5c3bd884.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3e123e60edfe4f38b0a8bc31422c2183.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6ecc626b50714b64b593cd3458605e8a.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/c6ebbe78cd2e42b7afee7f48cf20694d.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/c7e1b7be7d3d43bd802ac6ec7de2318f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/15c5fa0ac9964abd9a18864cc1b55272.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fb00c14b881c4db086ba6c6bcb0ba16b.png" alt="在这里插入图片描述"></p><h3 id="2-3-浮点数的表示和运算"><a href="#2-3-浮点数的表示和运算" class="headerlink" title="2.3 浮点数的表示和运算"></a>2.3 浮点数的表示和运算</h3><p><img src="https://img-blog.csdnimg.cn/c1bfcce9fd5d41908e13c408e231ea18.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/bdded017a62e4062a1d72ef3056940e9.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3ca4f670b35b4b93a2a6444c7e50f719.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ba512797ad4644799eb9cc793aea1296.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/dfc67794601d47b39ba41505fd5d2dbb.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/587f520f1b484b9393accfc00662ccc0.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/4d5fa65a34d8438f95d7e996d4aebe16.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f4f5ecc8b74b41dc8890616e43e21cad.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/54f8bec13007418aa69be45d6b24b853.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8dbc71e8a9134506b43cfd494058b4a4.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据的表示和运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机网络】第二章 物理层</title>
      <link href="/posts/fd452614.html"/>
      <url>/posts/fd452614.html</url>
      
        <content type="html"><![CDATA[<h3 id="第二章-知识体系"><a href="#第二章-知识体系" class="headerlink" title="第二章 知识体系"></a>第二章 知识体系</h3><p><img src="https://img-blog.csdnimg.cn/4c1da6b91d2d455b853e59b5215a84d3.png" alt="在这里插入图片描述"></p><h3 id="2-1-通信基础"><a href="#2-1-通信基础" class="headerlink" title="2.1 通信基础"></a>2.1 通信基础</h3><h4 id="2-1-1-基本概念"><a href="#2-1-1-基本概念" class="headerlink" title="2.1.1 基本概念"></a>2.1.1 基本概念</h4><p><img src="https://img-blog.csdnimg.cn/8abda37c0c5045c79ab7bb05e4023cb8.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/03ec911445d64b06a218506e0a783450.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a221e4465e6b444fb75eb74db50644fe.png" alt="在这里插入图片描述"></p><h4 id="2-1-2-奈奎斯特定理与香浓定理"><a href="#2-1-2-奈奎斯特定理与香浓定理" class="headerlink" title="2.1.2 奈奎斯特定理与香浓定理"></a>2.1.2 奈奎斯特定理与香浓定理</h4><p><img src="https://img-blog.csdnimg.cn/9185bc78fd54415c9f7fa55c60472251.png" alt="在这里插入图片描述"></p><h4 id="2-1-3-编码与调制"><a href="#2-1-3-编码与调制" class="headerlink" title="2.1.3 编码与调制"></a>2.1.3 编码与调制</h4><p><img src="https://img-blog.csdnimg.cn/5f5ec3c5eba04d0d86e5f16de11f457a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c7bc37c9b1324443853ca9460255f151.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/558c99415b5e41f89b96bb3e634f7f1e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/71069ac951ab43a089ed193d0dc8547a.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c70e801e4ea844c3b7838a82982c851d.png" alt="在这里插入图片描述"></p><h4 id="2-1-4-电路交换、报文交换与分组交换"><a href="#2-1-4-电路交换、报文交换与分组交换" class="headerlink" title="2.1.4 电路交换、报文交换与分组交换"></a>2.1.4 电路交换、报文交换与分组交换</h4><p><img src="https://img-blog.csdnimg.cn/928a8a7d4b7f456291ae31ed837c0dac.png" alt="在这里插入图片描述"></p><h4 id="2-1-5-数据报与虚电路"><a href="#2-1-5-数据报与虚电路" class="headerlink" title="2.1.5 数据报与虚电路"></a>2.1.5 数据报与虚电路</h4><p><img src="https://img-blog.csdnimg.cn/b17c503abde54f6982f144773a40cbb2.png" alt="在这里插入图片描述"></p><h3 id="2-2-传输介质"><a href="#2-2-传输介质" class="headerlink" title="2.2 传输介质"></a>2.2 传输介质</h3><p><img src="https://img-blog.csdnimg.cn/ff46644c97d14c6fba1651bef8dd7bda.png" alt="在这里插入图片描述"></p><h3 id="2-3-物理层设备"><a href="#2-3-物理层设备" class="headerlink" title="2.3 物理层设备"></a>2.3 物理层设备</h3><p><img src="https://img-blog.csdnimg.cn/18dbbe97971f4349ba3ac00e9df7949b.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】第二章 线性表</title>
      <link href="/posts/63a3fb91.html"/>
      <url>/posts/63a3fb91.html</url>
      
        <content type="html"><![CDATA[<h3 id="第二章-知识体系"><a href="#第二章-知识体系" class="headerlink" title="第二章 知识体系"></a>第二章 知识体系</h3><p><img src="https://img-blog.csdnimg.cn/1782e40e9ea1478e99db583c41d67d15.png" alt="在这里插入图片描述"></p><h3 id="2-1-线性表的定义和基本操作"><a href="#2-1-线性表的定义和基本操作" class="headerlink" title="2.1  线性表的定义和基本操作"></a>2.1  线性表的定义和基本操作</h3><h4 id="2-1-1-线性表的定义"><a href="#2-1-1-线性表的定义" class="headerlink" title="2.1.1 线性表的定义"></a>2.1.1 线性表的定义</h4><p><img src="https://img-blog.csdnimg.cn/4d62f4b44a6749b19be3a115dfc30e28.png" alt="在这里插入图片描述"></p><h4 id="2-1-2-线性表的基本操作"><a href="#2-1-2-线性表的基本操作" class="headerlink" title="2.1.2 线性表的基本操作"></a>2.1.2 线性表的基本操作</h4><p><img src="https://img-blog.csdnimg.cn/e456c9208d14495ab1002a322be49c66.png" alt="在这里插入图片描述"></p><h3 id="2-2-线性表的顺序表示"><a href="#2-2-线性表的顺序表示" class="headerlink" title="2.2 线性表的顺序表示"></a>2.2 线性表的顺序表示</h3><h4 id="2-2-1-顺序表的定义"><a href="#2-2-1-顺序表的定义" class="headerlink" title="2.2.1 顺序表的定义"></a>2.2.1 顺序表的定义</h4><p><img src="https://img-blog.csdnimg.cn/4aa8bef86d4d45b28608ec61b6675450.png" alt="在这里插入图片描述"></p><h4 id="2-2-2-顺序表的基本操作的实现"><a href="#2-2-2-顺序表的基本操作的实现" class="headerlink" title="2.2.2 顺序表的基本操作的实现"></a>2.2.2 顺序表的基本操作的实现</h4><p><img src="https://img-blog.csdnimg.cn/9144d7125304486e8f839327aa55e2cc.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/11ccc1ab47f1406e9816ec76db8bb758.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d1781433ceeb4a62aee383a45bb3594d.png" alt="在这里插入图片描述"></p><h3 id="2-3-线性表的链式表示"><a href="#2-3-线性表的链式表示" class="headerlink" title="2.3 线性表的链式表示"></a>2.3 线性表的链式表示</h3><h4 id="2-3-1-单链表的定义"><a href="#2-3-1-单链表的定义" class="headerlink" title="2.3.1 单链表的定义"></a>2.3.1 单链表的定义</h4><p><img src="https://img-blog.csdnimg.cn/fe158d8afffe49dda51ff01ffc4ff1fc.png" alt="在这里插入图片描述"></p><h4 id="2-3-2-单链表的基本操作实现"><a href="#2-3-2-单链表的基本操作实现" class="headerlink" title="2.3.2 单链表的基本操作实现"></a>2.3.2 单链表的基本操作实现</h4><p><img src="https://img-blog.csdnimg.cn/a6d8b323d8fe4e5eb74ab4d153e93b8d.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/929001554ab84b76825ed7576d6b5bf7.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/db7018ab6d8d486ab0208a2f3cbe3675.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/50032c3b5696422299be06e45163487e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/cd473ecddb1a4566b1dbfc4114cd6986.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e170693b87cf4d7c8177f6ca1edfa286.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/df823816232a4243a6992fec872b8e80.png" alt="在这里插入图片描述"></p><h4 id="2-3-3-双链表"><a href="#2-3-3-双链表" class="headerlink" title="2.3.3 双链表"></a>2.3.3 双链表</h4><p><img src="https://img-blog.csdnimg.cn/d211e053adaa47e198d8afae6e2d9a07.png" alt="在这里插入图片描述"></p><h4 id="2-3-4-循环链表"><a href="#2-3-4-循环链表" class="headerlink" title="2.3.4 循环链表"></a>2.3.4 循环链表</h4><p><img src="https://img-blog.csdnimg.cn/57c800041071484ba6aa835d7b1f566a.png" alt="在这里插入图片描述"></p><h4 id="2-3-5-静态链表"><a href="#2-3-5-静态链表" class="headerlink" title="2.3.5 静态链表"></a>2.3.5 静态链表</h4><p><img src="https://img-blog.csdnimg.cn/5e1ececa824749dfbfb0d64bf8a6d679.png" alt="在这里插入图片描述"></p><h4 id="2-3-6-顺序表和链表的比较"><a href="#2-3-6-顺序表和链表的比较" class="headerlink" title="2.3.6 顺序表和链表的比较"></a>2.3.6 顺序表和链表的比较</h4><p><img src="https://img-blog.csdnimg.cn/33ac9bf12dc84a8890931a1668d016b9.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/997714f930b24ab09a5cacdd3b325845.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【操作系统】第二章 进程与线程</title>
      <link href="/posts/25ec9ef7.html"/>
      <url>/posts/25ec9ef7.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="第二章-知识体系"><a href="#第二章-知识体系" class="headerlink" title="第二章 知识体系"></a>第二章 知识体系</h2><p><img src="https://img-blog.csdnimg.cn/e372fb44e553445da596cea38cf348cb.png" alt="在这里插入图片描述"></p><h3 id="2-1-进程与线程"><a href="#2-1-进程与线程" class="headerlink" title="2.1 进程与线程"></a>2.1 进程与线程</h3><h4 id="2-1-1-进程的概念和特征"><a href="#2-1-1-进程的概念和特征" class="headerlink" title="2.1.1 进程的概念和特征"></a>2.1.1 进程的概念和特征</h4><p><img src="https://img-blog.csdnimg.cn/c267f788766c4c258d843315587eba93.png" alt="在这里插入图片描述"></p><h4 id="2-1-2-进程的状态与转换"><a href="#2-1-2-进程的状态与转换" class="headerlink" title="2.1.2 进程的状态与转换"></a>2.1.2 进程的状态与转换</h4><p><img src="https://img-blog.csdnimg.cn/6fd63353c111441abf999420d069c2ea.png" alt="在这里插入图片描述"></p><h4 id="2-1-3-进程的组成"><a href="#2-1-3-进程的组成" class="headerlink" title="2.1.3 进程的组成"></a>2.1.3 进程的组成</h4><p>进程的数据结构 = PCB（进程控制块） + 程序段 + 数据段<br><img src="https://img-blog.csdnimg.cn/44914c3ad94548cfb98269acb212dfbe.png" alt="在这里插入图片描述"></p><h4 id="2-1-4-进程控制"><a href="#2-1-4-进程控制" class="headerlink" title="2.1.4 进程控制"></a>2.1.4 进程控制</h4><p><img src="https://img-blog.csdnimg.cn/e9e2156f78d44f0a8e44de8aac0ffc2f.png" alt="在这里插入图片描述"></p><h4 id="2-1-5-进程通信"><a href="#2-1-5-进程通信" class="headerlink" title="2.1.5 进程通信"></a>2.1.5 进程通信</h4><p><img src="https://img-blog.csdnimg.cn/ac87279c3ed84386837cfbfb46d64772.png" alt="在这里插入图片描述"></p><h4 id="2-1-6-进程的上下文切换"><a href="#2-1-6-进程的上下文切换" class="headerlink" title="2.1.6 进程的上下文切换"></a>2.1.6 进程的上下文切换</h4><p><img src="https://img-blog.csdnimg.cn/f2189b38bacc45af91626d1fce96b82f.png" alt="在这里插入图片描述"></p><h4 id="2-1-7-线程和多线程模型"><a href="#2-1-7-线程和多线程模型" class="headerlink" title="2.1.7 线程和多线程模型"></a>2.1.7 线程和多线程模型</h4><p><img src="https://img-blog.csdnimg.cn/b7758f87d219444fb0893e22b0176c51.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/392da93314864f06b750272fe37b82cc.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/48d12201c836444b9d888867b88d3df8.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/bc6fff63199b44c99a583c16a7b3f517.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/81edf19704cb481083c4f2d4fd7a1055.png" alt="在这里插入图片描述"></p><h3 id="2-2-处理机调度"><a href="#2-2-处理机调度" class="headerlink" title="2.2 处理机调度"></a>2.2 处理机调度</h3><h4 id="2-2-1-调度的概念"><a href="#2-2-1-调度的概念" class="headerlink" title="2.2.1 调度的概念"></a>2.2.1 调度的概念</h4><p><img src="https://img-blog.csdnimg.cn/4d4554d53e784edb8ae8d3ab316e26c9.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/78a25c1ac44647c6877762ec2cf55121.png" alt="在这里插入图片描述"></p><h4 id="2-2-2-调度的层次分类"><a href="#2-2-2-调度的层次分类" class="headerlink" title="2.2.2 调度的层次分类"></a>2.2.2 调度的层次分类</h4><p><img src="https://img-blog.csdnimg.cn/4f3625c6bbd545398e6fe0555adf3e1a.png" alt="在这里插入图片描述"></p><h4 id="2-2-3-调度的实现"><a href="#2-2-3-调度的实现" class="headerlink" title="2.2.3 调度的实现"></a>2.2.3 调度的实现</h4><p><img src="https://img-blog.csdnimg.cn/0b653fc6691b4225894260425de990b7.png" alt="在这里插入图片描述"></p><h4 id="2-2-4-典型的调度算法"><a href="#2-2-4-典型的调度算法" class="headerlink" title="2.2.4 典型的调度算法"></a>2.2.4 典型的调度算法</h4><p><img src="https://img-blog.csdnimg.cn/45033739fefb4217a1f1013d41a94f68.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/07fa6ae3af13415ea4a70067ae02347f.png" alt="在这里插入图片描述"></p><h4 id="2-2-5-进程切换"><a href="#2-2-5-进程切换" class="headerlink" title="2.2.5 进程切换"></a>2.2.5 进程切换</h4><p>见本文 2.1.6</p><h3 id="2-3-互斥与同步"><a href="#2-3-互斥与同步" class="headerlink" title="2.3 互斥与同步"></a>2.3 互斥与同步</h3><h4 id="2-3-1-同步与互斥的基本概念"><a href="#2-3-1-同步与互斥的基本概念" class="headerlink" title="2.3.1 同步与互斥的基本概念"></a>2.3.1 同步与互斥的基本概念</h4><p><img src="https://img-blog.csdnimg.cn/138646bddf5e4857b627d7898c18baa9.png" alt="在这里插入图片描述"></p><h4 id="2-3-2-实现临界区互斥的方法"><a href="#2-3-2-实现临界区互斥的方法" class="headerlink" title="2.3.2 实现临界区互斥的方法"></a>2.3.2 实现临界区互斥的方法</h4><p><img src="https://img-blog.csdnimg.cn/0723dd669e4d4d69b93f7f18a1018833.png" alt="在这里插入图片描述"></p><h4 id="2-3-3-互斥锁"><a href="#2-3-3-互斥锁" class="headerlink" title="2.3.3 互斥锁"></a>2.3.3 互斥锁</h4><p><img src="https://img-blog.csdnimg.cn/fc4ea0cf2c464e41b6eff6224820feaa.png" alt="在这里插入图片描述"></p><h4 id="2-3-4-信号量"><a href="#2-3-4-信号量" class="headerlink" title="2.3.4 信号量"></a>2.3.4 信号量</h4><p><img src="https://img-blog.csdnimg.cn/7820c39429d44e18b30bb6d37b61c222.png" alt="在这里插入图片描述"></p><h4 id="2-3-5-管程"><a href="#2-3-5-管程" class="headerlink" title="2.3.5 管程"></a>2.3.5 管程</h4><p><img src="https://img-blog.csdnimg.cn/b27aba47ac524e69ba6b8e0112ae11a2.png" alt="在这里插入图片描述"></p><h4 id="2-3-6-经典同步问题"><a href="#2-3-6-经典同步问题" class="headerlink" title="2.3.6 经典同步问题"></a>2.3.6 经典同步问题</h4><p><img src="https://img-blog.csdnimg.cn/44326b3fdcec4ffd8dde5fc7f893b862.png" alt="在这里插入图片描述"><br>待续。。。</p><h3 id="2-4-死锁"><a href="#2-4-死锁" class="headerlink" title="2.4 死锁"></a>2.4 死锁</h3><h4 id="2-4-1-死锁的概念"><a href="#2-4-1-死锁的概念" class="headerlink" title="2.4.1 死锁的概念"></a>2.4.1 死锁的概念</h4><p><img src="https://img-blog.csdnimg.cn/88846c95e122494c9ae47c521024e546.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c784cb8fae23404ea031e661fa3583e3.png" alt="在这里插入图片描述"></p><h4 id="2-4-2-死锁预防"><a href="#2-4-2-死锁预防" class="headerlink" title="2.4.2 死锁预防"></a>2.4.2 死锁预防</h4><p><img src="https://img-blog.csdnimg.cn/7f2b4630fcd74a5094104078196b56bd.png" alt="在这里插入图片描述"></p><h4 id="2-4-3-死锁避免"><a href="#2-4-3-死锁避免" class="headerlink" title="2.4.3 死锁避免"></a>2.4.3 死锁避免</h4><p><img src="https://img-blog.csdnimg.cn/20a48451f03740cdaaabf56f0065762d.png" alt="在这里插入图片描述"></p><h4 id="2-4-4-死锁的检测与解除"><a href="#2-4-4-死锁的检测与解除" class="headerlink" title="2.4.4 死锁的检测与解除"></a>2.4.4 死锁的检测与解除</h4><p><img src="https://img-blog.csdnimg.cn/652f289e701c4e5badb21b963f92ba2b.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/47f51835a5f643b9870aff59645c95ed.png" alt="在这里插入图片描述"></p><h4 id="2-4-5-例题"><a href="#2-4-5-例题" class="headerlink" title="2.4.5 例题"></a>2.4.5 例题</h4><p><img src="https://img-blog.csdnimg.cn/5015e2b285904377aff385bd2d98d12f.png" alt="在这里插入图片描述"></p><p><strong>1. 安全性算法解答</strong><br><img src="https://img-blog.csdnimg.cn/bd0ef45a15464bf98e0b0945d0911169.png" alt="在这里插入图片描述"></p><p><strong>2.银行家算法解答</strong><br> <img src="https://img-blog.csdnimg.cn/1a584d5bfb0743678d8c1e141d48e615.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 第二章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机网络】第一章 计算机网络结构</title>
      <link href="/posts/f62e441.html"/>
      <url>/posts/f62e441.html</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-体系结构"><a href="#第一章-体系结构" class="headerlink" title="第一章 体系结构"></a>第一章 体系结构</h3><p><img src="https://img-blog.csdnimg.cn/6cfb98a4a19d4b85b050fcf4733bd5a2.png" alt="在这里插入图片描述"></p><h3 id="1-1-计算机网络概述"><a href="#1-1-计算机网络概述" class="headerlink" title="1.1 计算机网络概述"></a>1.1 计算机网络概述</h3><h4 id="1-1-1-计算机网络的概念"><a href="#1-1-1-计算机网络的概念" class="headerlink" title="1.1.1 计算机网络的概念"></a>1.1.1 计算机网络的概念</h4><p><img src="https://img-blog.csdnimg.cn/589d8ceb3fb5492784c52301e92d9974.png" alt="在这里插入图片描述"></p><h4 id="1-1-2-计算机网络的组成"><a href="#1-1-2-计算机网络的组成" class="headerlink" title="1.1.2 计算机网络的组成"></a>1.1.2 计算机网络的组成</h4><p><img src="https://img-blog.csdnimg.cn/e25cf73bb95046d2995a1f4eb3bce49e.png" alt="在这里插入图片描述"></p><h4 id="1-1-3-计算机网络的功能"><a href="#1-1-3-计算机网络的功能" class="headerlink" title="1.1.3 计算机网络的功能"></a>1.1.3 计算机网络的功能</h4><p><img src="https://img-blog.csdnimg.cn/3f2faa0fa4ed4d4895c5a68d809e8416.png" alt="在这里插入图片描述"></p><h4 id="1-1-4-计算机网络的分类"><a href="#1-1-4-计算机网络的分类" class="headerlink" title="1.1.4 计算机网络的分类"></a>1.1.4 计算机网络的分类</h4><p><img src="https://img-blog.csdnimg.cn/cf42179f2cc241e9ab26ef8ba71a8f3b.png" alt="在这里插入图片描述"></p><h4 id="1-1-5-计算机网络的标准化工作"><a href="#1-1-5-计算机网络的标准化工作" class="headerlink" title="*1.1.5 计算机网络的标准化工作"></a>*1.1.5 计算机网络的标准化工作</h4><p>计算机网络的标准化工作 计算机网络的标准化需要经历以下4个步骤∶<br>①互联网草案；<br>②建议标准（RFC文档）；<br>③草案标准；<br>④互联网标准。</p><h4 id="1-1-6-计算机网络的性能指标"><a href="#1-1-6-计算机网络的性能指标" class="headerlink" title="1.1.6 计算机网络的性能指标"></a>1.1.6 计算机网络的性能指标</h4><p><img src="https://img-blog.csdnimg.cn/98190b9676384e6587787197e8074f6f.png" alt="在这里插入图片描述"></p><h3 id="1-2-计算机网络体系结构与参考模型"><a href="#1-2-计算机网络体系结构与参考模型" class="headerlink" title="1.2 计算机网络体系结构与参考模型"></a>1.2 计算机网络体系结构与参考模型</h3><h4 id="1-2-1-计算机网络分层结构"><a href="#1-2-1-计算机网络分层结构" class="headerlink" title="1.2.1 计算机网络分层结构"></a>1.2.1 计算机网络分层结构</h4><p><img src="https://img-blog.csdnimg.cn/c81cafdc5c4a4a7394db187f79f81630.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/807f21df0f0e4d6590e1fc6692cbee24.png" alt="在这里插入图片描述"></p><h4 id="1-2-2-计算机网络协议、接口、服务的概念"><a href="#1-2-2-计算机网络协议、接口、服务的概念" class="headerlink" title="1.2.2 计算机网络协议、接口、服务的概念"></a>1.2.2 计算机网络协议、接口、服务的概念</h4><p><img src="https://img-blog.csdnimg.cn/09226072ce794b378064099d96b2e9d9.png" alt="在这里插入图片描述"></p><h4 id="1-2-3-ISO和OSI参考模型和TCP-IP模型"><a href="#1-2-3-ISO和OSI参考模型和TCP-IP模型" class="headerlink" title="1.2.3 ISO和OSI参考模型和TCP/IP模型"></a>1.2.3 ISO和OSI参考模型和TCP/IP模型</h4><p><img src="https://img-blog.csdnimg.cn/9c7a8896a9a849c78ab9b04cd6b3ee21.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 第一章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机组成原理】第一章 计算机系统概述</title>
      <link href="/posts/50cc1b00.html"/>
      <url>/posts/50cc1b00.html</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-知识体系"><a href="#第一章-知识体系" class="headerlink" title="第一章 知识体系"></a>第一章 知识体系</h3><p><img src="https://img-blog.csdnimg.cn/f30331d6bbee43899ab15ff2bb96187a.png" alt="在这里插入图片描述"></p><hr><h3 id="1-1-计算机发展历程"><a href="#1-1-计算机发展历程" class="headerlink" title="1.1 计算机发展历程"></a>1.1 计算机发展历程</h3><h4 id="1-1-1-计算机硬件的发展"><a href="#1-1-1-计算机硬件的发展" class="headerlink" title="1.1.1 计算机硬件的发展"></a>1.1.1 计算机硬件的发展</h4><p>计算机发展趋势：<br><img src="https://img-blog.csdnimg.cn/a26f4cb8fc7d4a41907032425aab1b16.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/60186cf084724ae6ae511c75fa3349df.png" alt="在这里插入图片描述"></p><h4 id="1-1-2-计算机软件的发展"><a href="#1-1-2-计算机软件的发展" class="headerlink" title="1.1.2 计算机软件的发展"></a>1.1.2 计算机软件的发展</h4><p><img src="https://img-blog.csdnimg.cn/1f09e4b5e22547bb96f0367d197204f7.png" alt="在这里插入图片描述"></p><h3 id="1-2-计算机系统层次结构"><a href="#1-2-计算机系统层次结构" class="headerlink" title="1.2 计算机系统层次结构"></a>1.2 计算机系统层次结构</h3><h4 id="1-2-1-计算机系统的组成"><a href="#1-2-1-计算机系统的组成" class="headerlink" title="1.2.1 计算机系统的组成"></a>1.2.1 计算机系统的组成</h4><p><img src="https://img-blog.csdnimg.cn/15cbe86771c343749c95f7e128ac4b53.png" alt="在这里插入图片描述"></p><h4 id="1-2-2-计算机硬件"><a href="#1-2-2-计算机硬件" class="headerlink" title="1.2.2 计算机硬件"></a>1.2.2 计算机硬件</h4><p><img src="https://img-blog.csdnimg.cn/16a710a1d761402a938a9b4aa2766064.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/408c79c892664bcc85459e6da031aca0.png" alt="在这里插入图片描述"></p><h4 id="1-2-3-计算机软件"><a href="#1-2-3-计算机软件" class="headerlink" title="1.2.3 计算机软件"></a>1.2.3 计算机软件</h4><p><img src="https://img-blog.csdnimg.cn/63d4714d13c34e989b111fe36ad493f5.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/eda7eeb418d347ffb6cba375c18d8f6a.png" alt="在这里插入图片描述"></p><h4 id="1-2-4-计算机的层次结构"><a href="#1-2-4-计算机的层次结构" class="headerlink" title="1.2.4 计算机的层次结构"></a>1.2.4 计算机的层次结构</h4><p><img src="https://img-blog.csdnimg.cn/177d3f124c944f5facfd383b8d870252.png" alt="在这里插入图片描述"></p><h4 id="1-2-5-计算机系统的工作原理"><a href="#1-2-5-计算机系统的工作原理" class="headerlink" title="1.2.5 计算机系统的工作原理"></a>1.2.5 计算机系统的工作原理</h4><p><img src="https://img-blog.csdnimg.cn/13319301bb704b679d3242089bfc9ba2.png" alt="在这里插入图片描述"></p><h3 id="1-3-计算机的性能指标"><a href="#1-3-计算机的性能指标" class="headerlink" title="1.3 计算机的性能指标"></a>1.3 计算机的性能指标</h3><p><img src="https://img-blog.csdnimg.cn/d3e6d56c61f1412693ee2745905ac785.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】第一章 绪论</title>
      <link href="/posts/ad613aa9.html"/>
      <url>/posts/ad613aa9.html</url>
      
        <content type="html"><![CDATA[<h3 id="知识体系"><a href="#知识体系" class="headerlink" title="知识体系"></a>知识体系</h3><p><img src="https://img-blog.csdnimg.cn/7c71c346839c4559966c049d256d7fa5.png" alt="在这里插入图片描述"></p><h3 id="1-1-数据结构的基本概念"><a href="#1-1-数据结构的基本概念" class="headerlink" title="1.1 数据结构的基本概念"></a>1.1 数据结构的基本概念</h3><h4 id="1-1-1-基本概念和术语"><a href="#1-1-1-基本概念和术语" class="headerlink" title="1.1.1 基本概念和术语"></a>1.1.1 基本概念和术语</h4><p><img src="https://img-blog.csdnimg.cn/46430f1f0f664e59bd92f713ff8deec0.png" alt="在这里插入图片描述"></p><h4 id="1-1-2-数据结构三要素"><a href="#1-1-2-数据结构三要素" class="headerlink" title="1.1.2 数据结构三要素"></a>1.1.2 数据结构三要素</h4><p><img src="https://img-blog.csdnimg.cn/e5d99c5d44254380a00bf676aa257a49.png" alt="在这里插入图片描述"></p><h3 id="1-2-算法和算法评价"><a href="#1-2-算法和算法评价" class="headerlink" title="1.2 算法和算法评价"></a>1.2 算法和算法评价</h3><h4 id="1-2-1-算法的基本概念"><a href="#1-2-1-算法的基本概念" class="headerlink" title="1.2.1 算法的基本概念"></a>1.2.1 算法的基本概念</h4><p><img src="https://img-blog.csdnimg.cn/b3eef0567d5f484e93e554d1f51cf83d.png" alt="在这里插入图片描述"></p><h4 id="1-2-2-算法效率的度量"><a href="#1-2-2-算法效率的度量" class="headerlink" title="1.2.2 算法效率的度量"></a>1.2.2 算法效率的度量</h4><p>时间复杂度和空间复杂度：<br><code>O(1) &lt; O(logN) &lt; O(n) &lt; O(nlogN) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</code></p><h3 id="1-3-常考点"><a href="#1-3-常考点" class="headerlink" title="1.3 常考点"></a>1.3 常考点</h3><p><img src="https://img-blog.csdnimg.cn/86d7b383199a45058f42badd91dfd0f9.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 第一章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【操作系统】 第一章 操作系统概述</title>
      <link href="/posts/fe64d28f.html"/>
      <url>/posts/fe64d28f.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="第一章-知识体系"><a href="#第一章-知识体系" class="headerlink" title="第一章 知识体系"></a>第一章 知识体系</h3><p><img src="https://img-blog.csdnimg.cn/b0f6209a1e174c7e847dba24f9c524cf.png" alt="在这里插入图片描述"></p><hr><h3 id="1-1-操作系统的基本概念"><a href="#1-1-操作系统的基本概念" class="headerlink" title="1.1 操作系统的基本概念"></a>1.1 操作系统的基本概念</h3><h4 id="1-1-1-操作系统的概念"><a href="#1-1-1-操作系统的概念" class="headerlink" title="1.1.1 操作系统的概念"></a>1.1.1 操作系统的概念</h4><ul><li>操作系统负责管理协调硬件、软件等计算机资源的工作;</li><li>操作系统为上层用户、应用程序提供简单易用的服务;</li><li>操作系统是一种系统软件;<h4 id="1-1-2-操作系统的特征"><a href="#1-1-2-操作系统的特征" class="headerlink" title="1.1.2 操作系统的特征"></a>1.1.2 操作系统的特征</h4></li><li>并发和共享是<code>最基本的</code>两个性质, 两者互为存在条件；</li><li>没有并发和共享，虚拟和异步就无从谈起；<br><img src="https://img-blog.csdnimg.cn/e8bc68bc204a49a2b6153f2188bea245.png" alt="在这里插入图片描述"></li></ul><h4 id="1-1-3-操作系统的目标和功能"><a href="#1-1-3-操作系统的目标和功能" class="headerlink" title="1.1.3 操作系统的目标和功能"></a>1.1.3 操作系统的目标和功能</h4><p><img src="https://img-blog.csdnimg.cn/a83c9fbe6bd94e8885c6e66b62febdb4.png" alt="在这里插入图片描述"></p><h3 id="1-2-操作系统的发展历程"><a href="#1-2-操作系统的发展历程" class="headerlink" title="1.2 操作系统的发展历程"></a>1.2 操作系统的发展历程</h3><p><img src="https://img-blog.csdnimg.cn/14154035bc3941229409b08ba6d57c25.png" alt="在这里插入图片描述"></p><h3 id="1-3-操作系统的运行环境"><a href="#1-3-操作系统的运行环境" class="headerlink" title="1.3 操作系统的运行环境"></a>1.3 操作系统的运行环境</h3><h4 id="1-3-1-处理器的运行模式"><a href="#1-3-1-处理器的运行模式" class="headerlink" title="1.3.1 处理器的运行模式"></a>1.3.1 处理器的运行模式</h4><p><img src="https://img-blog.csdnimg.cn/89e99052319f48b291b3225afebc1a31.png" alt="在这里插入图片描述"></p><h4 id="1-3-2-中断和异常的概念"><a href="#1-3-2-中断和异常的概念" class="headerlink" title="1.3.2 中断和异常的概念"></a>1.3.2 中断和异常的概念</h4><p><img src="https://img-blog.csdnimg.cn/f5b2e7b512a04775b877bd8858d0f391.png" alt="在这里插入图片描述"></p><h4 id="1-3-3-系统调用"><a href="#1-3-3-系统调用" class="headerlink" title="1.3.3 系统调用"></a>1.3.3 系统调用</h4><p><img src="https://img-blog.csdnimg.cn/800b2368937c4055b3e2ecf34869f68e.png" alt="在这里插入图片描述"></p><h3 id="1-4-操作系统结构"><a href="#1-4-操作系统结构" class="headerlink" title="1.4 操作系统结构"></a>1.4 操作系统结构</h3><p><img src="https://img-blog.csdnimg.cn/e0ce49519f244402a031b340e56d1854.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/efaed683b4f4412fa2ea293fd92a432f.png" alt="在这里插入图片描述"></p><h3 id="1-5-操作系统引导"><a href="#1-5-操作系统引导" class="headerlink" title="1.5 操作系统引导"></a>1.5 操作系统引导</h3><p><img src="https://img-blog.csdnimg.cn/9b38e1291a714baab8a5ec481aa4f81b.png" alt="在这里插入图片描述"></p><h3 id="1-6-虚拟机"><a href="#1-6-虚拟机" class="headerlink" title="1.6 虚拟机"></a>1.6 虚拟机</h3><p><img src="https://img-blog.csdnimg.cn/1f84289fa44a4fc088df94ee1ba61dd4.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统概述 第一章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【环境配置】vs2022引入libevent库</title>
      <link href="/posts/aef1f81f.html"/>
      <url>/posts/aef1f81f.html</url>
      
        <content type="html"><![CDATA[<h2 id="libevent库的引入（注意：平台debug-x86）"><a href="#libevent库的引入（注意：平台debug-x86）" class="headerlink" title="libevent库的引入（注意：平台debug x86）"></a>libevent库的引入（注意：平台debug x86）</h2><p>（0）这里直接提供生成好的静态库</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1Bvc501g2NS1aWkqzfbfR4A">https://pan.baidu.com/s/1Bvc501g2NS1aWkqzfbfR4A</a><br>提取码：8888</p></blockquote><p>（1）下载解压后，有个libevent文件夹，可以随意放，但要记得路径，最好和项目同级目录，便于寻找。<br>（2）确保该项目中有一个.cpp文件，右键项目属性-&gt;VC++目录-&gt;包含目录-&gt;libevent\include路径<br>（3）属性-&gt;VC++目录-&gt;包含目录-&gt;libevent\include路径<br>（4）属性-&gt;VC++目录-&gt;包含目录-&gt;libevent\WIN32-Code\nmake<br>（5）属性-&gt;VC++目录-&gt;库目录-&gt;libevent\lib<br>（6）属性-&gt;链接器-&gt;输入-&gt;附加依赖项-&gt;</p><blockquote><p>libevent.lib<br>libevent_core.lib<br>libevent_extras.lib<br><strong>(注意：确定后一定有要用;隔开)</strong></p></blockquote><h2 id="测试程序："><a href="#测试程序：" class="headerlink" title="测试程序："></a>测试程序：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************</span></span><br><span class="line"><span class="comment">* 每隔两秒在控制台输出&quot;Hello World!&quot;</span></span><br><span class="line"><span class="comment">*************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;event.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnTime</span><span class="params">(<span class="type">int</span> sock, <span class="type">short</span> event_value, <span class="type">void</span>* arg)</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Hello World!\n&quot;</span>;</span><br><span class="line">timeval tv;</span><br><span class="line">tv.tv_sec = <span class="number">1</span>;</span><br><span class="line">tv.tv_usec = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">event_add</span>((<span class="keyword">struct</span> event*)arg, &amp;tv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">1</span>, <span class="number">1</span>), &amp;wsaData) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">event_init</span>();</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">event</span> ev_time;</span><br><span class="line"><span class="built_in">evtimer_set</span>(&amp;ev_time, OnTime, &amp;ev_time);</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">timeval</span> tv;</span><br><span class="line">tv.tv_sec = <span class="number">1</span>;</span><br><span class="line">tv.tv_usec = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">event_add</span>(&amp;ev_time, &amp;tv);</span><br><span class="line"><span class="built_in">event_dispatch</span>();</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（参考文章：<a href="https://blog.csdn.net/wzh1378008099/article/details/107577936）">https://blog.csdn.net/wzh1378008099/article/details/107577936）</a></p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vs2022 libevent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【环境配置】vs2022搭建jsoncpp</title>
      <link href="/posts/a90c58e2.html"/>
      <url>/posts/a90c58e2.html</url>
      
        <content type="html"><![CDATA[<h2 id="json库的引入（注意：vs2022-debug-x86）"><a href="#json库的引入（注意：vs2022-debug-x86）" class="headerlink" title="json库的引入（注意：vs2022 debug x86）"></a>json库的引入（注意：vs2022 debug x86）</h2><p>（0）下载jsoncpp，这里直接提供已经生成好的静态库</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1Quuf01JtC0MtCT4y1ionvw">https://pan.baidu.com/s/1Quuf01JtC0MtCT4y1ionvw</a><br>提取码：8888</p></blockquote><p>（1）下载解压后，有个json文件夹，可以随意放，但要记得路径，最好和项目同级目录，便于寻找。<br>（2）确保该项目中有一个.cpp文件，右键项目属性-&gt;C/C++-&gt;常规-&gt;附加包含目录-&gt;添加json/include路径<br>（3）属性-&gt;链接器-&gt;常规-&gt;附加库目录-&gt;添加json/lib路径<br>（4）属性-&gt;链接器-&gt;输入-&gt;附加依赖项-&gt;添加json/lib下的.lib文件名<br>（5）属性-&gt;C/C++-&gt;代码生成-&gt;运行库-&gt;多线程调试(/MTD)<br>（6）测试是否成功引入：看是否能够编译连接通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;json.h&quot;</span> </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line">Json::Value a; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>（环境搭建参考文章）<a href="https://www.cnblogs.com/heyyw1119/p/6810561.html">https://www.cnblogs.com/heyyw1119/p/6810561.html</a><br>（json学习参考文章）<a href="https://www.cnblogs.com/__tudou__/p/14957646.html">https://www.cnblogs.com/__tudou__/p/14957646.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vs2022 jsoncpp C++ 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【review-list 1】反转链表</title>
      <link href="/posts/4778594c.html"/>
      <url>/posts/4778594c.html</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p><img src="https://img-blog.csdnimg.cn/52711c335e0c436dbab39c9a991dfcd4.png" alt="在这里插入图片描述"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>解法一：双指针迭代（推荐）</p><p>step1: 定义pre指向pHead前一个结点、next指向pHead下一个结点<br>step2: 通过头指针的移动来不断使用pre、pHead、next指针进行方向逆转，直到pHead == nullptr<br>step3: 此时退出循环，pre指向最后一个结点，也就是反转后的头结点</p><p><strong>C++实现代码</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        ListNode* pre = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* next = pHead-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(pHead != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            next = pHead-&gt;next;</span><br><span class="line">            pHead-&gt;next = pre;</span><br><span class="line">            pre = pHead;</span><br><span class="line">            pHead = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><blockquote><p>时间复杂度O(n)<br>空间复杂度O(1)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> newcoder </category>
          
      </categories>
      
      
        <tags>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】模板元编程栗子</title>
      <link href="/posts/5be19ab.html"/>
      <url>/posts/5be19ab.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><blockquote><p><strong>使用c++提供的模板编程，将二进制数转换成十进制</strong></p></blockquote><h3 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> N&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinToDec</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> value = BinToDec&lt;N / <span class="number">10</span>&gt;::value * <span class="number">2</span> + N % <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinToDec</span>&lt;<span class="number">0</span>&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">size_t</span> res = BinToDec&lt;<span class="number">110</span>&gt;::value;</span><br><span class="line">cout &lt;&lt; res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、代码分析"><a href="#三、代码分析" class="headerlink" title="三、代码分析"></a>三、代码分析</h3><p><img src="https://img-blog.csdnimg.cn/d0c36e3732a341f68ced500ebdb7aa86.png" alt="在这里插入图片描述"><br>结果：<br><img src="https://img-blog.csdnimg.cn/d2aa5112346f4682a834d3a12b724980.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板元编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】并查集</title>
      <link href="/posts/2e7813af.html"/>
      <url>/posts/2e7813af.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><blockquote><p><a href="https://www.runoob.com/data-structures/union-find-basic.html">并查集的相关介绍</a></p></blockquote><h3 id="二、C-实现"><a href="#二、C-实现" class="headerlink" title="二、C++实现"></a>二、C++实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ufset</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span>* parent;</span><br><span class="line"><span class="type">size_t</span> size;<span class="comment">//parent对象的个数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Showchild</span><span class="params">(<span class="type">int</span> child)</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; child &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (child == parent[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Showchild</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Ufset</span>(<span class="type">int</span> sz) :<span class="built_in">parent</span>(<span class="keyword">new</span> <span class="type">int</span>[sz]), <span class="built_in">size</span>(sz)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line">parent[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Ufset</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != parent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] parent;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找根节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindRoot</span><span class="params">(<span class="type">int</span> child)</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (parent[child] &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">child = parent[child];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//并集</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> cha, <span class="type">int</span> chb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">bool</span> res = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//求得两个对象的根</span></span><br><span class="line"><span class="type">int</span> left = <span class="built_in">FindRoot</span>(cha);</span><br><span class="line"><span class="type">int</span> right = <span class="built_in">FindRoot</span>(chb);</span><br><span class="line"><span class="comment">//两个未在同一个根下</span></span><br><span class="line"><span class="keyword">if</span> (left != right)</span><br><span class="line">&#123;</span><br><span class="line">parent[left] += parent[right];</span><br><span class="line">parent[right] = left;</span><br><span class="line">res = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出所有的集合</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowAllSet</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> si = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//根节点</span></span><br><span class="line"><span class="keyword">if</span> (parent[i] &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;set&quot;</span> &lt;&lt; si++ &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line"><span class="built_in">Showchild</span>(i);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Ufset <span class="title">s</span><span class="params">(<span class="number">12</span>)</span></span>;</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">6</span>, <span class="number">10</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">7</span>, <span class="number">4</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">2</span>, <span class="number">11</span>);</span><br><span class="line">s.<span class="built_in">Union</span>(<span class="number">11</span>, <span class="number">0</span>);</span><br><span class="line">s.<span class="built_in">ShowAllSet</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/12fbaea93b34435298c7b755c0102b24.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】B/B-树（目录树）</title>
      <link href="/posts/b36eb58c.html"/>
      <url>/posts/b36eb58c.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p><a href="https://baike.baidu.com/item/B%E6%A0%91/5411672">关于B树的性质</a></p><h3 id="一、B树的结构"><a href="#一、B树的结构" class="headerlink" title="一、B树的结构"></a>一、B树的结构</h3><p><img src="https://img-blog.csdnimg.cn/f923b82b1b6642328c573f6d0064ff55.png" alt="请添加图片描述"></p><h3 id="二、B树的实现"><a href="#二、B树的实现" class="headerlink" title="二、B树的实现"></a>二、B树的实现</h3></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="comment">//5分支Btree</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 5<span class="comment">//奇数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE (M-1)<span class="comment">//最多元素个数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MINSIZE (M/2)<span class="comment">//最少元素个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//B树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Btree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//关键码类型</span></span><br><span class="line"><span class="keyword">using</span> KeyType = <span class="type">char</span>;</span><br><span class="line"><span class="comment">//元素类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">KeyType key;<span class="comment">//关键码</span></span><br><span class="line"><span class="type">void</span>* infoptr;<span class="comment">//记录集</span></span><br><span class="line">&#125;ElemType;</span><br><span class="line"><span class="comment">//树结点类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BNode</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> keysize;<span class="comment">//当前结点中data中挂接关键码的个数</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BNode</span>* parent;<span class="comment">//指向双亲结点</span></span><br><span class="line">ElemType data[M + <span class="number">1</span>];<span class="comment">//结点下的元素&#123;关键码，记录集&#125;</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BNode</span>* sub[M + <span class="number">1</span>];<span class="comment">//分支链</span></span><br><span class="line">&#125;BNode;</span><br><span class="line"><span class="comment">//查询的结果类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResultNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">BNode* pnode;<span class="comment">//关键码所在的树结点地址</span></span><br><span class="line"><span class="type">int</span> index;<span class="comment">//关键码所在pnode-&gt;data的前一个下标</span></span><br><span class="line"><span class="type">bool</span> tag;<span class="comment">//是否存在的标志位 存在true,不存在false;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ResultNode</span>() :<span class="built_in">pnode</span>(<span class="literal">nullptr</span>), <span class="built_in">index</span>(<span class="number">-1</span>), <span class="built_in">tag</span>(<span class="literal">false</span>) &#123;&#125;</span><br><span class="line">~<span class="built_in">ResultNode</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//申请BNode结点</span></span><br><span class="line"><span class="function">BNode* <span class="title">BuyBNode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BNode* s = (BNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BNode));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == s) <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="built_in">sizeof</span>(BNode));</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//申请并初始化根节点</span></span><br><span class="line"><span class="function">BNode* <span class="title">MakeRoot</span><span class="params">(<span class="type">const</span> ElemType&amp; item, BNode* left, BNode* right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BNode* root = <span class="built_in">BuyBNode</span>();</span><br><span class="line">root-&gt;keysize = <span class="number">1</span>;</span><br><span class="line">root-&gt;parent = <span class="literal">nullptr</span>;</span><br><span class="line">root-&gt;data[<span class="number">1</span>] = item;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != left) </span><br><span class="line">&#123;</span><br><span class="line">left-&gt;parent = root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != right)</span><br><span class="line">&#123;</span><br><span class="line">right-&gt;parent = root;</span><br><span class="line">&#125;</span><br><span class="line">root-&gt;sub[<span class="number">0</span>] = left;</span><br><span class="line">root-&gt;sub[<span class="number">1</span>] = right;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//pos位置插入item操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert_Item</span><span class="params">(BNode* ptr, <span class="type">int</span> pos, <span class="type">const</span> ElemType&amp; item, BNode* right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = ptr-&gt;keysize; i &gt; pos; --i)</span><br><span class="line">&#123;</span><br><span class="line">ptr-&gt;data[i + <span class="number">1</span>] = ptr-&gt;data[i];</span><br><span class="line">ptr-&gt;sub[i + <span class="number">1</span>] = ptr-&gt;sub[i];</span><br><span class="line">&#125;</span><br><span class="line">ptr-&gt;data[pos + <span class="number">1</span>] = item;</span><br><span class="line">ptr-&gt;sub[pos + <span class="number">1</span>] = right;</span><br><span class="line">++ptr-&gt;keysize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将ptr中后半截的元素移动到新开辟的s分支中</span></span><br><span class="line"><span class="function">ElemType <span class="title">MoveElem</span><span class="params">(BNode* s, BNode* ptr, <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = pos + <span class="number">1</span>; j &lt;= ptr-&gt;keysize; ++i, ++j)</span><br><span class="line">&#123;</span><br><span class="line">s-&gt;data[i] = ptr-&gt;data[j];</span><br><span class="line">s-&gt;sub[i] = ptr-&gt;sub[j];</span><br><span class="line"><span class="keyword">if</span> (s-&gt;sub[i] != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">s-&gt;sub[i]-&gt;parent = s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ptr-&gt;keysize = MINSIZE;</span><br><span class="line">s-&gt;keysize = MINSIZE;</span><br><span class="line">s-&gt;parent = ptr-&gt;parent;</span><br><span class="line"><span class="keyword">return</span> s-&gt;data[<span class="number">0</span>];<span class="comment">//返回哨兵结点的elem</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分裂产生返回新根节点</span></span><br><span class="line"><span class="function">BNode* <span class="title">SplitNewRoot</span><span class="params">(BNode* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BNode* s = <span class="built_in">BuyBNode</span>();</span><br><span class="line"><span class="comment">//将ptr中后半截的元素移动到新开辟的s分支中</span></span><br><span class="line">ElemType item = <span class="built_in">MoveElem</span>(s, ptr, MINSIZE);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == ptr-&gt;parent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">MakeRoot</span>(item, ptr, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将item在ptr-&gt;parent结点中再进行找位置，插入，再分裂</span></span><br><span class="line">BNode* pa = ptr-&gt;parent;</span><br><span class="line"><span class="type">int</span> pos = pa-&gt;keysize;</span><br><span class="line">pa-&gt;data[<span class="number">0</span>] = item;<span class="comment">//哨兵位填充</span></span><br><span class="line"><span class="keyword">while</span> (pos &gt; <span class="number">0</span> &amp;&amp; item.key &lt; pa-&gt;data[pos].key)</span><br><span class="line">&#123;</span><br><span class="line">--pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//s是pa的右孩子</span></span><br><span class="line"><span class="built_in">Insert_Item</span>(pa, pos, item, s);</span><br><span class="line"><span class="comment">//pa分支满了，对pa进行递归分裂</span></span><br><span class="line"><span class="keyword">if</span> (pa-&gt;keysize &gt; MAXSIZE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">SplitNewRoot</span>(pa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">BNode* root;<span class="comment">//根节点</span></span><br><span class="line"><span class="type">int</span> size;<span class="comment">//当前树的关键码的个数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Btree</span>() :<span class="built_in">root</span>(<span class="literal">nullptr</span>), <span class="built_in">size</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">~<span class="built_in">Btree</span>() &#123;&#125;</span><br><span class="line"><span class="comment">//得到root结点地址</span></span><br><span class="line"><span class="function">BNode* <span class="title">GetRoot</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找关键码</span></span><br><span class="line"><span class="function">ResultNode <span class="title">FindKey</span><span class="params">(KeyType ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ResultNode res;<span class="comment">//默认构造nullptr, -1, false;</span></span><br><span class="line">BNode* p = root;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;data[<span class="number">0</span>].key = ch;</span><br><span class="line"><span class="type">int</span> index = p-&gt;keysize;<span class="comment">//逆序查询</span></span><br><span class="line"><span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; ch &lt; p-&gt;data[index].key)</span><br><span class="line">&#123;</span><br><span class="line">--index;</span><br><span class="line">&#125;</span><br><span class="line">res.pnode = p;<span class="comment">//结果指向当前的树结点</span></span><br><span class="line">res.index = index;</span><br><span class="line"><span class="comment">//找到了</span></span><br><span class="line"><span class="keyword">if</span> (index &gt; <span class="number">0</span> &amp;&amp; ch == p-&gt;data[index].key)</span><br><span class="line">&#123;</span><br><span class="line">res.tag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;sub[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入ElemType</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Insert</span><span class="params">(<span class="type">const</span> ElemType&amp; item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == root)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="built_in">MakeRoot</span>(item, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">size = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找item.key是否存在</span></span><br><span class="line">ResultNode res = <span class="built_in">FindKey</span>(item.key);</span><br><span class="line"><span class="comment">//说明已经存在</span></span><br><span class="line"><span class="keyword">if</span> (res.pnode != <span class="literal">nullptr</span> &amp;&amp; res.tag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//不存在，从find的res.pnode开始进行插入</span></span><br><span class="line">BNode* ptr = res.pnode;</span><br><span class="line"><span class="comment">//插入位置</span></span><br><span class="line"><span class="type">int</span> pos = res.index;</span><br><span class="line"><span class="comment">//插入并后移元素</span></span><br><span class="line"><span class="built_in">Insert_Item</span>(ptr, pos, item, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="comment">//插入元素后个数 &gt; MAXSIZE，需要分裂重生出新根节点</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != ptr &amp;&amp; ptr-&gt;keysize &gt; MAXSIZE)</span><br><span class="line">&#123;</span><br><span class="line">BNode* newroot = <span class="built_in">SplitNewRoot</span>(ptr);</span><br><span class="line"><span class="comment">//根节点改变</span></span><br><span class="line"><span class="keyword">if</span> (newroot != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = newroot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">++size;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有序输出B树中的所有元素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BTreeShow</span><span class="params">(BNode* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == ptr) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">BTreeShow</span>(ptr-&gt;sub[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= ptr-&gt;keysize; ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; ptr-&gt;data[i].key;</span><br><span class="line"><span class="built_in">BTreeShow</span>(ptr-&gt;sub[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、插入、查询、输出测试"><a href="#三、插入、查询、输出测试" class="headerlink" title="三、插入、查询、输出测试"></a>三、插入、查询、输出测试</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Btree::KeyType ch[] = &#123;<span class="string">&quot;heqwertsycjgkzlxlowrd&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">Btree bt;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ch[i] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">Btree::ElemType tmp = &#123; ch[i], <span class="literal">nullptr</span> &#125;;</span><br><span class="line">cout &lt;&lt; bt.<span class="built_in">Insert</span>(tmp);</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">bt.<span class="built_in">BTreeShow</span>(bt.<span class="built_in">GetRoot</span>());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/173035e60c7844208c43ca2e0f66083f.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> B树 B-树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】字典树T树</title>
      <link href="/posts/e64d031c.html"/>
      <url>/posts/e64d031c.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="引言：为什么需要字典树？"><a href="#引言：为什么需要字典树？" class="headerlink" title="引言：为什么需要字典树？"></a>引言：为什么需要字典树？</h3><ul><li><p>实现类似搜索引擎的效果，当输入“西安”关键字时，下面出现的联想词（如下图）</p><p><img src="https://img-blog.csdnimg.cn/d7888a40e68449e58f0db8edc739c3f0.png" alt="在这里插入图片描述"></p><h3 id="一、字典树逻辑图"><a href="#一、字典树逻辑图" class="headerlink" title="一、字典树逻辑图"></a>一、字典树逻辑图</h3><p><img src="https://img-blog.csdnimg.cn/67592b86f2424c529560375cbf4595bc.png" alt="在这里插入图片描述"></p></li><li>T字典树功能，只能插入结点、暂不能删除结点（删除过程比较复杂）、根据关键码进行查询<h3 id="二、数据结点的设计"><a href="#二、数据结点的设计" class="headerlink" title="二、数据结点的设计"></a>二、数据结点的设计</h3><h4 id="（1）逻辑图"><a href="#（1）逻辑图" class="headerlink" title="（1）逻辑图"></a>（1）逻辑图</h4><img src="https://img-blog.csdnimg.cn/70801c94613d44babbe64bb0913d8acc.png" alt="在这里插入图片描述"><h4 id="（2）详细类型"><a href="#（2）详细类型" class="headerlink" title="（2）详细类型"></a>（2）详细类型</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MaxChSize = <span class="number">26</span>;<span class="comment">//最长关键码</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LinkSize = <span class="number">27</span>;<span class="comment">//分支结点的指针个数</span></span><br><span class="line"><span class="comment">//T树结点的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;ELEM = <span class="number">1</span>, BRCH = <span class="number">2</span>&#125; NodeType;<span class="comment">//1元素结点，2分支结点</span></span><br><span class="line"><span class="comment">//关键码类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch[MaxChSize];<span class="comment">//关键字符</span></span><br><span class="line"><span class="type">int</span> CurSize;<span class="comment">//当前的字符长度</span></span><br><span class="line">&#125;KeyType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素类型(关键码 + 相关信息)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">KeyType key;<span class="comment">//关键码</span></span><br><span class="line"><span class="type">void</span>* InfoPtr;<span class="comment">//相关信息</span></span><br><span class="line">&#125;ElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明TrieNode</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TrieNode</span>;</span><br><span class="line"><span class="comment">//分支结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">TrieNode* Link[LinkSize];<span class="comment">//分支链</span></span><br><span class="line">&#125;BranchNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//T树结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TrieNode</span></span><br><span class="line">&#123;</span><br><span class="line">NodeType Ttype;<span class="comment">//结点类型</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line">ElemType elem;</span><br><span class="line">BranchNode brchNode;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;TrieNode;</span><br></pre></td></tr></table></figure><h3 id="三、T树的详细实现"><a href="#三、T树的详细实现" class="headerlink" title="三、T树的详细实现"></a>三、T树的详细实现</h3></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxChSize = <span class="number">26</span>;<span class="comment">//最长关键码</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> LinkSize = <span class="number">27</span>;<span class="comment">//分支结点的指针个数</span></span><br><span class="line"><span class="comment">//T树结点的类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; ELEM = <span class="number">1</span>, BRCH = <span class="number">2</span> &#125; NodeType;<span class="comment">//1元素结点，2分支结点</span></span><br><span class="line"><span class="comment">//关键码类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch[MaxChSize];<span class="comment">//关键字符</span></span><br><span class="line"><span class="type">int</span> CurSize;<span class="comment">//当前的字符长度</span></span><br><span class="line">&#125;KeyType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素类型(关键码 + 相关信息)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">KeyType key;<span class="comment">//关键码</span></span><br><span class="line"><span class="type">void</span>* InfoPtr;<span class="comment">//相关信息</span></span><br><span class="line">&#125;ElemType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明TrieNode</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TrieNode</span>;</span><br><span class="line"><span class="comment">//分支结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">TrieNode* Link[LinkSize];<span class="comment">//分支链</span></span><br><span class="line">&#125;BranchNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//T树结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TrieNode</span></span><br><span class="line">&#123;</span><br><span class="line">NodeType Ttype;<span class="comment">//结点类型</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line">ElemType elem;</span><br><span class="line">BranchNode brchNode;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;TrieNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//T字典树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrieTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">TrieNode* root;<span class="comment">//根节点</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TrieTree</span>() : <span class="built_in">root</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">~<span class="built_in">TrieTree</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//第k个元素的下标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">TransIndex</span><span class="params">(<span class="type">const</span> KeyType&amp; kch, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>;<span class="comment">//默认0下标</span></span><br><span class="line"><span class="keyword">if</span> (k &lt; kch.CurSize)</span><br><span class="line">&#123;</span><br><span class="line">index = kch.ch[k] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//申请TrieNode结点</span></span><br><span class="line"><span class="function">TrieNode* <span class="title">BuyTrieNode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TrieNode* p = (TrieNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(TrieNode));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == p) <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="built_in">sizeof</span>(TrieNode));</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//申请元素类型结点</span></span><br><span class="line"><span class="function">TrieNode* <span class="title">MakeElemNode</span><span class="params">(<span class="type">const</span> ElemType&amp; item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TrieNode* s = <span class="built_in">BuyTrieNode</span>();</span><br><span class="line">s-&gt;Ttype = ELEM;</span><br><span class="line">s-&gt;elem = item;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//申请分支类型结点</span></span><br><span class="line"><span class="function">TrieNode* <span class="title">MakeBrchNode</span><span class="params">(TrieNode* ptr, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//返回值作为改变root的ptr指向的元素结点</span></span><br><span class="line">TrieNode* s = <span class="built_in">BuyTrieNode</span>();</span><br><span class="line">s-&gt;Ttype = BRCH;</span><br><span class="line"><span class="type">int</span> index = <span class="built_in">TransIndex</span>(ptr-&gt;elem.key, k);</span><br><span class="line">s-&gt;brchNode.Link[index] = ptr;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert_item</span><span class="params">(TrieNode*&amp; ptr, <span class="type">const</span> ElemType&amp; item, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//ptr指向是nullptr</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == ptr)</span><br><span class="line">&#123;</span><br><span class="line">ptr = <span class="built_in">MakeElemNode</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ptr指向是分支结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ptr-&gt;Ttype == BRCH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//寻找第k个字符的分支位置</span></span><br><span class="line"><span class="type">int</span> index = <span class="built_in">TransIndex</span>(item.key, k);</span><br><span class="line"><span class="built_in">Insert_item</span>(ptr-&gt;brchNode.Link[index], item, k + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ptr指向是元素结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ptr-&gt;Ttype == ELEM)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//增加分支, 指向元素结点的ptr重新指向分支</span></span><br><span class="line">ptr = <span class="built_in">MakeBrchNode</span>(ptr, k);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算当前elem的k个字母的下标</span></span><br><span class="line"><span class="type">int</span> index = <span class="built_in">TransIndex</span>(item.key, k);</span><br><span class="line"></span><br><span class="line"><span class="comment">//继续搜寻k+1个字符对应的位置</span></span><br><span class="line"><span class="built_in">Insert_item</span>(ptr-&gt;brchNode.Link[index], item, k + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//通过关键码进行查询</span></span><br><span class="line"><span class="function">TrieNode* <span class="title">FindTrieNode</span><span class="params">(<span class="type">const</span> KeyType&amp; key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TrieNode* p = root;</span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">nullptr</span> &amp;&amp; p-&gt;Ttype == BRCH)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> index = <span class="built_in">TransIndex</span>(key, k);</span><br><span class="line">p = p-&gt;brchNode.Link[index];</span><br><span class="line">++k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">nullptr</span> &amp;&amp; <span class="built_in">strcmp</span>(p-&gt;elem.key.ch, key.ch) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Insert</span><span class="params">(<span class="type">const</span> ElemType&amp; item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//去重,存在则插入失败</span></span><br><span class="line">TrieNode* res = <span class="built_in">FindTrieNode</span>(item.key);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != res) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Insert_item</span>(root, item, k);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="四、插入、查询测试"><a href="#四、插入、查询测试" class="headerlink" title="四、插入、查询测试"></a>四、插入、查询测试</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//给定关键码</span></span><br><span class="line">KeyType keySet[] = &#123; <span class="string">&quot;cao&quot;</span>, <span class="number">3</span>, <span class="string">&quot;cai&quot;</span>, <span class="number">3</span>, <span class="string">&quot;feng&quot;</span>, <span class="number">4</span>, <span class="string">&quot;fengt&quot;</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="type">int</span> size = <span class="built_in">sizeof</span>(keySet) / <span class="built_in">sizeof</span>(keySet[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//构建T树(是在插入元素结点的过程中不断的扩充、分裂)</span></span><br><span class="line">TrieTree Tt;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line">ElemType node = &#123; keySet[i], <span class="literal">nullptr</span> &#125;;</span><br><span class="line">Tt.<span class="built_in">Insert</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line">TrieNode* res = Tt.<span class="built_in">FindTrieNode</span>(keySet[i]);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;found it! &quot;</span> &lt;&lt; res-&gt;elem.key.ch &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3035bf61e6844b039bd5ab41c6c09a7e.png" alt="在这里插入图片描述"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典树 T树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【设计模式】类关系</title>
      <link href="/posts/9a72630a.html"/>
      <url>/posts/9a72630a.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p><strong>耦合性：</strong><a href="https://blog.csdn.net/qingfeng812/article/details/8962836">参考文章</a></p><h2 id="下面就通过耦合性的由弱到强，依赖、关联、聚合、组合、继承（泛化）、实现。（总结：衣冠剧组呈现）"><a href="#下面就通过耦合性的由弱到强，依赖、关联、聚合、组合、继承（泛化）、实现。（总结：衣冠剧组呈现）" class="headerlink" title="下面就通过耦合性的由弱到强，依赖、关联、聚合、组合、继承（泛化）、实现。（总结：衣冠剧组呈现）"></a>下面就通过耦合性的由弱到强，依赖、关联、聚合、组合、继承（泛化）、实现。（总结：衣冠剧组呈现）</h2></blockquote><h3 id="一、依赖Dependency"><a href="#一、依赖Dependency" class="headerlink" title="一、依赖Dependency"></a>一、依赖Dependency</h3><p><strong>例：A类是B类的成员函数的参数、返回值（局部变量）</strong><br><img src="https://img-blog.csdnimg.cn/1b187a706ef7421680e0601ba60e48ce.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FunB</span><span class="params">(A&amp; a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function">A <span class="title">GetA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">A</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二、关联Association"><a href="#二、关联Association" class="headerlink" title="二、关联Association"></a>二、关联Association</h3><p><strong>例：A类是B类的一个成员属性</strong></p><p><strong>（1）弱关联</strong><br><img src="https://img-blog.csdnimg.cn/de22977859444cdfa16b597c650ea64c.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">A* pa;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(A* ptr):<span class="built_in">pa</span>(ptr)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="comment">//B析构函数不能delete pa，弱关联关系</span></span><br><span class="line">~<span class="built_in">B</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A a;</span><br><span class="line"><span class="function">B <span class="title">b</span><span class="params">(&amp;a)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（2）强关联</strong><br><img src="https://img-blog.csdnimg.cn/29e59227011b4b0eb52b7752973911bb.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">A&amp; aref;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//强关联，引用必须初始化</span></span><br><span class="line"><span class="comment">//注意：参数不能使用A a 来构造aref</span></span><br><span class="line"><span class="comment">//（当a的声明周期结束后（只有该函数内），函数结束aref就会失效）</span></span><br><span class="line"><span class="built_in">B</span>(A&amp; a):<span class="built_in">aref</span>(a)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">B</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A a;</span><br><span class="line"><span class="function">B <span class="title">b</span><span class="params">(a)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、聚合Aggregation"><a href="#三、聚合Aggregation" class="headerlink" title="三、聚合Aggregation"></a>三、聚合Aggregation</h3><p><img src="https://img-blog.csdnimg.cn/d7c223bee38e45c3890a5e42c6af4bf3.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _x;</span><br><span class="line"><span class="type">int</span> _y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">point</span>(<span class="type">int</span> x, <span class="type">int</span> y): _x(x), _y(y)&#123;&#125;</span><br><span class="line">~<span class="built_in">point</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">point center;<span class="comment">//圆心</span></span><br><span class="line"><span class="type">int</span> radius;<span class="comment">//半径</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Circle</span>():<span class="built_in">center</span>(<span class="built_in">pointer</span>(<span class="number">0</span>, <span class="number">0</span>)), <span class="built_in">radius</span>(<span class="number">0</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="四、组合Composition"><a href="#四、组合Composition" class="headerlink" title="四、组合Composition"></a>四、组合Composition</h3><p><img src="https://img-blog.csdnimg.cn/56a94a4921e64fbca4bb9a8537c42dda.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">body</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">soul</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">human</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">body _bd;</span><br><span class="line">soul _sl;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">human</span>(<span class="type">const</span> body&amp; bd, <span class="type">const</span> soul&amp; sl):_bd(bd), _sl(sl)</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="五、继承Generalization"><a href="#五、继承Generalization" class="headerlink" title="五、继承Generalization"></a>五、继承Generalization</h3><p><img src="https://img-blog.csdnimg.cn/26e73ea3d8f24442b74386b8292754b4.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> : <span class="keyword">public</span> Animal&#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="六、实现Realization"><a href="#六、实现Realization" class="headerlink" title="六、实现Realization"></a>六、实现Realization</h3><p>实现对应的是面向对象中的”接口”，即动物都要移动，但是每种移动的方式不一样，鸟要实现自己独有的移动的方法。<br>在C++中，接口通过的纯虚函数来实现，C++的多态就是通过虚函数来实现的。</p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function">vitual <span class="type">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span>: <span class="keyword">public</span> Animal&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//鸟的移动方式，飞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></h2><p>参考文章：<br><a href="https://www.cnblogs.com/xiaojiang1025/p/6677978.html">面向对象的类关系及其C++实现</a><br><a href="https://blog.csdn.net/kiki44944/article/details/81153804">设计模式中类的关系：依赖、关联、聚合、组合、继承、实现。耦合度依次递增</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类关系 UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++多线程】银行多人转账模拟</title>
      <link href="/posts/6a6371fd.html"/>
      <url>/posts/6a6371fd.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h3><blockquote><p><strong>使用C++的线程并发库，实现并模拟多人在线同时转账的过程，确保转账不能出现差错。</strong></p><p>例如：<br>Account A(“xiaoming”, 1000);<br>Account B(“zhangqiang”, 2000);<br>Account C(“zq”, 1500);</p></blockquote><pre><code>B-&gt;A 200    A 1200 B 1800B-&gt;C 500    B 1300 C 2000C-&gt;A 300    A 1500 C 1700</code></pre><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Account</span>() :<span class="built_in">name</span>(), <span class="built_in">money</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"><span class="built_in">Account</span>(<span class="type">const</span> string&amp; na, <span class="type">int</span> my) : <span class="built_in">name</span>(na), <span class="built_in">money</span>(my) &#123;&#125;</span><br><span class="line">~<span class="built_in">Account</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">int</span> <span class="title">GetMoney</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> money;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetMoney</span><span class="params">(<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">money = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">const</span> string&amp; <span class="title">GetName</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> money;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bank</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">~<span class="built_in">Bank</span>() &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> Bank&amp; <span class="title">GetSingleBank</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> bank;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//A转给B money</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TransAccounts</span><span class="params">(Account&amp; A, Account&amp; B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (map.<span class="built_in">count</span>(A.<span class="built_in">GetName</span>()) &gt; <span class="number">0</span> || map.<span class="built_in">count</span>(B.<span class="built_in">GetName</span>()) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cv.<span class="built_in">wait</span>(lock);</span><br><span class="line">&#125;</span><br><span class="line">map[A.<span class="built_in">GetName</span>()] = A.<span class="built_in">GetMoney</span>();</span><br><span class="line">map[B.<span class="built_in">GetName</span>()] = B.<span class="built_in">GetMoney</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清除交易完成的账户</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ClearAccount</span><span class="params">(Account&amp; A, Account&amp; B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lcok</span><span class="params">(mtx)</span></span>;</span><br><span class="line">map.<span class="built_in">erase</span>(A.<span class="built_in">GetName</span>());</span><br><span class="line">map.<span class="built_in">erase</span>(B.<span class="built_in">GetName</span>());</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Bank</span>() = <span class="keyword">default</span>;</span><br><span class="line">Bank&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Bank&amp; b) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="type">static</span> Bank bank;</span><br><span class="line"></span><br><span class="line">std::map&lt;string, <span class="type">int</span>&gt; map;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//单例：类外初始化</span></span><br><span class="line">Bank Bank::bank;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ThreadFun</span><span class="params">(Account&amp; A, Account&amp; B, <span class="type">int</span> money)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (money &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">Bank&amp; bank = Bank::<span class="built_in">GetSingleBank</span>();</span><br><span class="line">bank.<span class="built_in">TransAccounts</span>(A, B);</span><br><span class="line"><span class="keyword">if</span> (A.<span class="built_in">GetMoney</span>() &gt;= money)</span><br><span class="line">&#123;</span><br><span class="line">A.<span class="built_in">SetMoney</span>(A.<span class="built_in">GetMoney</span>() - money);</span><br><span class="line">B.<span class="built_in">SetMoney</span>(B.<span class="built_in">GetMoney</span>() + money);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; A.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt; B.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;交易失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">bank.<span class="built_in">ClearAccount</span>(A, B);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Account <span class="title">A</span><span class="params">(<span class="string">&quot;xiaoming&quot;</span>, <span class="number">1000</span>)</span></span>;</span><br><span class="line"><span class="function">Account <span class="title">B</span><span class="params">(<span class="string">&quot;zhangqiang&quot;</span>, <span class="number">2000</span>)</span></span>;</span><br><span class="line"><span class="function">Account <span class="title">C</span><span class="params">(<span class="string">&quot;zq&quot;</span>, <span class="number">1500</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(ThreadFun, std::ref(B), std::ref(A), <span class="number">200</span>)</span></span>; <span class="comment">//A 1200 B 1800</span></span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(ThreadFun, std::ref(B), std::ref(C), <span class="number">500</span>)</span></span>; <span class="comment">//B 1300 C 2000</span></span><br><span class="line"><span class="function">thread <span class="title">thc</span><span class="params">(ThreadFun, std::ref(C), std::ref(A), <span class="number">300</span>)</span></span>; <span class="comment">//A 1500 C 1700</span></span><br><span class="line"></span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line">thc.<span class="built_in">join</span>();</span><br><span class="line"><span class="comment">//A 1500 B 1300 C 1700</span></span><br><span class="line">cout &lt;&lt; A.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;: &quot;</span>&lt;&lt; A.<span class="built_in">GetMoney</span>()&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; B.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;: &quot;</span>&lt;&lt; B.<span class="built_in">GetMoney</span>()&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; C.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; C.<span class="built_in">GetMoney</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/33a666ab0d1e4a3d8b9b2c4a528f883e.png" alt="在这里插入图片描述"></p><h3 id="三、使用线程并发库"><a href="#三、使用线程并发库" class="headerlink" title="三、使用线程并发库"></a>三、使用线程并发库</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Account</span>() :<span class="built_in">name</span>(), <span class="built_in">money</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"><span class="built_in">Account</span>(<span class="type">const</span> string&amp; na, <span class="type">int</span> my) : <span class="built_in">name</span>(na), <span class="built_in">money</span>(my) &#123;&#125;</span><br><span class="line">~<span class="built_in">Account</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">int</span> <span class="title">GetMoney</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> money;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetMoney</span><span class="params">(<span class="type">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">money = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">const</span> string&amp; <span class="title">GetName</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> money;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">mutex mtx1;</span><br><span class="line">mutex mtx2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ThreadFun</span><span class="params">(Account&amp; A, Account&amp; B, <span class="type">int</span> money)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock1</span><span class="params">(mtx1, defer_lock)</span></span>;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock2</span><span class="params">(mtx2, defer_lock)</span></span>;</span><br><span class="line"><span class="built_in">lock</span>(lock1, lock2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (A.<span class="built_in">GetMoney</span>() &gt;= money)</span><br><span class="line">&#123;</span><br><span class="line">A.<span class="built_in">SetMoney</span>(A.<span class="built_in">GetMoney</span>() - money);</span><br><span class="line">B.<span class="built_in">SetMoney</span>(B.<span class="built_in">GetMoney</span>() + money);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Account <span class="title">A</span><span class="params">(<span class="string">&quot;xiaoming&quot;</span>, <span class="number">1000</span>)</span></span>;</span><br><span class="line"><span class="function">Account <span class="title">B</span><span class="params">(<span class="string">&quot;zhangqiang&quot;</span>, <span class="number">2000</span>)</span></span>;</span><br><span class="line"><span class="function">Account <span class="title">C</span><span class="params">(<span class="string">&quot;zq&quot;</span>, <span class="number">1500</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(ThreadFun, std::ref(B), std::ref(A), <span class="number">200</span>)</span></span>; <span class="comment">//A 1200 B 1800</span></span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(ThreadFun, std::ref(B), std::ref(C), <span class="number">500</span>)</span></span>; <span class="comment">//B 1300 C 2000</span></span><br><span class="line"><span class="function">thread <span class="title">thc</span><span class="params">(ThreadFun, std::ref(C), std::ref(A), <span class="number">300</span>)</span></span>; <span class="comment">//A 1500 C 1700</span></span><br><span class="line"></span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line">thc.<span class="built_in">join</span>();</span><br><span class="line"><span class="comment">//A 1500 B 1300 C 1700</span></span><br><span class="line">cout &lt;&lt; A.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; A.<span class="built_in">GetMoney</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; B.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; B.<span class="built_in">GetMoney</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; C.<span class="built_in">GetName</span>() &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; C.<span class="built_in">GetMoney</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/eed88e2b6a2b486bb53dae5d64a67acd.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 银行多人转账 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++多线程】生产者消费者模型</title>
      <link href="/posts/7878fa2b.html"/>
      <url>/posts/7878fa2b.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、题目要求"><a href="#一、题目要求" class="headerlink" title="一、题目要求"></a>一、题目要求</h3><blockquote><p><strong>生产者消费者模型：在多线程下生产0~100个数，生产者线程1生产20个数据后，消费者线程1进行消费输出。</strong></p></blockquote><h3 id="二、解答"><a href="#二、解答" class="headerlink" title="二、解答"></a>二、解答</h3><p>使用到的技术：互斥锁、条件变量、多线程、双端队列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//生产数据: index是生产者编号，val是生产的结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PushData</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="comment">//size == 20</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock, [<span class="keyword">this</span>]()-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> qu.<span class="built_in">size</span>() != <span class="number">20</span>; &#125;);</span><br><span class="line">qu.<span class="built_in">push_back</span>(val);</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Producer:&quot;</span> &lt;&lt; index &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;val:&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费数据: index是消费者编号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PopData</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="comment">//!qu空 -&gt;真 , 继续执行</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock, [<span class="keyword">this</span>]()-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> !qu.<span class="built_in">empty</span>(); &#125;);</span><br><span class="line"><span class="type">int</span> val = qu.<span class="built_in">front</span>();</span><br><span class="line">qu.<span class="built_in">pop_front</span>();</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Customer:&quot;</span> &lt;&lt; index &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;val:&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; qu;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Producer</span><span class="params">(Queue&amp; qu, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">qu.<span class="built_in">PushData</span>(index, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Customer</span><span class="params">(Queue&amp; qu, <span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">qu.<span class="built_in">PopData</span>(index);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Queue qu;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(Producer, std::ref(qu), <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(Customer, std::ref(qu), <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//thread thc(Producer, std::ref(qu), 2);</span></span><br><span class="line"><span class="comment">//thread thd(Customer, std::ref(qu), 2);</span></span><br><span class="line"></span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line"><span class="comment">//thc.join();</span></span><br><span class="line"><span class="comment">//thd.join();</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/40ce8cb27461475eb0cd63711ad7fc1a.png" alt="在这里插入图片描述"></p><h3 id="三、题目要求"><a href="#三、题目要求" class="headerlink" title="三、题目要求"></a>三、题目要求</h3><blockquote><p><strong>实现一个循环队列，生产者线程生产0~100， 每次最多生产8个，然后消费者线程进行输出使用。</strong></p><p><strong>根据锁的粒度分为：</strong></p><ul><li><strong>行锁：并发性强，锁开销较大</strong></li><li><strong>表锁：并发性弱，锁开销较小</strong><h3 id="四、解答"><a href="#四、解答" class="headerlink" title="四、解答"></a>四、解答</h3><h4 id="（1）行锁"><a href="#（1）行锁" class="headerlink" title="（1）行锁"></a>（1）行锁</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Queue</span>() </span><br><span class="line">:<span class="built_in">data</span>(<span class="keyword">new</span> T[MAXSIZE]), <span class="built_in">maxsize</span>(MAXSIZE), <span class="built_in">front</span>(<span class="number">0</span>), <span class="built_in">rear</span>(<span class="number">0</span>), <span class="built_in">size</span>(<span class="number">0</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line">~<span class="built_in">Queue</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> data;</span><br><span class="line">&#125;</span><br><span class="line">maxsize = <span class="number">-1</span>;</span><br><span class="line">front = <span class="number">-1</span>;</span><br><span class="line">rear = <span class="number">-1</span>;</span><br><span class="line">size = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Capacity</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> maxsize; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Size</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> size == <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Full</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> size == maxsize; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push_back</span><span class="params">(T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Full</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">data[rear] = val;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxsize;</span><br><span class="line">++size;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop_front</span><span class="params">(T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">val = data[front];</span><br><span class="line">front = (front + <span class="number">1</span>) % maxsize;</span><br><span class="line">--size;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* data;</span><br><span class="line"><span class="type">int</span> maxsize;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="type">int</span> front;</span><br><span class="line"><span class="type">int</span> rear;</span><br><span class="line">&#125;;</span><br><span class="line">Queue&lt;<span class="type">int</span>&gt; qu;</span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"><span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Producer</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = number; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//行锁</span></span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="comment">//当qu不满 为真，继续执行</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock, []()-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> !qu.<span class="built_in">Full</span>(); &#125;);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">qu.<span class="built_in">Push_back</span>(i);</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Producer:&quot;</span> &lt;&lt; index &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; <span class="string">&quot;val:&quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">100</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Customer</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = number; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//行锁</span></span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="comment">//当qu不空 为真，继续执行</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock, []()-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> !qu.<span class="built_in">Empty</span>(); &#125;);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">qu.<span class="built_in">Pop_front</span>(val);</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Customer:&quot;</span> &lt;&lt; index &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;val:&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(Producer, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(Customer, <span class="number">1</span>)</span></span>;</span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/e4439598dfbd492885739904f1999e51.png" alt="在这里插入图片描述"></li></ul></blockquote><h4 id="（2）表锁"><a href="#（2）表锁" class="headerlink" title="（2）表锁"></a>（2）表锁</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Queue</span>() </span><br><span class="line">:<span class="built_in">data</span>(<span class="keyword">new</span> T[MAXSIZE]), <span class="built_in">maxsize</span>(MAXSIZE), <span class="built_in">front</span>(<span class="number">0</span>), <span class="built_in">rear</span>(<span class="number">0</span>), <span class="built_in">size</span>(<span class="number">0</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line">~<span class="built_in">Queue</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> data;</span><br><span class="line">&#125;</span><br><span class="line">maxsize = <span class="number">-1</span>;</span><br><span class="line">front = <span class="number">-1</span>;</span><br><span class="line">rear = <span class="number">-1</span>;</span><br><span class="line">size = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Capacity</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> maxsize; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Size</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> size == <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Full</span><span class="params">()</span><span class="type">const</span> </span>&#123; <span class="keyword">return</span> size == maxsize; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push_back</span><span class="params">(T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Full</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">data[rear] = val;</span><br><span class="line">rear = (rear + <span class="number">1</span>) % maxsize;</span><br><span class="line">++size;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop_front</span><span class="params">(T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">val = data[front];</span><br><span class="line">front = (front + <span class="number">1</span>) % maxsize;</span><br><span class="line">--size;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T* data;</span><br><span class="line"><span class="type">int</span> maxsize;</span><br><span class="line"><span class="type">int</span> size;</span><br><span class="line"><span class="type">int</span> front;</span><br><span class="line"><span class="type">int</span> rear;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Queue&lt;<span class="type">int</span>&gt; qu;</span><br><span class="line">std::mutex mtx;</span><br><span class="line">std::condition_variable cv;</span><br><span class="line"><span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Producer</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = number; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当qu不满 为真，继续执行</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock, []()-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> !qu.<span class="built_in">Full</span>(); &#125;);</span><br><span class="line">qu.<span class="built_in">Push_back</span>(i);</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Producer:&quot;</span> &lt;&lt; index &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt; <span class="string">&quot;val:&quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line"><span class="comment">//std::this_thread::sleep_for(std::chrono::milliseconds(100));</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Customer</span><span class="params">(<span class="type">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = number; i &lt; <span class="number">100</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//当qu不空 为真，继续执行</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock, []()-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> !qu.<span class="built_in">Empty</span>(); &#125;);</span><br><span class="line"><span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">qu.<span class="built_in">Pop_front</span>(val);</span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Customer:&quot;</span> &lt;&lt; index &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;val:&quot;</span> &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(Producer, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(Customer, <span class="number">1</span>)</span></span>;</span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fd75f26553d240d188f2de6899501021.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 生产者 消费者 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC动态规划】542. 01 矩阵</title>
      <link href="/posts/f0b54c00.html"/>
      <url>/posts/f0b54c00.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><img src="https://img-blog.csdnimg.cn/46242c7bc8ee44869f00449042cecf29.png" alt="在这里插入图片描述"></p><h3 id="二、算法分析"><a href="#二、算法分析" class="headerlink" title="二、算法分析"></a>二、算法分析</h3><p><img src="https://img-blog.csdnimg.cn/7134134c5aa648eb8cbd03629d1ebbda.png" alt="在这里插入图片描述"></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat) &#123;</span><br><span class="line">        <span class="type">int</span> m = mat.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, INT_MAX - <span class="number">100000</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从左上-&gt;右下遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//上邻居</span></span><br><span class="line">                <span class="keyword">if</span>(i &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i - <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//左邻居</span></span><br><span class="line">                <span class="keyword">if</span>(j &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右下-&gt;左上</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//下</span></span><br><span class="line">                <span class="keyword">if</span>(i &lt; m - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i + <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//右</span></span><br><span class="line">                <span class="keyword">if</span>(j &lt; n - <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][j + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ul><li>时间复杂度：O(m * n)</li><li>空间复杂度：O(m * n)</li><li><a href="https://leetcode-cn.com/problems/01-matrix/">题目传送门</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 01矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC动态规划】91. 解码方法</title>
      <link href="/posts/b077eed.html"/>
      <url>/posts/b077eed.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><img src="https://img-blog.csdnimg.cn/ac886535bb6147918412d751d8fe8d0f.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/04d3e18d462f47f386bc328849f2e1f3.png" alt="在这里插入图片描述"></p><h3 id="二、算法分析"><a href="#二、算法分析" class="headerlink" title="二、算法分析"></a>二、算法分析</h3><p><img src="https://img-blog.csdnimg.cn/8efb8250a4ec4b47b61a9df2c7004344.png" alt="在这里插入图片描述"></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDecodings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//单字符解析：当前s[i - 1]字符 非零</span></span><br><span class="line">            <span class="keyword">if</span>(s[i - <span class="number">1</span>] != <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i] = dp[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//双字符解析：当前字符s[i - 1]+前一个字符s[i - 2]</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">1</span> &amp;&amp; s[i - <span class="number">2</span>] != <span class="string">&#x27;0&#x27;</span> &amp;&amp; <span class="number">10</span> * (s[i - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>) + s[i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span> &lt;= <span class="number">26</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i] += dp[i - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度：O(n)<br>空间复杂度：O(n)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解码方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC动态规划】最小路径和</title>
      <link href="/posts/79e30a2.html"/>
      <url>/posts/79e30a2.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><img src="https://img-blog.csdnimg.cn/9295a399ce8b45dabf466177e9ea5b0a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/60bfb16d0bbd43768b40a11a08754eb4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="二、分析过程"><a href="#二、分析过程" class="headerlink" title="二、分析过程"></a>二、分析过程</h3><p><img src="https://img-blog.csdnimg.cn/2b27227c6fd54657ad795f67b73679b6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//初始化dp</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) dp[i][<span class="number">0</span>] = grid[i][<span class="number">0</span>] + dp[i - <span class="number">1</span>][<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) dp[<span class="number">0</span>][j] = grid[<span class="number">0</span>][j] + dp[<span class="number">0</span>][j - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(grid[i][j] + dp[i][j - <span class="number">1</span>], grid[i][j] + dp[i - <span class="number">1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度：O(m <em> n)<br>空间复杂度：O(m </em> n)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小路径和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC动态规划】不同路径II</title>
      <link href="/posts/95fbe822.html"/>
      <url>/posts/95fbe822.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><img src="https://img-blog.csdnimg.cn/594665c3778146fc95b84a124ea16274.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4774862e41734e7d8382a7f3c7c46c44.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h3><p>本题是62.不同路径的障碍版，整体思路大体一致。</p><p>但就算是做过62.不同路径，在做本题也会有感觉遇到障碍无从下手。</p><p>其实只要考虑到，遇到障碍dp[i][j]保持0就可以了。</p><p>也有一些小细节，例如：初始化的部分，很容易忽略了障碍之后应该都是0的情况。</p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = obstacleGrid.<span class="built_in">size</span>();<span class="comment">//row</span></span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = obstacleGrid[<span class="number">0</span>].<span class="built_in">size</span>();<span class="comment">//col</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; vc: dp)</span><br><span class="line">        &#123;</span><br><span class="line">            vc.<span class="built_in">resize</span>(n, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m &amp;&amp; obstacleGrid[i][<span class="number">0</span>] == <span class="number">0</span>; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n &amp;&amp; obstacleGrid[<span class="number">0</span>][j] == <span class="number">0</span>; j++) dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//无障碍</span></span><br><span class="line">                <span class="keyword">if</span>(obstacleGrid[i][j] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>] + dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/19c4eecce544448f9977552dc280f085.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>时间复杂度：O(m <em> n)<br>空间复杂度：O(m </em> n)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【动态规划】判断子序列</title>
      <link href="/posts/aff3005a.html"/>
      <url>/posts/aff3005a.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://img-blog.csdnimg.cn/590e04e50dbf46b18944226a19f38e50.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="双指针解法"><a href="#双指针解法" class="headerlink" title="双指针解法"></a>双指针解法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubsequence</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = t.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; m &amp;&amp; j &lt; n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == t[j])</span><br><span class="line">            &#123;</span><br><span class="line">                ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m == i)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间复杂度：Max(O(m), O(n))<br>空间复杂度：O(1)<br><img src="https://img-blog.csdnimg.cn/dde245eec666446db58d246e7736c692.png" alt="在这里插入图片描述"></p></blockquote><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p><img src="https://img-blog.csdnimg.cn/df0064553c384893841b3d41cc02e64a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubsequence</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> row = s.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> col = t.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; dp;</span><br><span class="line">        dp.<span class="built_in">resize</span>(row);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; col; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i].<span class="built_in">resize</span>(col);</span><br><span class="line">                dp[i][j] = i == <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; row; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; col; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[i][j - <span class="number">1</span>] == <span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s[i - <span class="number">1</span>] == t[j - <span class="number">1</span>] &amp;&amp; dp[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[row - <span class="number">1</span>][col - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3f656d96145047478267546d791d7c82.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>时间复杂度：O(m<em>n)<br>空间复杂度：O(m</em>n)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【动态规划】买股票的最佳时期</title>
      <link href="/posts/32891823.html"/>
      <url>/posts/32891823.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><img src="https://img-blog.csdnimg.cn/d41726f66f6e4d1384a17325bcb8a194.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="二、动态转移方程"><a href="#二、动态转移方程" class="headerlink" title="二、动态转移方程"></a>二、动态转移方程</h3><p><img src="https://img-blog.csdnimg.cn/0f73c5b86918494cbe4e62ec4aae8721.png" alt="在这里插入图片描述"></p><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//动态规划</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; dp;</span><br><span class="line">        dp.<span class="built_in">resize</span>(n, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> minprice = prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            minprice = <span class="built_in">min</span>(minprice, prices[i]);</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>], prices[i] - minprice);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4fa599539d1947c89ce389915d967cf7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 买股票 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【动态规划】打家劫舍</title>
      <link href="/posts/9bdfbd4a.html"/>
      <url>/posts/9bdfbd4a.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><img src="https://img-blog.csdnimg.cn/1e9b993da1494515a2d08dffe0bf69d7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="二、算法分析"><a href="#二、算法分析" class="headerlink" title="二、算法分析"></a>二、算法分析</h3><p><img src="https://img-blog.csdnimg.cn/f2e245e0305e4f76b6579feb4f051ed5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="三、题解代码"><a href="#三、题解代码" class="headerlink" title="三、题解代码"></a>三、题解代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> house_len = nums.<span class="built_in">size</span>();</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; dp;</span><br><span class="line">    dp.<span class="built_in">reserve</span>(house_len);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; house_len; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp[i] = nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp[i] = <span class="built_in">max</span>(nums[i - <span class="number">1</span>], nums[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>], dp[i - <span class="number">2</span>] + nums[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> dp[house_len - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/948eed7b183c4379b743855c3ad60165.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打家劫舍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【动态规划】机器人走m*n宫格</title>
      <link href="/posts/ef355ebc.html"/>
      <url>/posts/ef355ebc.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><img src="https://img-blog.csdnimg.cn/fe062b81db704e92992b869ae53f8665.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Robits</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dp.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; dp[i].<span class="built_in">size</span>(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dp.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; dp[i].<span class="built_in">size</span>(); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; dp[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">    dp.<span class="built_in">resize</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : dp)</span><br><span class="line">    &#123;</span><br><span class="line">        x.<span class="built_in">resize</span>(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Robits</span>(dp);</span><br><span class="line">    <span class="built_in">print</span>(dp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a411e28b295e45178093f58a0b4a7b5f.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【动态规划】最长公共子序列</title>
      <link href="/posts/c520238f.html"/>
      <url>/posts/c520238f.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><p><img src="https://img-blog.csdnimg.cn/357190be8640489d9ae55807e619bf49.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="二、最长公共子序列"><a href="#二、最长公共子序列" class="headerlink" title="二、最长公共子序列"></a>二、最长公共子序列</h3><p><img src="https://img-blog.csdnimg.cn/bfab2f3204e14aee8a48ec6e12ce4c4b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h3><p><img src="https://img-blog.csdnimg.cn/8814d2fa5d79458c854e2bf2411afa93.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e0da71cadd2b4759931731a2657a6c32.png" alt="在这里插入图片描述"></p><h3 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">LSCLen</span><span class="params">(<span class="type">char</span>* arr, <span class="type">char</span>* brr, <span class="type">int</span> m, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//if (nullptr == arr || nullptr == brr) return 0;</span></span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[m] == brr[n])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">LSCLen</span>(arr, brr, m - <span class="number">1</span>, n - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> max1 = <span class="built_in">LSCLen</span>(arr, brr, m - <span class="number">1</span>, n );</span><br><span class="line"><span class="type">int</span> max2 = <span class="built_in">LSCLen</span>(arr, brr, m, n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> max1 &gt; max2 ? max1 : max2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> x[] = <span class="string">&quot;#ABCBDAB&quot;</span>;</span><br><span class="line"><span class="type">char</span> y[] = <span class="string">&quot;#BDCABA&quot;</span>;</span><br><span class="line"><span class="type">int</span> m = <span class="built_in">strlen</span>(x) - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(y) - <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">LSCLen</span>(x, y, m, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a727ade5d31240149fab35454c3f2029.png" alt="在这里插入图片描述"></p><h3 id="五、简单优化"><a href="#五、简单优化" class="headerlink" title="五、简单优化"></a>五、简单优化</h3><p><img src="https://img-blog.csdnimg.cn/efc90a5dd1154d509ebb3db04515c5aa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LSCLen</span><span class="params">(<span class="type">char</span>* arr, <span class="type">char</span>* brr, <span class="type">int</span> m, <span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//if (nullptr == arr || nullptr == brr) return 0;</span></span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dp[m][n] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[m] == brr[n])</span><br><span class="line">&#123;</span><br><span class="line">dp[m][n] =  <span class="built_in">LSCLen</span>(arr, brr, m - <span class="number">1</span>, n - <span class="number">1</span>, dp) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> max1 = <span class="built_in">LSCLen</span>(arr, brr, m - <span class="number">1</span>, n, dp);</span><br><span class="line"><span class="type">int</span> max2 = <span class="built_in">LSCLen</span>(arr, brr, m, n - <span class="number">1</span>, dp);</span><br><span class="line">dp[m][n] = max1 &gt; max2 ? max1 : max2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存放就是m n规模下的最长公共子序列长度</span></span><br><span class="line"><span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintVector</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; vc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; x : vc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; y : x)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; y &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> x[] = <span class="string">&quot;#ABCBDAB&quot;</span>;</span><br><span class="line"><span class="comment">//          01234567</span></span><br><span class="line"><span class="type">char</span> y[] = <span class="string">&quot;#BDCABA&quot;</span>;</span><br><span class="line"><span class="comment">//          0123456</span></span><br><span class="line"><span class="type">int</span> m = <span class="built_in">strlen</span>(x);</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(y);</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;</span><br><span class="line">dp.<span class="built_in">resize</span>(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line">dp[i].<span class="built_in">resize</span>(n, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="built_in">LSCLen</span>(x, y, m - <span class="number">1</span>, n - <span class="number">1</span>, dp) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印dp数组中的值</span></span><br><span class="line"><span class="built_in">PrintVector</span>(dp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2715889aa6da4ad98fe3af42b95c494e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="六、最终输出"><a href="#六、最终输出" class="headerlink" title="六、最终输出"></a>六、最终输出</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LSCLen</span><span class="params">(<span class="type">char</span>* arr, <span class="type">char</span>* brr, <span class="type">int</span> m, <span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; dp, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; sp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//if (nullptr == arr || nullptr == brr) return 0;</span></span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span> || n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dp[m][n] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[m] == brr[n])</span><br><span class="line">&#123;</span><br><span class="line">dp[m][n] =  <span class="built_in">LSCLen</span>(arr, brr, m - <span class="number">1</span>, n - <span class="number">1</span>, dp, sp) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">//斜线移动 1</span></span><br><span class="line">sp[m][n] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> max1 = <span class="built_in">LSCLen</span>(arr, brr, m - <span class="number">1</span>, n, dp, sp);</span><br><span class="line"><span class="type">int</span> max2 = <span class="built_in">LSCLen</span>(arr, brr, m, n - <span class="number">1</span>, dp, sp);</span><br><span class="line"><span class="keyword">if</span> (max1 &gt; max2)</span><br><span class="line">&#123;</span><br><span class="line">dp[m][n] = max1;</span><br><span class="line"><span class="comment">//左移动</span></span><br><span class="line">sp[m][n] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">dp[m][n] = max2;</span><br><span class="line"><span class="comment">//上移动</span></span><br><span class="line">sp[m][n] = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存放就是m n规模下的最长公共子序列长度</span></span><br><span class="line"><span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintVector</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; vc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; x : vc)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; y : x)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; y &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LCS</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; sp, <span class="type">char</span>* arr, <span class="type">int</span> i, <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//斜线移动</span></span><br><span class="line"><span class="keyword">if</span> (sp[i][j] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LCS</span>(sp, arr, i - <span class="number">1</span>, j - <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向左移动</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sp[i][j] == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LCS</span>(sp, arr, i - <span class="number">1</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向上移动</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LCS</span>(sp, arr, i, j - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> x[] = <span class="string">&quot;#ABCBDAB&quot;</span>;</span><br><span class="line"><span class="comment">//          01234567</span></span><br><span class="line"><span class="type">char</span> y[] = <span class="string">&quot;#BDCABA&quot;</span>;</span><br><span class="line"><span class="comment">//          0123456</span></span><br><span class="line"><span class="type">int</span> m = <span class="built_in">strlen</span>(x);</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(y);</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp, sp;</span><br><span class="line">dp.<span class="built_in">resize</span>(m);</span><br><span class="line">sp.<span class="built_in">resize</span>(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line">dp[i].<span class="built_in">resize</span>(n, <span class="number">0</span>);</span><br><span class="line">sp[i].<span class="built_in">resize</span>(n, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="built_in">LSCLen</span>(x, y, m - <span class="number">1</span>, n - <span class="number">1</span>, dp, sp) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印dp数组中的值</span></span><br><span class="line"><span class="built_in">PrintVector</span>(dp);</span><br><span class="line"><span class="comment">//打印sp方向数组</span></span><br><span class="line"><span class="built_in">PrintVector</span>(sp);</span><br><span class="line"><span class="comment">//根据sp打印最长公共子序列</span></span><br><span class="line"><span class="built_in">LCS</span>(sp, x, m - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/de93c335832c4695a16ebed16f2f517c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【分治策略】打印子集</title>
      <link href="/posts/e620f950.html"/>
      <url>/posts/e620f950.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><blockquote><p>通过使用分治策略，打印一个数组元素的所有子集<br>输入：1 2 3<br>输出：<br>1 2 3<br>1 2<br>1 3<br>1<br>2 3<br>2<br>3</p></blockquote><h3 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h3><p>通过这个程序的思路进行分析</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i &gt;= n) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fun</span>(i + <span class="number">1</span>, n);</span><br><span class="line"><span class="built_in">fun</span>(i + <span class="number">1</span>, n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fun</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序的递归活动如下<br><img src="https://img-blog.csdnimg.cn/bc54a10cb1fc4ebb8b6ee9eb63d386df.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>我们在递推的过程中将brr[i] = 1; 回归的过程中将brr[i] = 0; 最终通过brr[i] == 1 ？ 打印 ： 不打印；<br><img src="https://img-blog.csdnimg.cn/3d98a736342948639cc3a8c194016e08.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印子集</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSon</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span>* brr,<span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; right; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (brr[i] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">brr[left] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">PrintSon</span>(arr, brr, left + <span class="number">1</span>, right);</span><br><span class="line">brr[left] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">PrintSon</span>(arr, brr, left + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> brr[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">PrintSon</span>(arr, brr, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/41a09195efbc4781a58859d292e675a0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打印子集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【分治策略】全排列</title>
      <link href="/posts/91db4d8e.html"/>
      <url>/posts/91db4d8e.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p><img src="https://img-blog.csdnimg.cn/213880e37aba43da8b85432c19c21977.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="二、思路分析"><a href="#二、思路分析" class="headerlink" title="二、思路分析"></a>二、思路分析</h3><p><code>若R = &#123;1, 2, 3&#125; 对应的全排列就是</code><br><code>1 3 2</code><br><code>2 1 3</code><br><code>2 3 1</code><br><code>3 2 1</code><br><code>3 1 2</code></p><p><strong>进行层次分析：</strong><br><img src="https://img-blog.csdnimg.cn/b01d400de95448329f9b655bedfcbb39.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="R0 Perm(R)"></p><h3 id="三、递归程序"><a href="#三、递归程序" class="headerlink" title="三、递归程序"></a>三、递归程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Perm</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left == right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//确定只剩下一个元素时</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= right; ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//需要确定相对首元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(arr[left], arr[i]);</span><br><span class="line"><span class="built_in">Perm</span>(arr, left + <span class="number">1</span>, right);</span><br><span class="line"><span class="built_in">swap</span>(arr[left], arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span> ,<span class="number">2</span> ,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">Perm</span>(arr, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/726e3c02438741a7b565d4842d8b67c4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 全排列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】一维最接近点对问题</title>
      <link href="/posts/83be6bb5.html"/>
      <url>/posts/83be6bb5.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h3><blockquote><ul><li><code>一维最接近点对问题：也就是寻找无序不重复数组的最小差值</code></li><li>解题思想：分治策略</li></ul></blockquote><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p><img src="https://img-blog.csdnimg.cn/33407394ebb5434fb1b8f736c311b747.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/e66d7dac41a54f8eb9ddc71b1611363c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/de0fe61e8235435eabdfae2fa7eb0174.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寻找非负整数序列(不重复)的最小差值</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="comment">//两边向中间划分</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">OnePartition</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> tmp = arr[left];</span><br><span class="line"><span class="type">int</span> i = left;</span><br><span class="line"><span class="type">int</span> j = right;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt; tmp)</span><br><span class="line">&#123;</span><br><span class="line">--j;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= tmp)</span><br><span class="line">&#123;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">arr[j] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = tmp;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//findK</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindK</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left == right &amp;&amp; k == <span class="number">1</span>) <span class="keyword">return</span> arr[left];</span><br><span class="line"><span class="type">int</span> mid = <span class="built_in">OnePartition</span>(arr, left, right);</span><br><span class="line"><span class="type">int</span> kmin = mid - left + <span class="number">1</span>;<span class="comment">//arr[mid]是kmin小</span></span><br><span class="line"><span class="comment">//第k小在mid左边(arr, left, mid, k)</span></span><br><span class="line"><span class="keyword">if</span> (k &lt;= kmin)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FindK</span>(arr, left, mid, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//k小在mid右边</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FindK</span>(arr, mid + <span class="number">1</span>, right, k - kmin);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max_arr</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Min_arr</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> min = arr[left];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= right; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; min)</span><br><span class="line">&#123;</span><br><span class="line">min = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? b : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">Min</span>(a, b), c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindMS</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (right &lt;= left) <span class="keyword">return</span> INT_MAX;</span><br><span class="line"><span class="comment">//优化分割（两边近似等长）</span></span><br><span class="line"><span class="type">int</span> k = (right - left + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">FindK</span>(arr, left, right, k);</span><br><span class="line"><span class="type">int</span> midpos = left + (k - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//左区间内</span></span><br><span class="line"><span class="type">int</span> d1 = <span class="built_in">FindMS</span>(arr, left, midpos);</span><br><span class="line"><span class="comment">//右区间内</span></span><br><span class="line"><span class="type">int</span> d2 = <span class="built_in">FindMS</span>(arr, midpos + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line"><span class="comment">//两个区间之间差值</span></span><br><span class="line"><span class="type">int</span> maxleft = <span class="built_in">Max_arr</span>(arr, left, midpos);</span><br><span class="line"><span class="type">int</span> minright = <span class="built_in">Min_arr</span>(arr, midpos + <span class="number">1</span>, right);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Min</span>(d1, d2, minright - maxleft);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindMinSub</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">nullptr</span> || len &lt; <span class="number">2</span> ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FindMS</span>(arr, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">56</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">45</span>, <span class="number">89</span>, <span class="number">86</span>, <span class="number">46</span>, <span class="number">57</span>, <span class="number">26</span>, <span class="number">33</span> &#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">cout &lt;&lt; <span class="built_in">FindMinSub</span>(arr, len) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/edc0adb9aeb5412f95b157f0b8fa16b4.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治策略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法】分治策略</title>
      <link href="/posts/488ec75.html"/>
      <url>/posts/488ec75.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、关于分治策略"><a href="#一、关于分治策略" class="headerlink" title="一、关于分治策略"></a>一、关于分治策略</h3><p><strong>分治策略：</strong> 简单来说就是将问题的规模变小，问题本身不变</p><p><strong>解题步骤：</strong></p><ul><li><strong>分解：</strong> 将原问题划分成子问题，规模变小</li><li><strong>递归：</strong> 递归求解子问题，若子问题规模足够小，此时停止递归，直接求解</li><li><strong>合并：</strong> 将小规模的解合并成原规模的解</li></ul><p><strong>注意： 分治策略是一种处理问题的思想，递归是一种算法。</strong></p><hr><h3 id="二、使用分治策略-递归解题"><a href="#二、使用分治策略-递归解题" class="headerlink" title="二、使用分治策略+递归解题"></a>二、使用分治策略+递归解题</h3><h4 id="（1）快速排序"><a href="#（1）快速排序" class="headerlink" title="（1）快速排序"></a>（1）快速排序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//快排</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickSort</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//从左向右划分（适用于单链表）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LeftToRight</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> j = left - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> i = left;</span><br><span class="line"><span class="type">int</span> tmp = arr[left];</span><br><span class="line"><span class="keyword">while</span> (i &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt;= tmp)</span><br><span class="line">&#123;</span><br><span class="line">++j;</span><br><span class="line"><span class="built_in">swap</span>(arr[i], arr[j]);</span><br><span class="line">&#125;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(arr[left], arr[j]);</span><br><span class="line"><span class="keyword">if</span> (left &lt; j - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LeftToRight</span>(arr, left, j - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j + <span class="number">1</span> &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LeftToRight</span>(arr, j + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//两边向中间划分</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">OnePartition</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> tmp = arr[left];</span><br><span class="line"><span class="type">int</span> i = left;</span><br><span class="line"><span class="type">int</span> j = right;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt; tmp)</span><br><span class="line">&#123;</span><br><span class="line">--j;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= tmp)</span><br><span class="line">&#123;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">arr[j] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = tmp;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//递归快排</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">nullptr</span> || left &lt; <span class="number">0</span> || right &lt; <span class="number">0</span> || right &lt; left)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (left &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一次划分</span></span><br><span class="line"><span class="type">int</span> mid = <span class="built_in">OnePartition</span>(arr, left, right);</span><br><span class="line"><span class="built_in">quicksort</span>(arr, left, mid - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">quicksort</span>(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非递归</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NonRecursive</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">nullptr</span> || left &lt; <span class="number">0</span> || right &lt; <span class="number">0</span> || right &lt; left)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用栈</span></span><br><span class="line">stack&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; st;</span><br><span class="line">st.<span class="built_in">push</span>(std::<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(left, right));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; top = st.<span class="built_in">top</span>();</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> mid = <span class="built_in">OnePartition</span>(arr, top.first, top.second);</span><br><span class="line"><span class="keyword">if</span> (top.first &lt; mid - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左边</span></span><br><span class="line">st.<span class="built_in">push</span>(std::<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(top.first, mid - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mid + <span class="number">1</span> &lt; top.second)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//右边</span></span><br><span class="line">st.<span class="built_in">push</span>(std::<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(mid + <span class="number">1</span>, top.second));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">12</span>, <span class="number">23</span>, <span class="number">56</span>, <span class="number">45</span>, <span class="number">78</span>, <span class="number">42</span>, <span class="number">12</span>, <span class="number">45</span>, <span class="number">42</span>, <span class="number">12</span>&#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">QuickSort q;</span><br><span class="line"><span class="comment">//q.NonRecursive(arr, 0, len - 1);</span></span><br><span class="line">q.<span class="built_in">LeftToRight</span>(arr, <span class="number">0</span> , len - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span>&amp; x : arr)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="（2）寻找无序不重复的数组第K小"><a href="#（2）寻找无序不重复的数组第K小" class="headerlink" title="（2）寻找无序不重复的数组第K小"></a>（2）寻找无序不重复的数组第K小</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//寻找不重复的第K小</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="comment">//两边向中间划分</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">OnePartition</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> tmp = arr[left];</span><br><span class="line"><span class="type">int</span> i = left;</span><br><span class="line"><span class="type">int</span> j = right;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt; tmp)</span><br><span class="line">&#123;</span><br><span class="line">--j;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= tmp)</span><br><span class="line">&#123;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">arr[j] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = tmp;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//findK</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindK</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left == right &amp;&amp; k == <span class="number">1</span>) <span class="keyword">return</span> arr[left];</span><br><span class="line"><span class="type">int</span> mid = <span class="built_in">OnePartition</span>(arr, left, right);</span><br><span class="line"><span class="type">int</span> kmin = mid - left + <span class="number">1</span>;<span class="comment">//arr[mid]是kmin小</span></span><br><span class="line"><span class="comment">//第k小在mid左边(arr, left, mid, k)</span></span><br><span class="line"><span class="keyword">if</span> (k &lt;= kmin)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FindK</span>(arr, left, mid, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//k小在mid右边</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FindK</span>(arr, mid + <span class="number">1</span>, right, k - kmin);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//寻找不重复的第K小</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindK_min</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == arr || len &lt;= <span class="number">0</span> || k &gt; len)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FindK</span>(arr, <span class="number">0</span>, len - <span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">56</span>, <span class="number">12</span>, <span class="number">23</span>, <span class="number">45</span>, <span class="number">89</span>, <span class="number">86</span>, <span class="number">46</span>, <span class="number">57</span>, <span class="number">26</span>, <span class="number">33</span>&#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="number">10</span>; ++k)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">FindK_min</span>(arr, len, k)&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="（3）归并排序"><a href="#（3）归并排序" class="headerlink" title="（3）归并排序"></a>（3）归并排序</h4><p>归并排序的思想：类似于二叉树的后序遍历（根左右）。（递归过程中分组，回归过程中排序合并数据）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序（递归）</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="comment">//有序合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Merge</span><span class="params">(<span class="type">int</span>* src, <span class="type">int</span>* des, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = left;</span><br><span class="line"><span class="type">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> k = left;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line">des[k++] = src[i] &lt;= src[j] ? src[i++] : src[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">&#123;</span><br><span class="line">des[k++] = src[i++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (j &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line">des[k++] = src[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Copy</span><span class="params">(<span class="type">int</span>* src, <span class="type">int</span>* des, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == des || <span class="literal">nullptr</span> == src) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">&#123;</span><br><span class="line">src[left] = des[left];</span><br><span class="line">++left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//归并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergePass</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span>* des, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">MergePass</span>(arr, des, left, mid);</span><br><span class="line"><span class="built_in">MergePass</span>(arr, des, mid + <span class="number">1</span>, right);</span><br><span class="line"><span class="comment">//有序合并到des</span></span><br><span class="line"><span class="built_in">Merge</span>(arr, des, left, mid, right);</span><br><span class="line"><span class="comment">//有序des复制到arr</span></span><br><span class="line"><span class="built_in">Copy</span>(arr, des, left, right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergerSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == arr || len &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span>* tmp = <span class="keyword">new</span> <span class="type">int</span>[len];</span><br><span class="line"><span class="built_in">MergePass</span>(arr,tmp , <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">delete</span>[] tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">12</span>, <span class="number">23</span>, <span class="number">56</span>, <span class="number">45</span>, <span class="number">78</span>, <span class="number">42</span>, <span class="number">12</span>, <span class="number">45</span>, <span class="number">42</span>, <span class="number">12</span> &#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">MergerSort</span>(arr, len);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span>&amp; x : arr)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治策略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】31. 下一个排列</title>
      <link href="/posts/26655e9.html"/>
      <url>/posts/26655e9.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://img-blog.csdnimg.cn/12abeb10ac23432e9c7f8bd31aac31db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/74c588250a744ce4803eb4b645a063ed.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p><img src="https://img-blog.csdnimg.cn/926f12c1359d4b93983bfd6df014cff9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//反转降序的后部分</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(nums[left++], nums[right--]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//反遍历，找到非降序的首元素</span></span><br><span class="line">        <span class="type">int</span> i = len - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[i + <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &lt;= nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                --j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">swap</span>(nums[i], nums[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(nums ,i + <span class="number">1</span>, len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】27. 移除元素</title>
      <link href="/posts/254fedd5.html"/>
      <url>/posts/254fedd5.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://img-blog.csdnimg.cn/c6e63dd63adf4990b2d3f4361b3923f4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/12181bcfb0db45d8b923fa4e67108c1e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>快慢指针</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//快慢指针</span></span><br><span class="line">        <span class="type">int</span> fast = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != val)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">            fast++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】26. 删除有序数组中的重复项</title>
      <link href="/posts/a607f85f.html"/>
      <url>/posts/a607f85f.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://img-blog.csdnimg.cn/0b743d55748f4ca39792fdaaf4dd1727.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b8c55ee6cbae485ea98b1d8543e95b42.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>快慢指针；</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">time: O(n)</span></span><br><span class="line"><span class="comment">space:O(1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">1</span>) <span class="keyword">return</span> len;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> fast = <span class="number">1</span>, slow = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(fast &lt; len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast] != nums[fast - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                nums[slow] = nums[fast];</span><br><span class="line">                ++slow;</span><br><span class="line">            &#125;</span><br><span class="line">            ++fast;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】11. 盛最多水的容器</title>
      <link href="/posts/ca2499bc.html"/>
      <url>/posts/ca2499bc.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://img-blog.csdnimg.cn/0e903955b87848d38829eeb1c2d4c040.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5a49c41404584b6d859b0312ab468d2f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>思路：两个边界哪个小，收缩哪个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> maxarea = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> cur_area = <span class="built_in">min</span>(height[left], height[right]) * (right - left);</span><br><span class="line">            maxarea = <span class="built_in">max</span>(maxarea, cur_area);</span><br><span class="line">            height[left] &lt; height[right] ? ++left : --right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxarea;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0356aa66ca2d46c6a189355242c2e397.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】3. 无重复字符的最长子串</title>
      <link href="/posts/2e63d294.html"/>
      <url>/posts/2e63d294.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://img-blog.csdnimg.cn/87540743fe634e0f88513af760a67a73.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//保存字符</span></span><br><span class="line">        unordered_set&lt;<span class="type">char</span>&gt; usc;</span><br><span class="line">        <span class="type">int</span> maxlen = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mark = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                usc.<span class="built_in">erase</span>(s[i - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//该字符未插入unordered_set</span></span><br><span class="line">            <span class="keyword">while</span> (mark + <span class="number">1</span> &lt; len &amp;&amp; !usc.<span class="built_in">count</span>(s[mark + <span class="number">1</span>]))</span><br><span class="line">            &#123;</span><br><span class="line">                usc.<span class="built_in">insert</span>(s[mark + <span class="number">1</span>]);</span><br><span class="line">                ++mark;</span><br><span class="line">            &#125;</span><br><span class="line">            maxlen = <span class="built_in">max</span>(maxlen, mark - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxlen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9c96e6152b754323a046daf4f05324a0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】4. 寻找两个正序数组的中位数</title>
      <link href="/posts/ae91f96f.html"/>
      <url>/posts/ae91f96f.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://img-blog.csdnimg.cn/b5b2ffe51f464ef6adca356d64f199b7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> totalsize = nums1.<span class="built_in">size</span>() + nums2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (totalsize == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> midpos = totalsize / <span class="number">2</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; newnums;</span><br><span class="line">        newnums.<span class="built_in">reserve</span>(totalsize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; x : nums1)</span><br><span class="line">        &#123;</span><br><span class="line">            newnums.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; x : nums2)</span><br><span class="line">        &#123;</span><br><span class="line">            newnums.<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">sort</span>(newnums.<span class="built_in">begin</span>(), newnums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span> (totalsize % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">double</span>)(newnums[midpos - <span class="number">1</span>] + newnums[midpos]) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newnums[midpos];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5540e762618c44519ff85735c12fa3ba.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】53. 最大子数组和</title>
      <link href="/posts/36dcf79a.html"/>
      <url>/posts/36dcf79a.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://img-blog.csdnimg.cn/0832f6b515124c5191aa9b5596783915.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解一：贪心"><a href="#题解一：贪心" class="headerlink" title="题解一：贪心"></a>题解一：贪心</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-2147483648</span>;</span><br><span class="line">        <span class="comment">//当前和</span></span><br><span class="line">        <span class="type">int</span> cur_sum = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//最大和</span></span><br><span class="line">        <span class="type">int</span> max_sum = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            cur_sum = <span class="built_in">max</span>(nums[i], cur_sum + nums[i]);</span><br><span class="line">            max_sum = <span class="built_in">max</span>(max_sum, cur_sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b4657b6c6ac04f12a890e69e8541ec1e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解二：动态规划"><a href="#题解二：动态规划" class="headerlink" title="题解二：动态规划"></a>题解二：动态规划</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pre = <span class="number">0</span>, max_sum = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;x: nums) &#123;</span><br><span class="line">            pre = <span class="built_in">max</span>(pre + x, x);</span><br><span class="line">            max_sum = <span class="built_in">max</span>(max_sum, pre);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2ff407a4679c437f8504c460ae65dc9c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】剑指 Offer 04. 二维数组中的查找</title>
      <link href="/posts/678a66f0.html"/>
      <url>/posts/678a66f0.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://img-blog.csdnimg.cn/7169e045b1134d748eaec16b463cbca1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解一：暴力for"><a href="#题解一：暴力for" class="headerlink" title="题解一：暴力for"></a>题解一：暴力for</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">findNumberIn2DArray</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ln = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(ln == <span class="number">0</span> ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> lm = matrix.<span class="built_in">front</span>().<span class="built_in">size</span>();</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ln; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; lm; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] == target)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ec767e783751417cb86145fa3426220b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解二：缩小范围"><a href="#题解二：缩小范围" class="headerlink" title="题解二：缩小范围"></a>题解二：缩小范围</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">findNumberIn2DArray</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ln = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(ln == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> lm = matrix.<span class="built_in">front</span>().<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">bool</span> res = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> row = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> col = lm - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(row &lt; ln &amp;&amp; col &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[row][col] == target)</span><br><span class="line">            &#123;</span><br><span class="line">                res = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(matrix[row][col] &gt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                --col;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ++row;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/234a3393ffb84ce8a0d8020927d58788.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】数组中重复的数</title>
      <link href="/posts/3b8bddfc.html"/>
      <url>/posts/3b8bddfc.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://img-blog.csdnimg.cn/da3b2fff546e43ffaa4d759da5f6b4cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解：修改了数组原数据"><a href="#题解：修改了数组原数据" class="headerlink" title="题解：修改了数组原数据"></a>题解：修改了数组原数据</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findRepeatNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(nums[i] != i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] == nums[nums[i]])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> nums[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//交换</span></span><br><span class="line">                std::<span class="built_in">swap</span>(nums[i], nums[nums[i]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b6607d5d1bc049a398b8d28d8c30a102.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】AVL树的搭建及插入结点</title>
      <link href="/posts/23350b35.html"/>
      <url>/posts/23350b35.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、实例"><a href="#一、实例" class="headerlink" title="一、实例"></a>一、实例</h3><p>我们通过一个实例来说明整个结点的插入导致失衡的过程</p><h4 id="（1）AVL初始状态"><a href="#（1）AVL初始状态" class="headerlink" title="（1）AVL初始状态"></a>（1）AVL初始状态</h4><p><img src="https://img-blog.csdnimg.cn/ba8345ba27824ffd847d817cacf1651b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）不失平衡的插入"><a href="#（2）不失平衡的插入" class="headerlink" title="（2）不失平衡的插入"></a>（2）不失平衡的插入</h4><p><img src="https://img-blog.csdnimg.cn/3162003ea3eb459aaf8a4d6e1547285c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（3）失去平衡的插入"><a href="#（3）失去平衡的插入" class="headerlink" title="（3）失去平衡的插入"></a>（3）失去平衡的插入</h4><p>我们在(2)的基础上增加了以下两种情况</p><p><img src="https://img-blog.csdnimg.cn/4feaceb8543c4c84abfec71e2c720cfb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="##### 1."><br> <strong>注意：</strong> 上图的结点的平衡因素只设置了一部分</p><h3 id="二、构建过程分析"><a href="#二、构建过程分析" class="headerlink" title="二、构建过程分析"></a>二、构建过程分析</h3><h4 id="（1）大体流程"><a href="#（1）大体流程" class="headerlink" title="（1）大体流程"></a>（1）大体流程</h4><p><img src="https://img-blog.csdnimg.cn/f9726152da324df59865a960df579c82.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）具体函数功能"><a href="#（2）具体函数功能" class="headerlink" title="（2）具体函数功能"></a>（2）具体函数功能</h4><h5 id="1-insert"><a href="#1-insert" class="headerlink" title="1. insert"></a>1. insert</h5><p>该函数的主要功能就是根据二叉搜索树的insert函数增加了个PassBalance函数进行结点的平衡<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(AVLTree&amp; tree, ElemType val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">tree = <span class="built_in">BuyNode</span>(val);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">AVLNode* pa = <span class="literal">nullptr</span>;</span><br><span class="line">AVLNode* ptr = tree;</span><br><span class="line"><span class="keyword">while</span> (ptr != <span class="literal">nullptr</span> &amp;&amp; ptr-&gt;key != val)</span><br><span class="line">&#123;</span><br><span class="line">pa = ptr;</span><br><span class="line">ptr = val &lt; ptr-&gt;key ? ptr-&gt;leftchild : ptr-&gt;rightchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//说明是因存在而退出循环</span></span><br><span class="line"><span class="keyword">if</span> (ptr != <span class="literal">nullptr</span> &amp;&amp; ptr-&gt;key == val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//申请结点</span></span><br><span class="line">ptr = <span class="built_in">BuyNode</span>(val);</span><br><span class="line">ptr-&gt;parent = pa;</span><br><span class="line"><span class="keyword">if</span> (ptr-&gt;key &lt; pa-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">pa-&gt;leftchild = ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pa-&gt;rightchild = ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入结点后，进入平衡调整</span></span><br><span class="line"><span class="built_in">PassBalance</span>(tree, ptr);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="2-PassBalance函数"><a href="#2-PassBalance函数" class="headerlink" title="2. PassBalance函数"></a>2. PassBalance函数</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//平衡回溯直接修改平衡因子</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PassBalance</span><span class="params">(AVLTree&amp; tree, AVLNode* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AVLNode* pa = ptr-&gt;parent;</span><br><span class="line"><span class="type">bool</span> tag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (pa != <span class="literal">nullptr</span> &amp;&amp; tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//左边插入的结点</span></span><br><span class="line"><span class="keyword">if</span> (ptr == pa-&gt;leftchild)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//修改左边的平衡因子</span></span><br><span class="line"><span class="keyword">switch</span> (pa-&gt;balance)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: pa-&gt;balance = <span class="number">-1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line">pa-&gt;balance = <span class="number">0</span>; </span><br><span class="line">tag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>: </span><br><span class="line"><span class="comment">//pa-&gt;balance = -2;</span></span><br><span class="line"><span class="comment">//进行左平衡</span></span><br><span class="line"><span class="built_in">LeftBalance</span>(tree, pa); <span class="comment">//pa是第一层结点</span></span><br><span class="line">tag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右边插入的结点</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//修改右边的平衡因子</span></span><br><span class="line"><span class="keyword">switch</span> (pa-&gt;balance)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: pa-&gt;balance = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line"><span class="comment">//pa-&gt;balance = 2;</span></span><br><span class="line"><span class="comment">//进行右平衡</span></span><br><span class="line"><span class="built_in">RightBalance</span>(tree, pa);</span><br><span class="line">tag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>: </span><br><span class="line">pa-&gt;balance = <span class="number">0</span>; </span><br><span class="line">tag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ptr = pa;</span><br><span class="line">pa = pa-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1258e91af05648278c56d70d791c0511.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h5 id="3-LeftBalance函数"><a href="#3-LeftBalance函数" class="headerlink" title="3. LeftBalance函数"></a>3. LeftBalance函数</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//平衡左子树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LeftBalance</span><span class="params">(AVLTree&amp; tree, AVLNode* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AVLNode* leftsub = ptr-&gt;leftchild;</span><br><span class="line">AVLNode* rightsub = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (leftsub-&gt;balance)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>: </span><br><span class="line"><span class="comment">//直线状：单右旋</span></span><br><span class="line">ptr-&gt;balance = <span class="number">0</span>;</span><br><span class="line">leftsub-&gt;balance = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">RotateRight</span>(tree, ptr);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">//折线状：双旋转</span></span><br><span class="line">rightsub = leftsub-&gt;rightchild;</span><br><span class="line"><span class="keyword">switch</span> (rightsub-&gt;balance)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">leftsub-&gt;balance = <span class="number">0</span>;</span><br><span class="line">ptr-&gt;balance = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">leftsub-&gt;balance = <span class="number">-1</span>;</span><br><span class="line">ptr-&gt;balance = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">leftsub-&gt;balance = <span class="number">0</span>;</span><br><span class="line">ptr-&gt;balance = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">rightsub-&gt;balance = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">RotateLeft</span>(tree, leftsub);</span><br><span class="line"><span class="built_in">RotateRight</span>(tree, ptr);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-RightBalance函数"><a href="#4-RightBalance函数" class="headerlink" title="4.  RightBalance函数"></a>4.  RightBalance函数</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//平衡右子树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RightBalance</span><span class="params">(AVLTree&amp; tree, AVLNode* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AVLNode* rightsub = ptr-&gt;rightchild;</span><br><span class="line">AVLNode* leftsub = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">switch</span> (rightsub-&gt;balance)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//直线</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">rightsub-&gt;balance = <span class="number">0</span>;</span><br><span class="line">ptr-&gt;balance = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">RotateLeft</span>(tree, ptr);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//折线:双旋转</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">leftsub = rightsub-&gt;leftchild;</span><br><span class="line"><span class="comment">//修改双旋因子</span></span><br><span class="line"><span class="keyword">switch</span> (leftsub-&gt;balance)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">rightsub-&gt;balance = <span class="number">0</span>;</span><br><span class="line">ptr-&gt;balance = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">rightsub-&gt;balance = <span class="number">0</span>;</span><br><span class="line">ptr-&gt;balance = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">rightsub-&gt;balance = <span class="number">1</span>;</span><br><span class="line">ptr-&gt;balance = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">leftsub-&gt;balance = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">RotateRight</span>(tree, rightsub);</span><br><span class="line"><span class="built_in">RotateLeft</span>(tree, ptr);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">16</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">26</span>,<span class="number">18</span>,<span class="number">14</span>,<span class="number">15</span>&#125;;</span><br><span class="line">AVLTree tree = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : arr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">insert</span>(tree, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Order</span>(tree);</span><br><span class="line"><span class="built_in">Clear</span>(tree);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4be2a17d6c7845d69963ea9120f255e1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AVL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】AVL树（二叉搜索平衡树）</title>
      <link href="/posts/fc988e51.html"/>
      <url>/posts/fc988e51.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、引入AVL树"><a href="#一、引入AVL树" class="headerlink" title="一、引入AVL树"></a>一、引入AVL树</h3><blockquote><p><strong>AVL树是二叉搜索树的升级版，是为了优化整个二叉树的结构并且提高查找速率的一棵特殊的二叉搜索树。平衡二字体现了该树会对插入/删除的结点后进行自动“平衡”（通过旋转进行实现）。</strong></p></blockquote><h3 id="二、AVL树的要求"><a href="#二、AVL树的要求" class="headerlink" title="二、AVL树的要求"></a>二、AVL树的要求</h3><blockquote><p><strong>平衡状态：</strong>  <code>当前结点的右子树深度 - 左子树深度 == -1 or 0 or 1</code></p></blockquote><h3 id="三、AVL树结构设计"><a href="#三、AVL树结构设计" class="headerlink" title="三、AVL树结构设计"></a>三、AVL树结构设计</h3><p><code>AVL.h</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> AVL_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AVL_H</span></span><br><span class="line"><span class="keyword">using</span> ElemType = <span class="type">int</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">AVLNode</span></span><br><span class="line">&#123;</span><br><span class="line">ElemType key;</span><br><span class="line">AVLNode* leftchild;</span><br><span class="line">AVLNode* rightchild;</span><br><span class="line">AVLNode* parent;</span><br><span class="line"><span class="type">int</span> balance;</span><br><span class="line">&#125;AVLNode, *AVLTree;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="四、旋转"><a href="#四、旋转" class="headerlink" title="四、旋转"></a>四、旋转</h3><blockquote><p><strong><code>当插入结点时，会出现以下情况：使树失衡，对此有两种应对策略（实质上都是旋转），通过旋转能够对失衡的树进行再次平衡</code></strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/97e1b935eddd49c18604f5d2bed7a1e4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="五、单左旋"><a href="#五、单左旋" class="headerlink" title="五、单左旋"></a>五、单左旋</h3><h4 id="（1）单左旋三大关键步骤"><a href="#（1）单左旋三大关键步骤" class="headerlink" title="（1）单左旋三大关键步骤"></a>（1）单左旋三大关键步骤</h4><p><img src="https://img-blog.csdnimg.cn/c6388b38f17b4e5098a81fd86cc60b92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）单左旋完整过程"><a href="#（2）单左旋完整过程" class="headerlink" title="（2）单左旋完整过程"></a>（2）单左旋完整过程</h4><p><img src="https://img-blog.csdnimg.cn/24a0d229b7ba475ea87e01477f106c0b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e872f467ab7240ce8970e570edca4d0e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/e08d2c40bb3a479583097f842be4579b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d673b8c29d3c47cb98b4c6a617cc4b4b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0de2ee0c4e1e4125b5ef5d9f05cbbcbf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（3）单左旋代码"><a href="#（3）单左旋代码" class="headerlink" title="（3）单左旋代码"></a>（3）单左旋代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单左旋</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* root是根节点</span></span><br><span class="line"><span class="comment">* ptr指向即将左旋的旧根</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateLeft</span><span class="params">(AVLTree&amp; root, AVLNode* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AVLNode* newroot = ptr-&gt;rightchild;</span><br><span class="line">newroot-&gt;parent = ptr-&gt;parent;</span><br><span class="line"></span><br><span class="line">ptr-&gt;rightchild = newroot-&gt;leftchild;</span><br><span class="line"><span class="keyword">if</span> (newroot-&gt;leftchild != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">newroot-&gt;leftchild-&gt;parent = ptr;</span><br><span class="line">&#125;</span><br><span class="line">newroot-&gt;leftchild = ptr;</span><br><span class="line"><span class="comment">//改变原有ptr的双亲的左右孩子指向（newroot）</span></span><br><span class="line"><span class="comment">//ptr就是root</span></span><br><span class="line"><span class="keyword">if</span> (ptr == root)</span><br><span class="line">&#123;</span><br><span class="line">root = newroot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr-&gt;parent-&gt;leftchild == ptr)</span><br><span class="line">&#123;</span><br><span class="line">ptr-&gt;parent-&gt;leftchild = newroot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ptr-&gt;parent-&gt;rightchild = newroot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ptr-&gt;parent = newroot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、单右旋"><a href="#六、单右旋" class="headerlink" title="六、单右旋"></a>六、单右旋</h3><h4 id="（1）单右旋代码"><a href="#（1）单右旋代码" class="headerlink" title="（1）单右旋代码"></a>（1）单右旋代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单右旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RotateRight</span><span class="params">(AVLTree&amp; root, AVLNode* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">AVLNode* newroot = ptr-&gt;leftchild;</span><br><span class="line">newroot-&gt;parent = ptr-&gt;parent;</span><br><span class="line">ptr-&gt;leftchild = newroot-&gt;rightchild;</span><br><span class="line"><span class="keyword">if</span> (newroot-&gt;rightchild != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">newroot-&gt;rightchild-&gt;parent = ptr;</span><br><span class="line">&#125;</span><br><span class="line">newroot-&gt;rightchild = ptr;</span><br><span class="line"><span class="keyword">if</span> (ptr == root)</span><br><span class="line">&#123;</span><br><span class="line">root = newroot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr-&gt;parent-&gt;leftchild == ptr)</span><br><span class="line">&#123;</span><br><span class="line">ptr-&gt;parent-&gt;leftchild = newroot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ptr-&gt;parent-&gt;rightchild = newroot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ptr-&gt;parent = newroot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、双旋转"><a href="#六、双旋转" class="headerlink" title="六、双旋转"></a>六、双旋转</h3><blockquote><p><strong><code>此时遇到以下情况单纯的使用一种旋转已经无法进行平衡，双旋转就是意味着需要用到左旋和右旋进行两次的旋转才能将失衡的树进行再次平衡。</code></strong></p></blockquote><p>出现以下状况时候，必须要使用双旋转进行平衡树。</p><h4 id="（1）先右旋，再左旋"><a href="#（1）先右旋，再左旋" class="headerlink" title="（1）先右旋，再左旋"></a>（1）先右旋，再左旋</h4><p><img src="https://img-blog.csdnimg.cn/0f5c112dd8864f9ba94e1ceb2bb2b296.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/65de04e16062437b9c189754546a4e7e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/23b0b519d26b41f79953ecaba508f4cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）先左旋，再右旋"><a href="#（2）先左旋，再右旋" class="headerlink" title="（2）先左旋，再右旋"></a>（2）先左旋，再右旋</h4><p><img src="https://img-blog.csdnimg.cn/e16c5093c020486eaa340b4fd850ac3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>未完待续，下节通过具体实例来实现整个AVL树的搭建及插入结点分析。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AVL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC数组】颜色分类</title>
      <link href="/posts/1b805dd4.html"/>
      <url>/posts/1b805dd4.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="https://img-blog.csdnimg.cn/deab5171fad4467aa22a35b1c7210b42.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解一：计数填充法"><a href="#题解一：计数填充法" class="headerlink" title="题解一：计数填充法"></a>题解一：计数填充法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sortColors</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//分别计算出0 1 2的个数，在使用其个数进行填充即可</span></span><br><span class="line">        <span class="type">int</span> zero = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> one = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> two = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                ++zero;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                ++one;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ++two;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k &lt; zero)&#123;</span><br><span class="line">            nums[k++] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(k &lt; zero + one)&#123;</span><br><span class="line">            nums[k++] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(k &lt; nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            nums[k++] = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f083718e8b004eb78e13274bdc2fe206.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解二：单指针"><a href="#题解二：单指针" class="headerlink" title="题解二：单指针"></a>题解二：单指针</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sortColors</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(size &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> ptr = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//将所有的0放在前面</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[ptr], nums[i]);</span><br><span class="line">                ++ptr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将所有的1放在中间</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = ptr; i &lt; size; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[ptr], nums[i]);</span><br><span class="line">                ++ptr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b71623eda9a848b58916ca43ba11f9de.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC数组】移动零</title>
      <link href="/posts/8cc2417d.html"/>
      <url>/posts/8cc2417d.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="https://img-blog.csdnimg.cn/d2859d65aafb40ac8771ac30ebec65a4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[k] = nums[i];</span><br><span class="line">                ++k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//剩余置零</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = k; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            nums[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9914658056614ea5b108215095aca113.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】二叉树的最大深度</title>
      <link href="/posts/c728c05a.html"/>
      <url>/posts/c728c05a.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="https://img-blog.csdnimg.cn/4485a4bba5884980b68f49984131b748.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">max</span>(<span class="built_in">maxDepth</span>(root-&gt;left), <span class="built_in">maxDepth</span>(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6d581a75da2c4a0898d124eac5e45d8b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】环形链表</title>
      <link href="/posts/58fb48e7.html"/>
      <url>/posts/58fb48e7.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="https://img-blog.csdnimg.cn/f9a751d2b4074a5089a964aecabe4d2a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">nullptr</span> &amp;&amp; fast-&gt;next != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/916a96679d254628a8763ea1aebe0988.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】回文链表</title>
      <link href="/posts/ec440309.html"/>
      <url>/posts/ec440309.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="https://img-blog.csdnimg.cn/c4ce2d211f744c09b595b76d6c362657.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解一：deque"><a href="#题解一：deque" class="headerlink" title="题解一：deque"></a>题解一：deque</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//使用双端队列</span></span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; deq;</span><br><span class="line">    <span class="keyword">while</span>(head != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        deq.<span class="built_in">push_back</span>(head-&gt;val);</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!deq.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(deq.<span class="built_in">front</span>() != deq.<span class="built_in">back</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        deq.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">if</span>(!deq.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">             deq.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/090e993d0dee488497620144e4616d55.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解二：stack"><a href="#题解二：stack" class="headerlink" title="题解二：stack"></a>题解二：stack</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getlen</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++count;</span><br><span class="line">            head = head-&gt;next;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        ListNode* ptr = head;</span><br><span class="line">        <span class="type">int</span> half_len  = <span class="built_in">getlen</span>(head) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">bool</span> tag = <span class="built_in">getlen</span>(head) % <span class="number">2</span> == <span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(half_len--)</span><br><span class="line">        &#123;</span><br><span class="line">            st.<span class="built_in">push</span>(ptr-&gt;val);</span><br><span class="line">            ptr = ptr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tag)</span><br><span class="line">        &#123;</span><br><span class="line">            ptr = ptr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>() &amp;&amp; ptr != <span class="literal">nullptr</span> &amp;&amp; st.<span class="built_in">top</span>() == ptr-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            ptr = ptr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a47b6671bff642f59179cf81aafe9d4d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】合并两个有序链表</title>
      <link href="/posts/4449827c.html"/>
      <url>/posts/4449827c.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p><img src="https://img-blog.csdnimg.cn/b41beb2fb0764fdbb75336f3c0a28d53.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解一：链接-排序"><a href="#题解一：链接-排序" class="headerlink" title="题解一：链接+排序"></a>题解一：链接+排序</h3><ol><li>直接拼接两个链表</li><li>给链表排序</li><li>输出链表头结点</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++count;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="literal">nullptr</span>) <span class="keyword">return</span> list2;</span><br><span class="line">        <span class="keyword">if</span>(list2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> list1;</span><br><span class="line">        ListNode* ptr1 = list1;</span><br><span class="line">        ListNode* ptr2 = list2;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">nullptr</span> != ptr1-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">           ptr1 = ptr1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ptr1-&gt;next = ptr2;</span><br><span class="line">        <span class="comment">//给ptr1排序并返回list1;</span></span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> count = <span class="built_in">len</span>(list1);</span><br><span class="line">        <span class="type">int</span>* arr = <span class="keyword">new</span> <span class="type">int</span>[count];</span><br><span class="line">         <span class="comment">//赋值</span></span><br><span class="line">         ptr2 = list1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; ptr2 != <span class="literal">nullptr</span>; ++i, ptr2 = ptr2-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[i] = ptr2-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(arr,arr + count);</span><br><span class="line">        ptr2 = list1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; ptr2 != <span class="literal">nullptr</span>; ++i,ptr2 = ptr2-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            ptr2-&gt;val = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[] arr;</span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0c1a8d134f2f4f6892ff8edf3879482c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解二：新头结点链接"><a href="#题解二：新头结点链接" class="headerlink" title="题解二：新头结点链接"></a>题解二：新头结点链接</h3><p><strong>思路：</strong></p><ol><li>使用一个新的头结点head</li><li>循环将两个链表的结点依次比较</li><li>较小者申请新结点链接到head后</li><li>循环退出后，链接剩余链表的结点</li><li>返回head-&gt;next<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="literal">nullptr</span>) <span class="keyword">return</span> list2;</span><br><span class="line">        <span class="keyword">if</span>(list2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> list1;</span><br><span class="line">        ListNode* ptr1 = list1;</span><br><span class="line">        ListNode* ptr2 = list2;</span><br><span class="line">        <span class="comment">//头结点</span></span><br><span class="line">        ListNode* head = <span class="keyword">new</span> <span class="built_in">ListNode</span>();</span><br><span class="line">        ListNode* p =  head;</span><br><span class="line">        <span class="keyword">while</span>(ptr1 != <span class="literal">nullptr</span> &amp;&amp; ptr2 != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ptr1-&gt;val &lt; ptr2-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(ptr1-&gt;val, <span class="literal">nullptr</span>);</span><br><span class="line">                ptr1 = ptr1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(ptr2-&gt;val, <span class="literal">nullptr</span>);</span><br><span class="line">                ptr2 = ptr2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">while</span>(ptr1 != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(ptr1-&gt;val, <span class="literal">nullptr</span>);</span><br><span class="line">            ptr1 = ptr1-&gt;next;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(ptr2 != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(ptr2-&gt;val, <span class="literal">nullptr</span>);</span><br><span class="line">            ptr2 = ptr2-&gt;next;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/0ae8c425490b4d9885aeb08e45603365.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><h3 id="题解三：递归"><a href="#题解三：递归" class="headerlink" title="题解三：递归"></a>题解三：递归</h3><img src="https://img-blog.csdnimg.cn/e187362878c14ef9aeafd969bbe7eefc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1 == <span class="literal">nullptr</span> || list2 == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> list1 == <span class="literal">nullptr</span> ? list2 : list1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list1-&gt;val &lt; list2-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            list1-&gt;next = <span class="built_in">mergeTwoLists</span>(list1-&gt;next, list2);</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            list2-&gt;next = <span class="built_in">mergeTwoLists</span>(list2-&gt;next, list1);</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】反转链表</title>
      <link href="/posts/9f96465f.html"/>
      <url>/posts/9f96465f.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://img-blog.csdnimg.cn/edbcd8c129b143c98539b8c61b41ebe3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解一：置换数据（栈）"><a href="#题解一：置换数据（栈）" class="headerlink" title="题解一：置换数据（栈）"></a>题解一：置换数据（栈）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        </span><br><span class="line">        ListNode* ptr = head;</span><br><span class="line">        ListNode* res = head;   <span class="comment">//返回值</span></span><br><span class="line">        <span class="comment">//使用stack</span></span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            st.<span class="built_in">push</span>(head-&gt;val);</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            ptr-&gt;val = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            ptr = ptr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：当然也可以置换结构：但是需要注意最后一个节点的next需要设置NULL，防止有环</strong></p><hr><h3 id="题解二：pre-cur-next指针"><a href="#题解二：pre-cur-next指针" class="headerlink" title="题解二：pre cur next指针"></a>题解二：pre cur next指针</h3><p><img src="https://img-blog.csdnimg.cn/c23c3a1153154a75823ebad84dc8b1a5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* pre = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        ListNode* next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            next = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：指针改变的次序，防止指针跑丢</strong></p><hr><h3 id="题解三：递归"><a href="#题解三：递归" class="headerlink" title="题解三：递归"></a>题解三：递归</h3><p><strong>注意：递推过程找尾结点，回归过程改变next域</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span> || p-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* last = <span class="built_in">reverse</span>(p-&gt;next);</span><br><span class="line">        p-&gt;next-&gt;next = p;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        ListNode* ptr = head;</span><br><span class="line">        head = <span class="built_in">reverse</span>(ptr);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】删除链表的倒数第N个节点</title>
      <link href="/posts/760edab9.html"/>
      <url>/posts/760edab9.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://img-blog.csdnimg.cn/1fad9fd1ab3b40c0854bbb69aa42c3a2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>求得链表长度，得出正向遍历的次数，使用快慢指针，删除对应结点</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getlen</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++count;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* slow = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">int</span> forward = <span class="built_in">getlen</span>(head) - n;</span><br><span class="line">        <span class="keyword">if</span>(forward == <span class="number">0</span>) <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(forward--)</span><br><span class="line">        &#123;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow-&gt;next = fast-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【LC】删除链表中的节点</title>
      <link href="/posts/235f8f79.html"/>
      <url>/posts/235f8f79.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://img-blog.csdnimg.cn/ffe7294d71144342accaea5f4f881c52.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>解题思路：</strong><br><img src="https://img-blog.csdnimg.cn/6d6bc77d62144ef39cc6e3b58d5f0810.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0f075fbcd3d847498ed8e60b0443aef4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteNode</span><span class="params">(ListNode* node)</span> </span>&#123;</span><br><span class="line">        node-&gt;val = node-&gt;next-&gt;val;</span><br><span class="line">        node-&gt;next = node-&gt;next-&gt;next;</span><br><span class="line">        <span class="comment">//free(node);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>本题心得：删除一节点不一定非要知道它的前驱，可以用后继覆盖掉要删的，再把后继删除即可！！</strong></p><p><strong>这里借用这位网友的故事：很有意思</strong><br><img src="https://img-blog.csdnimg.cn/ac19b64600064e178275c71dbe7456fa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> LC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】二叉排序树</title>
      <link href="/posts/c3f24b8f.html"/>
      <url>/posts/c3f24b8f.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、关于二叉排序树"><a href="#一、关于二叉排序树" class="headerlink" title="一、关于二叉排序树"></a>一、关于二叉排序树</h3><p><strong>二叉排序树的特点：中序遍历的顺序是有序的。</strong><br><img src="https://img-blog.csdnimg.cn/8627984eb4f643c0b1da7ed79648da3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>中序遍历结果：12 16 23 35 42 60<br>逆中序遍历结果：60 42 35 23 16 12</strong></p><h3 id="二、二叉排序树结构设计"><a href="#二、二叉排序树结构设计" class="headerlink" title="二、二叉排序树结构设计"></a>二、二叉排序树结构设计</h3><p><code>Bst.h</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BST_H</span></span><br><span class="line"><span class="comment">//二叉搜索树（二叉排序树）</span></span><br><span class="line"><span class="comment">//三叉链式结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BstNode</span></span><br><span class="line">&#123;</span><br><span class="line">ElemType key;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BstNode</span>* leftchild;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BstNode</span>* rightchild;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BstNode</span>* parent;</span><br><span class="line"></span><br><span class="line">&#125;BstNode, *BstTree;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h3 id="三、二叉排序树的使用"><a href="#三、二叉排序树的使用" class="headerlink" title="三、二叉排序树的使用"></a>三、二叉排序树的使用</h3><h4 id="（1）申请节点"><a href="#（1）申请节点" class="headerlink" title="（1）申请节点"></a>（1）申请节点</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//申请结点</span></span><br><span class="line"><span class="function">BstNode* <span class="title">BuyNode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BstNode* node = (BstNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BstNode));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == node) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memset</span>(node, <span class="number">0</span>, <span class="built_in">sizeof</span>(BstNode));</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）插入节点"><a href="#（2）插入节点" class="headerlink" title="（2）插入节点"></a>（2）插入节点</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉搜索树insert插入结点</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ptr是指针的引用：底层 == 二级指针 const BstNode**</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Insert</span><span class="params">(BstNode*&amp; root, ElemType val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//第一次插入结点</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = <span class="built_in">BuyNode</span>();</span><br><span class="line">root-&gt;key = val;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">BstNode* pa = <span class="literal">NULL</span>;</span><br><span class="line">BstNode* ptr = root;</span><br><span class="line"><span class="keyword">while</span> (ptr != <span class="literal">NULL</span> &amp;&amp; ptr-&gt;key != val)</span><br><span class="line">&#123;</span><br><span class="line">pa = ptr;</span><br><span class="line">ptr = val &lt; ptr-&gt;key ? ptr-&gt;leftchild : ptr-&gt;rightchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重复值</span></span><br><span class="line"><span class="keyword">if</span> (ptr != <span class="literal">NULL</span> &amp;&amp; ptr-&gt;key == val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不是重复值 ptr == NULL需要插入pa的两边</span></span><br><span class="line">ptr = <span class="built_in">BuyNode</span>();</span><br><span class="line">ptr-&gt;key = val;</span><br><span class="line">ptr-&gt;parent = pa;</span><br><span class="line"><span class="keyword">if</span> (ptr-&gt;key &lt; pa-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line">pa-&gt;leftchild = ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pa-&gt;rightchild = ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）找第一个结点（最小值）"><a href="#（3）找第一个结点（最小值）" class="headerlink" title="（3）找第一个结点（最小值）"></a>（3）找第一个结点（最小值）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一个（最小值）</span></span><br><span class="line"><span class="function">BstNode* <span class="title">First</span><span class="params">(BstNode* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (ptr != <span class="literal">NULL</span> &amp;&amp; ptr-&gt;leftchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ptr = ptr-&gt;leftchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（4）找最后一个结点（最大值）"><a href="#（4）找最后一个结点（最大值）" class="headerlink" title="（4）找最后一个结点（最大值）"></a>（4）找最后一个结点（最大值）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最后一个(最大值)</span></span><br><span class="line"><span class="function">BstNode* <span class="title">Last</span><span class="params">(BstNode* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (ptr != <span class="literal">NULL</span> &amp;&amp; ptr-&gt;rightchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ptr = ptr-&gt;rightchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（5）找后一个结点（较大者）"><a href="#（5）找后一个结点（较大者）" class="headerlink" title="（5）找后一个结点（较大者）"></a>（5）找后一个结点（较大者）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寻找当前结点的较大的结点</span></span><br><span class="line"><span class="function">BstNode* <span class="title">Next</span><span class="params">(BstNode* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (ptr-&gt;rightchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">First</span>(ptr-&gt;rightchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//ptr-&gt;rightchild == NULL</span></span><br><span class="line">&#123;</span><br><span class="line">BstNode* pa = ptr-&gt;parent;</span><br><span class="line"><span class="keyword">while</span> (pa != <span class="literal">NULL</span> &amp;&amp; ptr == pa-&gt;rightchild)</span><br><span class="line">&#123;</span><br><span class="line">ptr = pa;</span><br><span class="line">pa = ptr-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pa;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（6）找前一个结点（较小者）"><a href="#（6）找前一个结点（较小者）" class="headerlink" title="（6）找前一个结点（较小者）"></a>（6）找前一个结点（较小者）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寻找前驱，较小一个的结点</span></span><br><span class="line"><span class="function">BstNode* <span class="title">Prev</span><span class="params">(BstNode* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (ptr-&gt;leftchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">First</span>(ptr-&gt;leftchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">BstNode* pa = ptr-&gt;parent;</span><br><span class="line"><span class="keyword">while</span> (pa != <span class="literal">NULL</span> &amp;&amp; ptr == pa-&gt;leftchild)</span><br><span class="line">&#123;</span><br><span class="line">ptr = pa;</span><br><span class="line">pa = ptr-&gt;parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pa;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（7）非递归中序遍历"><a href="#（7）非递归中序遍历" class="headerlink" title="（7）非递归中序遍历"></a>（7）非递归中序遍历</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归的中序遍历:从小到大</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MidOrder</span><span class="params">(BstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (BstNode* ptr = <span class="built_in">First</span>(root); ptr != <span class="literal">NULL</span>; ptr = <span class="built_in">Next</span>(ptr))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; ptr-&gt;key &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（8）非递归逆中序遍历"><a href="#（8）非递归逆中序遍历" class="headerlink" title="（8）非递归逆中序遍历"></a>（8）非递归逆中序遍历</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逆序中序遍历 从大到小</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ReMidOrder</span><span class="params">(BstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (BstNode* ptr = <span class="built_in">Last</span>(root); ptr != <span class="literal">NULL</span>; ptr = <span class="built_in">Prev</span>(ptr))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; ptr-&gt;key &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（9）清空二叉树"><a href="#（9）清空二叉树" class="headerlink" title="（9）清空二叉树"></a>（9）清空二叉树</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clear</span><span class="params">(BstNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Clear</span>(root-&gt;leftchild);</span><br><span class="line"><span class="built_in">Clear</span>(root-&gt;rightchild);</span><br><span class="line"><span class="keyword">delete</span> root;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（10）查找val"><a href="#（10）查找val" class="headerlink" title="（10）查找val"></a>（10）查找val</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function">BstNode* <span class="title">FindValue</span><span class="params">(BstNode* ptr, ElemType val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">BstNode* pa = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (ptr != <span class="literal">NULL</span> &amp;&amp; ptr-&gt;key != val)</span><br><span class="line">&#123;</span><br><span class="line">pa = ptr;</span><br><span class="line">ptr = val &lt; ptr-&gt;key ? ptr-&gt;leftchild : ptr-&gt;rightchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（11）删除val"><a href="#（11）删除val" class="headerlink" title="（11）删除val"></a>（11）删除val</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Remove</span><span class="params">(BstNode*&amp; ptr, ElemType val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">BstNode* pa = <span class="literal">NULL</span>;</span><br><span class="line">BstNode* res = <span class="built_in">FindValue</span>(ptr, val);</span><br><span class="line"><span class="keyword">if</span> (res == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除的是双分支结点(双分支转成叶子or单分支)</span></span><br><span class="line"><span class="keyword">if</span> (res-&gt;leftchild != <span class="literal">NULL</span> &amp;&amp; res-&gt;rightchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到仅大于res结点的结点</span></span><br><span class="line">BstNode* q = <span class="built_in">First</span>(res);</span><br><span class="line">res-&gt;key = q-&gt;key;</span><br><span class="line">res = q;</span><br><span class="line">&#125;</span><br><span class="line">pa = res-&gt;parent;</span><br><span class="line"><span class="comment">//child是res的孩子：NULL or left or right</span></span><br><span class="line">BstNode* child = res-&gt;leftchild != <span class="literal">NULL</span> ? res-&gt;leftchild : res-&gt;rightchild;</span><br><span class="line"><span class="comment">//删除单分支 root节点</span></span><br><span class="line"><span class="keyword">if</span> (pa == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ptr = child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//删除的单分支结点</span></span><br><span class="line"><span class="keyword">if</span> (child != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">child-&gt;parent = pa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//叶子or单分支结点 pa-&gt;删除res 链接到child</span></span><br><span class="line"><span class="keyword">if</span> (pa-&gt;leftchild == res)</span><br><span class="line">&#123;</span><br><span class="line">pa-&gt;leftchild = child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pa-&gt;rightchild = child;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(res);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（12）测试"><a href="#（12）测试" class="headerlink" title="（12）测试"></a>（12）测试</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">23</span>, <span class="number">32</span>, <span class="number">12</span>, <span class="number">35</span>, <span class="number">24</span>, <span class="number">56</span>, <span class="number">78</span>, <span class="number">45</span>&#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">BstNode* root = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Insert</span>(root, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">MidOrder</span>(root);</span><br><span class="line"><span class="built_in">ReMidOrder</span>(root);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Remove</span>(root, <span class="number">56</span>);</span><br><span class="line"><span class="built_in">MidOrder</span>(root);</span><br><span class="line"><span class="built_in">Clear</span>(root);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/fa5639db49ff44a7949cd09396f4ced2.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉排序树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】二叉树的使用</title>
      <link href="/posts/4b9409be.html"/>
      <url>/posts/4b9409be.html</url>
      
        <content type="html"><![CDATA[<hr><h4 id="寻找双亲结点"><a href="#寻找双亲结点" class="headerlink" title="寻找双亲结点"></a>寻找双亲结点</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找双亲</span></span><br><span class="line"><span class="function">BtNode* <span class="title">FindParent</span><span class="params">(BtNode* root, BtNode* pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span> || pos == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;leftchild == pos || root-&gt;rightchild == pos)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">BtNode* p = <span class="built_in">FindParent</span>(root-&gt;leftchild, pos);</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="built_in">FindParent</span>(root-&gt;rightchild, pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查找val值"><a href="#查找val值" class="headerlink" title="查找val值"></a>查找val值</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树中查找val是否存在</span></span><br><span class="line"><span class="function">BtNode* <span class="title">Find</span><span class="params">(BtNode* p, Element val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span> || p-&gt;data == val)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">BtNode* q = <span class="built_in">Find</span>(p-&gt;leftchild, val);</span><br><span class="line"><span class="keyword">if</span> (q == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">q =  <span class="built_in">Find</span>(p-&gt;rightchild, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BtNode* <span class="title">FindValue</span><span class="params">(BtNode* p, Element val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Find</span>(p, val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树空间释放"><a href="#二叉树空间释放" class="headerlink" title="二叉树空间释放"></a>二叉树空间释放</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二叉树的clear函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clear</span><span class="params">(BtNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Clear</span>(p-&gt;leftchild);</span><br><span class="line"><span class="built_in">Clear</span>(p-&gt;rightchild);</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="计算二叉树结点个数"><a href="#计算二叉树结点个数" class="headerlink" title="计算二叉树结点个数"></a>计算二叉树结点个数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算二叉树结点个数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BtCount</span><span class="params">(BtNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span><span class="built_in">BtCount</span>(p-&gt;leftchild) + <span class="built_in">BtCount</span>(p-&gt;rightchild) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="计算二叉树的深度"><a href="#计算二叉树的深度" class="headerlink" title="计算二叉树的深度"></a>计算二叉树的深度</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算二叉树的深度</span></span><br><span class="line"><span class="comment">//分治策略：左子树深度&gt;右子树深度? 左:右 + 1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Highth</span><span class="params">(BtNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">max</span>(<span class="built_in">Highth</span>(p-&gt;leftchild), <span class="built_in">Highth</span>(p-&gt;rightchild)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="水平遍历（层次）"><a href="#水平遍历（层次）" class="headerlink" title="水平遍历（层次）"></a>水平遍历（层次）</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//水平遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LevelOrder</span><span class="params">(BtNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">queue&lt;BtNode*&gt; qu;</span><br><span class="line">qu.<span class="built_in">push</span>(p);</span><br><span class="line"><span class="keyword">while</span> (!qu.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">p = qu.<span class="built_in">front</span>();</span><br><span class="line">qu.<span class="built_in">pop</span>();</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;leftchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">qu.<span class="built_in">push</span>(p-&gt;leftchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rightchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">qu.<span class="built_in">push</span>(p-&gt;rightchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Z型遍历"><a href="#Z型遍历" class="headerlink" title="Z型遍历"></a>Z型遍历</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Z打印二叉树结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ZPrint</span><span class="params">(BtNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">stack&lt;BtNode*&gt; ast;</span><br><span class="line">stack&lt;BtNode*&gt; bst;</span><br><span class="line">ast.<span class="built_in">push</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!ast.<span class="built_in">empty</span>() || !bst.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (!ast.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">p = ast.<span class="built_in">top</span>();</span><br><span class="line">ast.<span class="built_in">pop</span>();</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;leftchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">bst.<span class="built_in">push</span>(p-&gt;leftchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rightchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">bst.<span class="built_in">push</span>(p-&gt;rightchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!bst.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">p = bst.<span class="built_in">top</span>();</span><br><span class="line">bst.<span class="built_in">pop</span>();</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (p-&gt;rightchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ast.<span class="built_in">push</span>(p-&gt;rightchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;leftchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ast.<span class="built_in">push</span>(p-&gt;leftchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="判断是否是满二叉树"><a href="#判断是否是满二叉树" class="headerlink" title="判断是否是满二叉树"></a>判断是否是满二叉树</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断一个二叉树是否是满二叉树</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsFullBt</span><span class="params">(BtNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//深度k  1 2 4 8</span></span><br><span class="line"><span class="type">int</span> k = <span class="built_in">Highth</span>(p);</span><br><span class="line"><span class="comment">//结点个数 == </span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">BtCount</span>(p) == (<span class="type">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>, k) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断一个二叉树是否是满二叉树</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsFullBt</span><span class="params">(BtNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> s = <span class="number">1</span>;</span><br><span class="line"><span class="type">bool</span> tag = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//两个队列实现</span></span><br><span class="line">queue&lt;BtNode*&gt; aqu;</span><br><span class="line">queue&lt;BtNode*&gt; bqu;</span><br><span class="line">aqu.<span class="built_in">push</span>(p);</span><br><span class="line"><span class="keyword">while</span> (!aqu.<span class="built_in">empty</span>() || !bqu.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s != aqu.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">tag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!aqu.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">p = aqu.<span class="built_in">front</span>();</span><br><span class="line">aqu.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(p-&gt;leftchild != <span class="literal">NULL</span> ) bqu.<span class="built_in">push</span>(p-&gt;leftchild);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rightchild != <span class="literal">NULL</span>) bqu.<span class="built_in">push</span>(p-&gt;rightchild);</span><br><span class="line">&#125;</span><br><span class="line">s += s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s != bqu.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">tag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!bqu.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">p = bqu.<span class="built_in">front</span>();</span><br><span class="line">bqu.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (p-&gt;leftchild != <span class="literal">NULL</span>) aqu.<span class="built_in">push</span>(p-&gt;leftchild);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rightchild != <span class="literal">NULL</span>) aqu.<span class="built_in">push</span>(p-&gt;rightchild);</span><br><span class="line">&#125;</span><br><span class="line">s += s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断是否是完全二叉树"><a href="#判断是否是完全二叉树" class="headerlink" title="判断是否是完全二叉树"></a>判断是否是完全二叉树</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否是一个完全二叉树</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsCompleteBTree</span><span class="params">(BtNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">bool</span> tag = <span class="literal">true</span>;</span><br><span class="line">queue&lt;BtNode*&gt; qu;</span><br><span class="line">qu.<span class="built_in">push</span>(p);</span><br><span class="line"><span class="keyword">while</span> (!qu.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">p = qu.<span class="built_in">front</span>();</span><br><span class="line">qu.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">qu.<span class="built_in">push</span>(p-&gt;leftchild);</span><br><span class="line">qu.<span class="built_in">push</span>(p-&gt;rightchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!qu.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">p = qu.<span class="built_in">front</span>();</span><br><span class="line">qu.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】二叉树的遍历</title>
      <link href="/posts/a6865cb7.html"/>
      <url>/posts/a6865cb7.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、递归遍历"><a href="#一、递归遍历" class="headerlink" title="一、递归遍历"></a>一、递归遍历</h3><p> <strong>二叉树结构：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> Element;</span><br><span class="line"><span class="comment">//二叉链式树节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BtNode</span></span><br><span class="line">&#123;</span><br><span class="line">Element data;<span class="comment">//数据域</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BtNode</span>* leftchild;<span class="comment">//左孩子</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BtNode</span>* rightchild;<span class="comment">//右孩子</span></span><br><span class="line">&#125;BtNode, *BinaryTree;</span><br></pre></td></tr></table></figure><h4 id="（1）先序"><a href="#（1）先序" class="headerlink" title="（1）先序"></a>（1）先序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(BinaryTree root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">PreOrder</span>(root-&gt;leftchild);</span><br><span class="line"><span class="built_in">PreOrder</span>(root-&gt;rightchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）中序"><a href="#（2）中序" class="headerlink" title="（2）中序"></a>（2）中序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MidOrder</span><span class="params">(BinaryTree root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">MidOrder</span>(root-&gt;leftchild);</span><br><span class="line">cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">MidOrder</span>(root-&gt;rightchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）后序"><a href="#（3）后序" class="headerlink" title="（3）后序"></a>（3）后序</h4><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LastOrder</span><span class="params">(BinaryTree root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">LastOrder</span>(root-&gt;leftchild);</span><br><span class="line"><span class="built_in">LastOrder</span>(root-&gt;rightchild);</span><br><span class="line">cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><h3 id="二、非递归遍历"><a href="#二、非递归遍历" class="headerlink" title="二、非递归遍历"></a>二、非递归遍历</h3><p><strong>二叉树结构：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> Element;</span><br><span class="line"><span class="comment">//二叉链式树节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BtNode</span></span><br><span class="line">&#123;</span><br><span class="line">Element data;<span class="comment">//数据域</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BtNode</span>* leftchild;<span class="comment">//左孩子</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BtNode</span>* rightchild;<span class="comment">//右孩子</span></span><br><span class="line">&#125;BtNode, *BinaryTree;</span><br></pre></td></tr></table></figure><h4 id="（1）先序-1"><a href="#（1）先序-1" class="headerlink" title="（1）先序"></a>（1）先序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归先序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Pre</span><span class="params">(BtNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p) <span class="keyword">return</span>;</span><br><span class="line">stack&lt;BtNode*&gt; st;</span><br><span class="line">st.<span class="built_in">push</span>(p);</span><br><span class="line"><span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">p = st.<span class="built_in">top</span>();</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="comment">//先入后出</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;rightchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">push</span>(p-&gt;rightchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;leftchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">push</span>(p-&gt;leftchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）中序-1"><a href="#（2）中序-1" class="headerlink" title="（2）中序"></a>（2）中序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序非递归遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Mid</span><span class="params">(BtNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">stack&lt;BtNode*&gt; st;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span> || !st.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">push</span>(p);</span><br><span class="line">p = p-&gt;leftchild;</span><br><span class="line">&#125;</span><br><span class="line">p = st.<span class="built_in">top</span>();</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">p = p-&gt;rightchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）后序-1"><a href="#（3）后序-1" class="headerlink" title="（3）后序"></a>（3）后序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后序非递归遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Last</span><span class="params">(BtNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">stack&lt;BtNode*&gt; st;</span><br><span class="line">BtNode* tag = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span> || !st.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">push</span>(p);</span><br><span class="line">p = p-&gt;leftchild;</span><br><span class="line">&#125;</span><br><span class="line">p = st.<span class="built_in">top</span>();</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (p-&gt;rightchild == <span class="literal">NULL</span> || p-&gt;rightchild == tag)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">tag = p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">push</span>(p);</span><br><span class="line">p = p-&gt;rightchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="三、其他结构遍历"><a href="#三、其他结构遍历" class="headerlink" title="三、其他结构遍历"></a>三、其他结构遍历</h3><p><strong>二叉树结构：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> Element;</span><br><span class="line"><span class="comment">//二叉链式树节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BtNode</span></span><br><span class="line">&#123;</span><br><span class="line">Element data;<span class="comment">//数据域</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BtNode</span>* leftchild;<span class="comment">//左孩子</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BtNode</span>* rightchild;<span class="comment">//右孩子</span></span><br><span class="line">&#125;BtNode, *BinaryTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">JieBtNode</span></span><br><span class="line">&#123;</span><br><span class="line">BtNode* pnode;<span class="comment">//节点</span></span><br><span class="line"><span class="type">int</span> count;<span class="comment">//记录出栈次数：1代表左 2代表中 3代表右</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">JieBtNode</span>(BtNode* p) :<span class="built_in">pnode</span>(p), <span class="built_in">count</span>(<span class="number">0</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="（1）非递归中序"><a href="#（1）非递归中序" class="headerlink" title="（1）非递归中序"></a>（1）非递归中序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归中序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NewMid</span><span class="params">(BtNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p) <span class="keyword">return</span>;</span><br><span class="line">stack&lt;JieBtNode&gt; st;</span><br><span class="line">st.<span class="built_in">push</span>(<span class="built_in">JieBtNode</span>(p));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">JieBtNode jienode = st.<span class="built_in">top</span>();</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (++jienode.count == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; jienode.pnode-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (jienode.pnode-&gt;rightchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">push</span>(<span class="built_in">JieBtNode</span>(jienode.pnode-&gt;rightchild));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">push</span>(jienode);</span><br><span class="line"><span class="keyword">if</span> (jienode.count == <span class="number">1</span> &amp;&amp; jienode.pnode-&gt;leftchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">push</span>(<span class="built_in">JieBtNode</span>(jienode.pnode-&gt;leftchild));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）非递归后序"><a href="#（2）非递归后序" class="headerlink" title="（2）非递归后序"></a>（2）非递归后序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//非递归后序遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">NewLast</span><span class="params">(BtNode* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p) <span class="keyword">return</span>;</span><br><span class="line">stack&lt;JieBtNode&gt; st;</span><br><span class="line">st.<span class="built_in">push</span>(<span class="built_in">JieBtNode</span>(p));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">JieBtNode jienode = st.<span class="built_in">top</span>();</span><br><span class="line">st.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (++jienode.count == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; jienode.pnode-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">push</span>(jienode);</span><br><span class="line"><span class="keyword">if</span> (jienode.count == <span class="number">1</span> &amp;&amp; jienode.pnode-&gt;leftchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">push</span>(<span class="built_in">JieBtNode</span>(jienode.pnode-&gt;leftchild));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(jienode.count == <span class="number">2</span> &amp;&amp; jienode.pnode-&gt;rightchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">push</span>(<span class="built_in">JieBtNode</span>(jienode.pnode-&gt;rightchild));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】智能指针管理二叉树</title>
      <link href="/posts/d69f8ba3.html"/>
      <url>/posts/d69f8ba3.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="二叉树结构"><a href="#二叉树结构" class="headerlink" title="二叉树结构"></a>二叉树结构</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BINARY_TREE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BINARY_TREE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> Element;</span><br><span class="line"><span class="comment">//二叉链式树节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BtNode</span></span><br><span class="line">&#123;</span><br><span class="line">Element data;<span class="comment">//数据域</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BtNode</span>* leftchild;<span class="comment">//左孩子</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BtNode</span>* rightchild;<span class="comment">//右孩子</span></span><br><span class="line">&#125;BtNode, *BinaryTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉链式shared_ptr树节点</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">SBT_Node</span></span><br><span class="line">&#123;</span><br><span class="line">Element data;<span class="comment">//数据域</span></span><br><span class="line">std::shared_ptr&lt;SBT_Node&gt; leftchild;<span class="comment">//左孩子</span></span><br><span class="line">std::shared_ptr&lt;SBT_Node&gt; rightchild;<span class="comment">//右孩子</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">SBT_Node</span>() &#123; cout &lt;&lt; <span class="string">&quot;SBT_Node() &quot;</span>&lt;&lt; endl; &#125;</span><br><span class="line">~<span class="built_in">SBT_Node</span>() &#123; cout &lt;&lt; <span class="string">&quot;~SBT_Node() &quot;</span>&lt;&lt; <span class="keyword">this</span>-&gt;data&lt;&lt; endl; &#125;</span><br><span class="line">&#125;SBT_Node;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改造二叉树使用智能指针进行管理</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0 </span></span><br><span class="line"><span class="comment">//申请节点</span></span><br><span class="line"><span class="function">SBT_Node* <span class="title">BuyNode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SBT_Node* node = (SBT_Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(SBT_Node));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == node) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memset</span>(node, <span class="number">0</span>, <span class="built_in">sizeof</span>(SBT_Node));</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建方式三：</span></span><br><span class="line"><span class="comment">//中序序列：CBEDFAGH</span></span><br><span class="line"><span class="comment">//后序序列：CEFDBHGA</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindRoot_from_Mid</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* mid, <span class="type">int</span> len, Element rootdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pos = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (mid[i] == rootdata)</span><br><span class="line">&#123;</span><br><span class="line">pos = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">shared_ptr&lt;SBT_Node&gt; <span class="title">C_Bt_ML_Shared</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* mid, <span class="type">const</span> <span class="type">char</span>* last, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">shared_ptr&lt;SBT_Node&gt; <span class="title">s</span><span class="params">(<span class="literal">NULL</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">s = <span class="built_in">make_shared</span>&lt;SBT_Node&gt;();</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == s)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">s-&gt;data = last[len - <span class="number">1</span>];</span><br><span class="line"><span class="comment">//中序中寻找相对根结点</span></span><br><span class="line"><span class="type">int</span> pos = <span class="built_in">FindRoot_from_Mid</span>(mid, len, last[len - <span class="number">1</span>]);</span><br><span class="line"><span class="comment">//两序列不是同一个二叉树</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == pos) <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">s-&gt;leftchild = <span class="built_in">C_Bt_ML_Shared</span>(mid, last, pos);</span><br><span class="line">s-&gt;rightchild = <span class="built_in">C_Bt_ML_Shared</span>(mid + pos + <span class="number">1</span>, last + pos, len - pos - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">shared_ptr&lt;SBT_Node&gt; <span class="title">Create_Bt_ML_Shared</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* mid, <span class="type">const</span> <span class="type">char</span>* last, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mid == <span class="literal">NULL</span> || last == <span class="literal">NULL</span> || len &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">C_Bt_ML_Shared</span>(mid, last, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* mid = <span class="string">&quot;CBEDFAGH&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* last = <span class="string">&quot;CEFDBHGA&quot;</span>;</span><br><span class="line">shared_ptr&lt;SBT_Node&gt; root = <span class="built_in">Create_Bt_ML_Shared</span>(mid, last,<span class="built_in">strlen</span>(mid));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/02ed7c7ec58f4aa5a70cf84d2549e998.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 智能指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】二叉树的创建</title>
      <link href="/posts/247848cf.html"/>
      <url>/posts/247848cf.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="二叉树的创建与遍历"><a href="#二叉树的创建与遍历" class="headerlink" title="二叉树的创建与遍历"></a>二叉树的创建与遍历</h3><p><strong>以下图的二叉树为例：</strong><br><img src="https://img-blog.csdnimg.cn/8785ac0a0d0044998222aaaf086257a9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><code>Binary_Tree.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BINARY_TREE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BINARY_TREE_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> Element;</span><br><span class="line"><span class="comment">//二叉链式树节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BtNode</span></span><br><span class="line">&#123;</span><br><span class="line">Element data;<span class="comment">//数据域</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BtNode</span>* leftchild;<span class="comment">//左孩子</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BtNode</span>* rightchild;<span class="comment">//右孩子</span></span><br><span class="line">&#125;BtNode, *BinaryTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="创建方式一"><a href="#创建方式一" class="headerlink" title="创建方式一"></a>创建方式一</h4><p><code>Bt.cpp</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Binary_Tree.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PreOrder</span><span class="params">(BinaryTree root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">PreOrder</span>(root-&gt;leftchild);</span><br><span class="line"><span class="built_in">PreOrder</span>(root-&gt;rightchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MidOrder</span><span class="params">(BinaryTree root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">MidOrder</span>(root-&gt;leftchild);</span><br><span class="line">cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">MidOrder</span>(root-&gt;rightchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LastOrder</span><span class="params">(BinaryTree root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">LastOrder</span>(root-&gt;leftchild);</span><br><span class="line"><span class="built_in">LastOrder</span>(root-&gt;rightchild);</span><br><span class="line">cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请节点</span></span><br><span class="line"><span class="function">BtNode* <span class="title">BuyNode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BtNode* node = (BtNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(BtNode));</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == node) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memset</span>(node, <span class="number">0</span>, <span class="built_in">sizeof</span>(BtNode));</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建二叉树方式一</span></span><br><span class="line"><span class="comment">//先序创建：先序序列：ABC##DE##F##G#H##</span></span><br><span class="line"><span class="function">BtNode* <span class="title">Create_Bt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BtNode* s = <span class="literal">NULL</span>;</span><br><span class="line">Element elem;</span><br><span class="line">cin &gt;&gt; elem;</span><br><span class="line"><span class="keyword">if</span> (elem != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">s = <span class="built_in">BuyNode</span>();</span><br><span class="line">s-&gt;data = elem;</span><br><span class="line">s-&gt;leftchild = <span class="built_in">Create_Bt</span>();</span><br><span class="line">s-&gt;rightchild = <span class="built_in">Create_Bt</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BtNode* root = <span class="built_in">Create_Bt</span>();</span><br><span class="line"><span class="built_in">PreOrder</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">MidOrder</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">LastOrder</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/96cf4ec3b28d4cf0969da145b0639609.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h4 id="创建方式二：先序-中序"><a href="#创建方式二：先序-中序" class="headerlink" title="创建方式二：先序+中序"></a>创建方式二：先序+中序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建方式二：</span></span><br><span class="line"><span class="comment">//先序序列：ABCDEFGH</span></span><br><span class="line"><span class="comment">//中序序列：CBEDFAGH</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindRoot_from_Mid</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* mid, <span class="type">int</span> len,Element rootdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pos = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (mid[i] == rootdata)</span><br><span class="line">&#123;</span><br><span class="line">pos = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BtNode* <span class="title">C_Bt_PM</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pre, <span class="type">const</span> <span class="type">char</span>* mid, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BtNode* s = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">s = <span class="built_in">BuyNode</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == s)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">s-&gt;data = pre[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//中序中寻找相对根结点</span></span><br><span class="line"><span class="type">int</span> pos = <span class="built_in">FindRoot_from_Mid</span>(mid, len, pre[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//两序列不是同一个二叉树</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == pos) <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">s-&gt;leftchild = <span class="built_in">C_Bt_PM</span>(pre + <span class="number">1</span>, mid, pos);</span><br><span class="line">s-&gt;rightchild = <span class="built_in">C_Bt_PM</span>(pre + pos + <span class="number">1</span>, mid + pos + <span class="number">1</span>, len - pos - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BtNode* <span class="title">Create_Bt_PM</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pre, <span class="type">const</span> <span class="type">char</span>* mid, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pre == <span class="literal">NULL</span> || mid == <span class="literal">NULL</span> || len &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">C_Bt_PM</span>(pre, mid, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* pre = <span class="string">&quot;ABCDEFGH&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* mid = <span class="string">&quot;CBEDFAGH&quot;</span>;</span><br><span class="line">BtNode* root = <span class="built_in">Create_Bt_PM</span>(pre, mid,<span class="built_in">strlen</span>(pre));</span><br><span class="line"></span><br><span class="line"><span class="built_in">PreOrder</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">MidOrder</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">LastOrder</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/04babcdee1f14fbd8640af03f6282c3d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/9291a6f3ece54520a19ead59e43667c6.png" alt="在这里插入图片描述"></p><hr><h4 id="创建方式三：中序-后序"><a href="#创建方式三：中序-后序" class="headerlink" title="创建方式三：中序+后序"></a>创建方式三：中序+后序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建方式三：</span></span><br><span class="line"><span class="comment">//中序序列：CBEDFAGH</span></span><br><span class="line"><span class="comment">//后序序列：CEFDBHGA</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindRoot_from_Mid</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* mid, <span class="type">int</span> len, Element rootdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> pos = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (mid[i] == rootdata)</span><br><span class="line">&#123;</span><br><span class="line">pos = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BtNode* <span class="title">C_Bt_ML</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* mid, <span class="type">const</span> <span class="type">char</span>* last, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BtNode* s = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">s = <span class="built_in">BuyNode</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == s)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">s-&gt;data = last[len - <span class="number">1</span>];</span><br><span class="line"><span class="comment">//中序中寻找相对根结点</span></span><br><span class="line"><span class="type">int</span> pos = <span class="built_in">FindRoot_from_Mid</span>(mid, len, last[len - <span class="number">1</span>]);</span><br><span class="line"><span class="comment">//两序列不是同一个二叉树</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == pos) <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">s-&gt;leftchild = <span class="built_in">C_Bt_ML</span>(mid, last, pos);</span><br><span class="line">s-&gt;rightchild = <span class="built_in">C_Bt_ML</span>(mid + pos + <span class="number">1</span>, last + pos, len - pos - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">BtNode* <span class="title">Create_Bt_ML</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* mid, <span class="type">const</span> <span class="type">char</span>* last, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mid == <span class="literal">NULL</span> || last == <span class="literal">NULL</span> || len &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">C_Bt_ML</span>(mid, last, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* mid = <span class="string">&quot;CBEDFAGH&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* last = <span class="string">&quot;CEFDBHGA&quot;</span>;</span><br><span class="line">BtNode* root = <span class="built_in">Create_Bt_ML</span>(mid, last,<span class="built_in">strlen</span>(mid));</span><br><span class="line"></span><br><span class="line"><span class="built_in">PreOrder</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">MidOrder</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">LastOrder</span>(root);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/22c2a19d14c442638c97c292585a1928.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/43f012a9ba7b44548bb858d65e599d94.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】线程同步二(条件变量+互斥锁)</title>
      <link href="/posts/d781ab33.html"/>
      <url>/posts/d781ab33.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="题目：使用三个线程依次输出ABC"><a href="#题目：使用三个线程依次输出ABC" class="headerlink" title="题目：使用三个线程依次输出ABC"></a>题目：使用三个线程依次输出ABC</h3><h4 id="（1）介绍RAII包装类unique-lock"><a href="#（1）介绍RAII包装类unique-lock" class="headerlink" title="（1）介绍RAII包装类unique_lock"></a>（1）介绍RAII包装类unique_lock</h4><p><img src="https://img-blog.csdnimg.cn/d4e9fdc908354bbdb8e780a24c0566e3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）介绍条件变量"><a href="#（2）介绍条件变量" class="headerlink" title="（2）介绍条件变量"></a>（2）介绍条件变量</h4><p><img src="https://img-blog.csdnimg.cn/76516b25655b40feb8adb7530ab62d96.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>温馨提示：</strong><a href="https://blog.csdn.net/xiaoxiaoguailou/article/details/121589420">linux下的条件变量</a></p><h4 id="（3）代码实现"><a href="#（3）代码实现" class="headerlink" title="（3）代码实现"></a>（3）代码实现</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//实现三个线程输出ABC ...</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="comment">//互斥锁</span></span><br><span class="line">std::mutex mtx;</span><br><span class="line"><span class="comment">//条件变量</span></span><br><span class="line">std::condition_variable cv;</span><br><span class="line"><span class="comment">//某个唤醒条件</span></span><br><span class="line"><span class="type">int</span> con = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//con = 0唤醒线程1打印A </span></span><br><span class="line"><span class="comment">//con = 1唤醒线程2打印B </span></span><br><span class="line"><span class="comment">//con = 3唤醒线程3打印C </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">funa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获得互斥锁</span></span><br><span class="line"><span class="function">unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//输出5次</span></span><br><span class="line"><span class="keyword">while</span> (count--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (con != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//wait函数的三个步骤</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.将自身线程加入到条件变量的阻塞队列中。。。</span></span><br><span class="line"><span class="comment">2.释放互斥锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock);</span><br><span class="line"><span class="comment">//3.等待被其他线程唤醒时，获得互斥锁，从等待队列中返回</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A&quot;</span> &lt;&lt; endl;</span><br><span class="line">con = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//唤醒其他所有线程</span></span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">funb</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获得互斥锁</span></span><br><span class="line"><span class="function">unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//输出5次</span></span><br><span class="line"><span class="keyword">while</span> (count--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (con != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//wait函数的三个步骤</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.将自身线程加入到条件变量的阻塞队列中。。。</span></span><br><span class="line"><span class="comment">2.释放互斥锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock);</span><br><span class="line"><span class="comment">//3.等待被其他线程唤醒时，获得互斥锁，从等待队列中返回</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B&quot;</span> &lt;&lt; endl;</span><br><span class="line">con = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//唤醒其他所有线程</span></span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//获得互斥锁</span></span><br><span class="line"><span class="function">unique_lock&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//输出5次</span></span><br><span class="line"><span class="keyword">while</span> (count--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (con != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//wait函数的三个步骤</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.将自身线程加入到条件变量的阻塞队列中。。。</span></span><br><span class="line"><span class="comment">2.释放互斥锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">cv.<span class="built_in">wait</span>(lock);</span><br><span class="line"><span class="comment">//3.等待被其他线程唤醒时，获得互斥锁，从等待队列中返回</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C&quot;</span> &lt;&lt; endl;</span><br><span class="line">con = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//唤醒其他所有线程</span></span><br><span class="line">cv.<span class="built_in">notify_all</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(funa)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(funb)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">thc</span><span class="params">(func)</span></span>;</span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line">thc.<span class="built_in">join</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5474c900c0fa4d4b9b8493722ffbdb4f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 条件变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】线程同步一</title>
      <link href="/posts/6c20c814.html"/>
      <url>/posts/6c20c814.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、线程同步题"><a href="#一、线程同步题" class="headerlink" title="一、线程同步题"></a>一、线程同步题</h3><p>两个线程同时对一个全局变量++操作，保证最后的结果正确</p><h4 id="（1）原子操作"><a href="#（1）原子操作" class="headerlink" title="（1）原子操作"></a>（1）原子操作</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//线程同步一：两个线程同时对一个全局变量++操作，保证最后的结果正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//原子全局变量</span></span><br><span class="line">atomic_int g_data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">++g_data;</span><br><span class="line">cout &lt;&lt; id &lt;&lt; <span class="string">&quot; add : &quot;</span>&lt;&lt; g_data &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(add, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(add, <span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主进程等待两个子线程的退出</span></span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0cc383d3003444d8ae8af383b9b6b03a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）互斥锁"><a href="#（2）互斥锁" class="headerlink" title="（2）互斥锁"></a>（2）互斥锁</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//线程同步一：两个线程同时对一个全局变量++操作，保证最后的结果正确</span></span><br><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="type">int</span> g_data = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//互斥锁</span></span><br><span class="line">std::mutex mtx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line">mtx.<span class="built_in">lock</span>();</span><br><span class="line">++g_data;</span><br><span class="line">cout &lt;&lt; id &lt;&lt; <span class="string">&quot; add : &quot;</span> &lt;&lt; g_data &lt;&lt; endl;</span><br><span class="line"><span class="comment">//解锁</span></span><br><span class="line">mtx.<span class="built_in">unlock</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(add, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(add, <span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主进程等待两个子线程的退出</span></span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/bfdef9c77e0a4a62b728ef6c0a6b7fc1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（3）RAII包装类管理互斥锁"><a href="#（3）RAII包装类管理互斥锁" class="headerlink" title="（3）RAII包装类管理互斥锁"></a>（3）RAII包装类管理互斥锁</h4><p><img src="https://img-blog.csdnimg.cn/0bf81243b7a24cc58bdaa1491ec2dfd3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//线程同步一：两个线程同时对一个全局变量++操作，保证最后的结果正确</span></span><br><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="type">int</span> g_data = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//互斥锁</span></span><br><span class="line">std::mutex mtx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//加锁，块作用域结束，自动释放管理的锁</span></span><br><span class="line"><span class="function">std::lock_guard&lt;mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">++g_data;</span><br><span class="line">cout &lt;&lt; id &lt;&lt; <span class="string">&quot; add : &quot;</span> &lt;&lt; g_data &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">thread <span class="title">tha</span><span class="params">(add, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">thread <span class="title">thb</span><span class="params">(add, <span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主进程等待两个子线程的退出</span></span><br><span class="line">tha.<span class="built_in">join</span>();</span><br><span class="line">thb.<span class="built_in">join</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/646db6497c1844ada4742240074bc378.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】引用叠加规则</title>
      <link href="/posts/2d0197cd.html"/>
      <url>/posts/2d0197cd.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/95791ec8f2c5476a91629cc82335441e.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引用叠加 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】std::move()仿写</title>
      <link href="/posts/cb3915df.html"/>
      <url>/posts/cb3915df.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、关于std-move"><a href="#一、关于std-move" class="headerlink" title="一、关于std::move()"></a>一、关于std::move()</h3><p><img src="https://img-blog.csdnimg.cn/939c2f2e9ed84b5083c9012b23bb0954.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>原理：将一个左值强制类型转成一个纯右值</strong></p><hr><h3 id="二、仿写std-move"><a href="#二、仿写std-move" class="headerlink" title="二、仿写std::move"></a>二、仿写std::move</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//去除引用特性</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">my_remove_reference</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> type = _Ty;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">my_remove_reference</span>&lt;_Ty&amp;&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> type = _Ty;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">my_remove_reference</span>&lt;_Ty&amp;&amp;&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> type = _Ty;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重命名</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="type">my_remove_reference_t</span> = <span class="keyword">typename</span> my_remove_reference&lt;_Ty&gt;::type;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my_move</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Ty&gt;</span></span><br><span class="line"><span class="function"><span class="type">my_remove_reference_t</span>&lt;_Ty&amp;&amp;&gt; <span class="title">my_move</span><span class="params">(_Ty&amp;&amp; arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//首次理解：return (_Ty&amp;&amp;) arg;</span></span><br><span class="line"><span class="comment">//可以理解为return static_cast&lt;_Ty&amp;&amp;&gt;(arg);</span></span><br><span class="line"><span class="comment">//考虑去除引用、右值引用特性</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="type">my_remove_reference_t</span>&lt;_Ty&gt;&amp;&amp;&gt;(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：my_remove_reference的作用就是去除_Ty类型中的引用、右值引用特性的。若不考虑此项完全可以直接使用注释所示的代码。</strong></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> move </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】类型转换</title>
      <link href="/posts/426b3c9f.html"/>
      <url>/posts/426b3c9f.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="关于四种类型转换"><a href="#关于四种类型转换" class="headerlink" title="关于四种类型转换"></a>关于四种类型转换</h3><h4 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1. 使用场景"></a>1. 使用场景</h4><h5 id="（1）static-cast-lt-新类型-gt-表达式"><a href="#（1）static-cast-lt-新类型-gt-表达式" class="headerlink" title="（1）static_cast&lt;新类型&gt;(表达式)"></a>（1）static_cast&lt;新类型&gt;(表达式)</h5><ul><li>适用于不去除常量性(const)和异变性(mutable)的场合; 就是普通的类型转换</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> b = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(a);</span><br></pre></td></tr></table></figure><h5 id="（2）const-cast-lt-新类型-gt-表达式"><a href="#（2）const-cast-lt-新类型-gt-表达式" class="headerlink" title="（2）const_cast&lt;新类型&gt;(表达式)"></a>（2）const_cast&lt;新类型&gt;(表达式)</h5><ul><li>适用于去除常性的转换;为了修改&amp;a的数据</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* pa = <span class="built_in">const_cast</span>&lt;<span class="type">int</span>*&gt;(&amp;a);</span><br></pre></td></tr></table></figure><h5 id="（3）reinterpret-cast-lt-新类型-gt-表达式"><a href="#（3）reinterpret-cast-lt-新类型-gt-表达式" class="headerlink" title="（3）reinterpret_cast&lt;新类型&gt;(表达式)"></a>（3）reinterpret_cast&lt;新类型&gt;(表达式)</h5><ul><li>适用于重新解释：修改指针+1的识别能力和*解引用能力</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span>* b = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(&amp;a);</span><br></pre></td></tr></table></figure><h5 id="（4）dynamic-cast-lt-新类型-gt-表达式"><a href="#（4）dynamic-cast-lt-新类型-gt-表达式" class="headerlink" title="（4）dynamic_cast&lt;新类型&gt;(表达式)"></a>（4）dynamic_cast&lt;新类型&gt;(表达式)</h5><ul><li>适用于多态中的转换：将派生类地址转换成基类地址</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son son;</span><br><span class="line">Base* bp = <span class="built_in">dynamic_cast</span>&lt;Base*&gt;(&amp;son);</span><br><span class="line"><span class="comment">//切记：杜绝将基类对象转成派生类</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-优点"><a href="#2-优点" class="headerlink" title="2. 优点"></a>2. 优点</h4><ul><li>见名知意</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类型转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】不同模板对象之间赋值</title>
      <link href="/posts/1816d3b6.html"/>
      <url>/posts/1816d3b6.html</url>
      
        <content type="html"><![CDATA[<hr><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">_Ty _val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">object</span>(_Ty val = <span class="number">0</span>) : _val(val)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">other</span>&gt;</span><br><span class="line">object&amp; <span class="keyword">operator</span>=(<span class="type">const</span> object&lt;other&gt;&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> != (object&lt;_Ty&gt;*) (&amp;src))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;_val = (_Ty)src._val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">object&lt;<span class="type">int</span>&gt; <span class="title">obja</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">object&lt;<span class="type">double</span>&gt; <span class="title">objb</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">obja = objb;</span><br><span class="line">cout &lt;&lt; obja._val &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong><br><img src="https://img-blog.csdnimg.cn/53f766c4eba54a37b60112bd24d035b4.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类模板 函数模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】编程识别普通指针和智能指针</title>
      <link href="/posts/c9826a3a.html"/>
      <url>/posts/c9826a3a.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、模板特化类"><a href="#一、模板特化类" class="headerlink" title="一、模板特化类"></a>一、模板特化类</h3><p>普通指针和智能指针的最大区别就是，智能指针是一个对象类型，而普通指针是一个指针类型，通过这一点，我们便可以使用通用模板和特化模板类进行区分，从而达到目的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//普通对象版本</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mybool</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">bool</span> result = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//指针特化版本</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">mybool</span>&lt;T*&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是普通指针还是智能指针</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Ty&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(_Ty&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mybool&lt;_Ty&gt;::result == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;智能指针&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;普通指针&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; iptr;</span><br><span class="line"><span class="built_in">fun</span>(p);</span><br><span class="line"><span class="built_in">fun</span>(iptr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/2318c01bd79b46a9867b317877f5684b.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】STL中deque底层剖析</title>
      <link href="/posts/b48938ae.html"/>
      <url>/posts/b48938ae.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、关于deque"><a href="#一、关于deque" class="headerlink" title="一、关于deque"></a>一、关于deque</h3><p>std::deque （ double-ended queue ，双端队列）是有下标顺序容器，它允许在其首尾两端快速插入及删除。另外，在 deque 任一端插入或删除不会非法化指向其余元素的指针或引用。</p><p>与 std::vector 相反， deque 的元素不是相接存储的：典型实现用单独分配的固定大小数组的序列，外加额外的登记，这表示下标访问必须进行二次指针解引用，与之相比 vector 的下标访问只进行一次。</p><p>deque 的存储按需自动扩展及收缩。扩张 deque 比扩张 std::vector 更优，因为它不涉及到复制既存元素到新内存位置。另一方面， deque 典型地拥有较大的最小内存开销；只保有一个元素的 deque 必须分配其整个内部数组（例如 64 位 libstdc++ 上为对象大小 8 倍； 64 位 libc++ 上为对象大小 16 倍或 4096 字节的较大者）。</p><p>deque 上常见操作的复杂度（效率）如下：</p><ul><li>随机访问——常数 O(1)</li><li>在结尾或起始插入或移除元素——常数 O(1)</li><li>插入或移除元素——线性 O(n)</li></ul><h3 id="二、底层结构"><a href="#二、底层结构" class="headerlink" title="二、底层结构"></a>二、底层结构</h3><h4 id="（1）deque迭代器"><a href="#（1）deque迭代器" class="headerlink" title="（1）deque迭代器"></a>（1）deque迭代器</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Deque_iterator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> _Tp** _Map_pointer;</span><br><span class="line"></span><br><span class="line">_Tp* _M_cur;<span class="comment">//当前区块元素地址</span></span><br><span class="line">_Tp* _M_first;<span class="comment">//当前区块首元素地址</span></span><br><span class="line">_Tp* _M_last;<span class="comment">//当前区块尾元素地址</span></span><br><span class="line">_Map_pointer _M_node; <span class="comment">//当前区块首地址（二级指针）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（2）deque结构"><a href="#（2）deque结构" class="headerlink" title="（2）deque结构"></a>（2）deque结构</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Tp</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_Deque_base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> _Deque_iterator&lt;_Tp&gt; iterator;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">_Tp** _M_map;<span class="comment">//_Tp* _M_map[];首地址</span></span><br><span class="line"><span class="type">size_t</span> _M_map_size;<span class="comment">//_M_map的缓冲区大小</span></span><br><span class="line">iterator _M_start;<span class="comment">//标识_M_map的首个内存区块的迭代器</span></span><br><span class="line">iterator _M_finish;<span class="comment">//标识_M_map的最后一个内存区块的迭代器</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（3）内存结构图"><a href="#（3）内存结构图" class="headerlink" title="（3）内存结构图"></a>（3）内存结构图</h4><p><img src="https://img-blog.csdnimg.cn/2e5c01e379df44c89a6c144ae3e35ebc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>deque内存的增长方式：</strong></p><ul><li>push_front()，头插元素，若当前区块满，则向上开辟新的区块，改变_M_start迭代器的内容重新标识即可。</li><li>push_back()，尾插元素，若当前区块满，则向下开辟新的区块，改变_M_finish迭代器的内容重新标识即可。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deque </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】SGI二级空间配置器(内存池)</title>
      <link href="/posts/32956ecb.html"/>
      <url>/posts/32956ecb.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、二级空间配置器中的内存池结构"><a href="#一、二级空间配置器中的内存池结构" class="headerlink" title="一、二级空间配置器中的内存池结构"></a>一、二级空间配置器中的内存池结构</h3><h4 id="（1）内存池初始状态"><a href="#（1）内存池初始状态" class="headerlink" title="（1）内存池初始状态"></a>（1）内存池初始状态</h4><p><img src="https://img-blog.csdnimg.cn/3ce0bccbec2445c8bfbea1621955b386.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）当外界使用内存池"><a href="#（2）当外界使用内存池" class="headerlink" title="（2）当外界使用内存池"></a>（2）当外界使用内存池</h4><p><code>my_list.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;my_alloc.h&quot;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;my_iterator.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;my_construct.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_LIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> pzj</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>,<span class="keyword">class</span> <span class="title class_">_A</span> = alloc &gt;</span><br><span class="line"><span class="keyword">class</span> mylist</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">struct</span> _Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_Node</span> *  _Nodeptr;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Node</span></span><br><span class="line">&#123;</span><br><span class="line">_Nodeptr _Prev,_Next;</span><br><span class="line">_Ty      _Value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Acc</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Acc</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_Node</span> *&amp; _Nodepref;</span><br><span class="line"><span class="keyword">typedef</span> _Ty &amp;           _Vref;</span><br><span class="line"><span class="type">static</span> _Vref _Value(_Nodeptr _P)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (*_P)._Value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> _Nodepref _Prev(_Nodeptr _P)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (*_P)._Prev;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> _Nodepref _Next(_Nodeptr _P)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (*_P)._Next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> _Ty          value_type;</span><br><span class="line"><span class="keyword">typedef</span> _Ty &amp;        reference;</span><br><span class="line"><span class="keyword">typedef</span> _Ty *        pointer;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">const</span> _Ty &amp;  const_reference;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">const</span> _Ty *  const_pointer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> _A           allocator_type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pzj::simple_alloc&lt;_Node,_A&gt; data_allocate;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iterator</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">const_iterator</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">const_iterator</span> :  <span class="keyword">public</span> pzj::_Bidit&lt;_Ty,<span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">const_iterator</span>(_Nodeptr _P = <span class="literal">NULL</span>):_Ptr(_P) &#123;&#125;</span><br><span class="line">const_reference <span class="keyword">operator</span>*() <span class="type">const</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _Acc::_Value(_Ptr);</span><br><span class="line">&#125;</span><br><span class="line">const_pointer <span class="keyword">operator</span>-&gt;() <span class="type">const</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (&amp;**<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">const_iterator <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">_Ptr = _Acc::_Next(_Ptr);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">const_iterator <span class="keyword">operator</span>++(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">const_iterator _Tmp = *<span class="keyword">this</span>;</span><br><span class="line">++*<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">return</span> _Tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const_iterator <span class="keyword">operator</span>--()</span><br><span class="line">&#123;</span><br><span class="line">_Ptr = _Acc::_Prev(_Ptr);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">const_iterator <span class="keyword">operator</span>--(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">const_iterator _Tmp = *<span class="keyword">this</span>;</span><br><span class="line">--*<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">return</span> _Tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> const_iterator &amp;_X) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> (<span class="keyword">this</span>-&gt;_Ptr == _X._Ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> const_iterator &amp;_X) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == _X);</span><br><span class="line">&#125;</span><br><span class="line">_Nodeptr _Mynode() <span class="type">const</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">_Nodeptr _Ptr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iterator</span> : <span class="keyword">public</span> const_iterator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">iterator</span>(_Nodeptr _P = <span class="literal">NULL</span>):<span class="built_in">const_iterator</span>(_P) &#123;&#125;</span><br><span class="line">reference <span class="keyword">operator</span>*() <span class="type">const</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _Acc::_Value(<span class="keyword">this</span>-&gt;_Ptr);</span><br><span class="line">&#125;</span><br><span class="line">pointer <span class="keyword">operator</span>-&gt;() <span class="type">const</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (&amp;**<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">iterator <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;_Ptr = _Acc::_Next(<span class="keyword">this</span>-&gt;_Ptr);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">iterator <span class="keyword">operator</span>++(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">iterator _Tmp = *<span class="keyword">this</span>;</span><br><span class="line">++*<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">return</span> _Tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iterator <span class="keyword">operator</span>--()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;_Ptr = _Acc::_Prev(<span class="keyword">this</span>-&gt;_Ptr);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">iterator <span class="keyword">operator</span>--(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">iterator _Tmp = *<span class="keyword">this</span>;</span><br><span class="line">--*<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">return</span> _Tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> iterator &amp;_X) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> (<span class="keyword">this</span>-&gt;_Ptr == _X._Ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> iterator &amp;_X) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == _X);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">iterator</span>(_Acc::_Next(_Head));&#125;</span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">iterator</span>(_Head);&#125;</span><br><span class="line"><span class="function">const_iterator <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">const_iterator</span>(_Acc::_Next(_Head));&#125;</span><br><span class="line"><span class="function">const_iterator <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">const_iterator</span>(_Head);&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">mylist</span>():_Size(<span class="number">0</span>),_Head(_Buynode()) &#123;&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">mylist</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">clear</span>();</span><br><span class="line">_Freenode(_Head);</span><br><span class="line">_Head = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> const_iterator _It;</span><br><span class="line"></span><br><span class="line"><span class="function">reference <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *<span class="built_in">begin</span>();&#125;</span><br><span class="line"><span class="function">const_reference <span class="title">front</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> *<span class="built_in">begin</span>();&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">reference <span class="title">back</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *--<span class="built_in">end</span>();&#125;</span><br><span class="line"><span class="function">const_reference <span class="title">back</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> *--<span class="built_in">end</span>();&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_front</span><span class="params">(<span class="type">const</span> _Ty _X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">insert</span>(<span class="built_in">begin</span>(),_X);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> _Ty &amp;_X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">insert</span>(<span class="built_in">end</span>(),_X);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(iterator _P,<span class="type">size_t</span> _N,<span class="type">const</span> _Ty &amp;_X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;_N;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">insert</span>(_P,_X);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(iterator _P,<span class="type">const</span> _Ty *_F, <span class="type">const</span> _Ty *_L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(; _F != _L; ++_F)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">insert</span>(_P,*_F);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(iterator _P,_It _F, _It _L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(; _F != _L; ++_F)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">insert</span>(_P,*_F);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator _P,<span class="type">const</span> _Ty &amp;_X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Nodeptr _S = _P._Mynode();</span><br><span class="line">_Acc::_Prev(_S)  = _Buynode(_Acc::_Prev(_S),_S);</span><br><span class="line">_S = _Acc::_Prev(_S);</span><br><span class="line">_Acc::_Next(_Acc::_Prev(_S)) = _S;</span><br><span class="line"><span class="comment">//_Acc::_Value(_S) = _X;</span></span><br><span class="line"><span class="built_in">construct</span>(&amp;_Acc::_Value(_S),_X);</span><br><span class="line">_Size+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">iterator</span>(_S);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">erase</span>(<span class="built_in">begin</span>(),<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">erase</span>(--<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_front</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">erase</span>(<span class="built_in">begin</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(iterator _F, iterator _L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(; _F != _L; )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">erase</span>(_F++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">const</span> _Ty &amp;_X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">iterator _F = <span class="built_in">begin</span>(), _L = <span class="built_in">end</span>();</span><br><span class="line"><span class="keyword">for</span>(; _F != _L; )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*_F == _X)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">erase</span>(_F++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">++_F;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator _P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Nodeptr _S = _P++._Mynode();<span class="comment">// </span></span><br><span class="line">_Acc::_Next(_Acc::_Prev(_S)) = _Acc::_Next(_S);</span><br><span class="line">_Acc::_Prev(_Acc::_Next(_S)) = _Acc::_Prev(_S);</span><br><span class="line"><span class="built_in">destroy</span>(&amp;_Acc::_Value(_S));</span><br><span class="line">_Freenode(_S);</span><br><span class="line">_Size-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> _P;<span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Nodeptr _Buynode(_Nodeptr _Parg = <span class="literal">NULL</span>, _Nodeptr _Narg = <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//_Nodeptr _S = (_Nodeptr)malloc(sizeof(_Node));</span></span><br><span class="line"><span class="comment">//使用默认的二级空间配置器</span></span><br><span class="line">_Nodeptr _S = data_allocate::<span class="built_in">allocate</span>(<span class="number">1</span>);<span class="comment">// malloc </span></span><br><span class="line">_Acc::_Prev(_S) = _Parg == <span class="literal">NULL</span> ? _S:_Parg;</span><br><span class="line">_Acc::_Next(_S) = _Narg == <span class="literal">NULL</span> ? _S:_Narg;</span><br><span class="line"><span class="keyword">return</span> _S;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _Freenode(_Nodeptr _P)</span><br><span class="line">&#123;</span><br><span class="line">data_allocate::<span class="built_in">deallocate</span>(_P,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Nodeptr _Head;</span><br><span class="line"><span class="type">size_t</span>   _Size;</span><br><span class="line">_A       allocator;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>Demo.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;my_list.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;my_alloc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;my_construct.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pzj::mylist&lt;<span class="type">int</span>&gt; ilist;</span><br><span class="line">ilist.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; *ilist.<span class="built_in">begin</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、流程分析"><a href="#二、流程分析" class="headerlink" title="二、流程分析"></a>二、流程分析</h3><ol><li>程序运行时调用ilist的默认构造函数</li><li>mylist()调用_Buynode()初始化_Head</li><li>_Buynode()中调用（simple_alloc<_Node, pzj::alloc>）data_allocate::allocate(1)；为_Head申请空间</li><li>（simple_alloc<_Node, pzj::alloc>）data_allocate::allocate(1)调用（<code>__default_alloc_template&lt;0, 0&gt;</code>默认的二级空间配置器）alloc::allocate(sizeof(T) * n);（其中T是Node类型：12字节）</li><li>12 &gt; 128字节为假，使用二级空间适配器申请空间，将得到的空间还给_Head（细节代码注释见）</li><li>此时mylist()函数结束，ilist初始化完成</li></ol><h3 id="三、使用中的内存池"><a href="#三、使用中的内存池" class="headerlink" title="三、使用中的内存池"></a>三、使用中的内存池</h3><p><img src="https://img-blog.csdnimg.cn/c4db389a468e487fb4dcc5387f3a373d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="四、完整代码"><a href="#四、完整代码" class="headerlink" title="四、完整代码"></a>四、完整代码</h3><h4 id="（1）类型萃取"><a href="#（1）类型萃取" class="headerlink" title="（1）类型萃取"></a>（1）类型萃取</h4><p><code>my_type_traits.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_TYPE_TRAITS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_TYPE_TRAITS_H</span></span><br><span class="line"><span class="keyword">namespace</span> pzj</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__true_type</span> &#123;&#125;;<span class="comment">//真</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__false_type</span> &#123;&#125;;<span class="comment">//假</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自设计类型：大部分是假的无关紧要的类型（人话：有关紧要）</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">type</span>&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  this_dummy_member_must_be_first;</span><br><span class="line"><span class="keyword">typedef</span> __false_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __false_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __false_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __false_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __false_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内置类型：基本上都是真的无关紧要的类型（人话：无关紧要）</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">char</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">signed</span> <span class="type">char</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">short</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">unsigned</span> <span class="type">short</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">long</span> <span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">float</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">double</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">long</span> <span class="type">double</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//所有的指针类型：真的无关紧要</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;T*&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（2）迭代器"><a href="#（2）迭代器" class="headerlink" title="（2）迭代器"></a>（2）迭代器</h4><p><code>my_iterator.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_ITERATOR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_ITERATOR_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> pzj</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">ptrdiff_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">input_iterator_tag</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">output_iterator_tag</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">forward_iterator_tag</span> : <span class="keyword">public</span> input_iterator_tag &#123;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bidirectional_iterator_tag</span> : <span class="keyword">public</span> forward_iterator_tag &#123;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">random_access_iterator_tag</span> : <span class="keyword">public</span> bidirectional_iterator_tag &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_C</span>, <span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_D</span> = <span class="type">ptrdiff_t</span>, <span class="keyword">class</span> _Pointer = _Ty*,</span><br><span class="line"><span class="keyword">class</span> _Reference = _Ty&amp;&gt;</span><br><span class="line"><span class="keyword">struct</span> iterator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> _C          iterator_category;</span><br><span class="line"><span class="keyword">typedef</span> _Ty         value_type;</span><br><span class="line"><span class="keyword">typedef</span> _D          difference_type;</span><br><span class="line"><span class="keyword">typedef</span> _Pointer    pointer;</span><br><span class="line"><span class="keyword">typedef</span> _Reference  reference;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Iterator</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iterator_traits</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">iterator_traits</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::iterator_category iterator_category;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::value_type        value_type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::difference_type   differce_type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::pointer           pointer;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::reference         reference;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iterator_traits</span>&lt;T*&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">iterator_traits</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> random_access_iterator_tag iterator_category;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> T                          value_type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="type">int</span>                        differce_type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> T *                        pointer;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> T&amp;                         reference;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">iterator_traits</span>&lt;<span class="type">const</span> T*&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">iterator_traits</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> random_access_iterator_tag iterator_category;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> T                          value_type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="type">int</span>                        differce_type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="type">const</span> T*                   pointer;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="type">const</span> T&amp;                   reference;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/// SGI</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_II</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_II&gt;::<span class="function">iterator_category</span></span><br><span class="line"><span class="function"><span class="title">iterator_category</span><span class="params">(<span class="type">const</span> _II&amp;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_II&gt;::iterator_category cate;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_II</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_II&gt;::<span class="function">value_type *</span></span><br><span class="line"><span class="function"><span class="title">value_type</span><span class="params">(<span class="type">const</span> _II&amp;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="keyword">static_cast</span>&lt;<span class="keyword">typename</span> iterator_traits&lt;_II&gt;::value_type*&gt;(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_II</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_II&gt;::<span class="function">difference_type*</span></span><br><span class="line"><span class="function"><span class="title">difference_type</span><span class="params">(<span class="type">const</span> _II&amp;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">typename</span> iterator_traits&lt;_II&gt;::difference_type*&gt; (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正向迭代器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_D</span> = <span class="type">ptrdiff_t</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> _Forit :<span class="keyword">public</span> iterator&lt;forward_iterator_tag, _Ty, _D&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向迭代器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>,<span class="keyword">class</span> <span class="title class_">_D</span> = <span class="type">ptrdiff_t</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> _Bidit :<span class="keyword">public</span> iterator&lt;bidirectional_iterator_tag,_Ty,_D&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机迭代器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>,<span class="keyword">class</span> <span class="title class_">_D</span> = <span class="type">ptrdiff_t</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> _Ranit :<span class="keyword">public</span> iterator&lt; random_access_iterator_tag, _Ty, _D&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_II</span>,<span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __advance(_II&amp; i, _D n, input_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (n--)  ++i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_BI</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __advance(_BI &amp; i, _D n, bidirectional_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (n--) ++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (n++) --i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_RAI</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __advance(_RAI&amp; i, _D n, random_access_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line">i += n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _II,<span class="keyword">class</span> _D&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">advance</span><span class="params">(_II&amp; i, _D n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//iterator_traits&lt;_II&gt;();</span></span><br><span class="line"><span class="comment">//typedef typename iterator_traits&lt;_II&gt;::iterator_category cate;</span></span><br><span class="line">__advance(i, n, <span class="built_in">iterator_category</span>(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_II</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_II&gt;::difference_type  </span><br><span class="line">__distance(_II _F, _II _L, input_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typename</span> iterator_traits&lt;_II&gt;::difference_type n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (_F != _L)</span><br><span class="line">&#123;</span><br><span class="line">_F++;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_RAI</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_RAI&gt;::difference_type</span><br><span class="line">__distance(_RAI _F, _RAI _L, random_access_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _L - _F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_II</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_II&gt;::<span class="function">difference_type</span></span><br><span class="line"><span class="function"><span class="title">distance</span><span class="params">(_II _F, _II _L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> __disstance(_F, _L, <span class="built_in">iterator_category</span>(_F));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（3）一、二级空间配置器"><a href="#（3）一、二级空间配置器" class="headerlink" title="（3）一、二级空间配置器"></a>（3）一、二级空间配置器</h4><p><code>my_alloc.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_ALLOC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_ALLOC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> pzj</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;new&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __THROW_BAD_ALLOC throw std::bad_alloc;</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> !defined(__THROW_BAD_ALLOC)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __THROW_BAD_ALLOC std::cerr&lt;&lt;<span class="string">&quot;out of memory&quot;</span>&lt;&lt;std::endl; exit(1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> inst&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">__malloc_alloc_template</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> PFUN = <span class="built_in">void</span> (*)();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">oom_malloc</span><span class="params">(<span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">void</span>* result = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">void</span> (*my_malloc_handler) () = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">my_malloc_handler = __malloc_alloc_oom_handler;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == my_malloc_handler)</span><br><span class="line">&#123;</span><br><span class="line">__THROW_BAD_ALLOC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">my_malloc_handler</span>();</span><br><span class="line">result = <span class="built_in">malloc</span>(n);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != result)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">oom_realloc</span><span class="params">(<span class="type">void</span>* p, <span class="type">size_t</span> new_sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">void</span>* result = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">void</span> (*my_malloc_handler) () = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">for</span> (;;)</span><br><span class="line">&#123;</span><br><span class="line">my_malloc_handler = __malloc_alloc_oom_handler;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == my_malloc_handler)</span><br><span class="line">&#123;</span><br><span class="line">__THROW_BAD_ALLOC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">my_malloc_handler</span>();</span><br><span class="line">result = <span class="built_in">realloc</span>(p, new_sz);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> != result)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> PFUN __malloc_alloc_oom_handler;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">void</span>* result = <span class="built_in">malloc</span>(n);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == result)</span><br><span class="line">&#123;</span><br><span class="line">result = <span class="built_in">oom_malloc</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>* p, <span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">reallocate</span><span class="params">(<span class="type">void</span>* p, <span class="type">size_t</span> old_sz, <span class="type">size_t</span> new_sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">void</span>* result = <span class="built_in">realloc</span>(p, new_sz);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == result)</span><br><span class="line">&#123;</span><br><span class="line">result = <span class="built_in">oom_realloc</span>(p, new_sz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span>  PFUN <span class="title">set_malloc_handler</span><span class="params">(PFUN p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PFUN old = __malloc_alloc_oom_handler;</span><br><span class="line">__malloc_alloc_oom_handler = p;</span><br><span class="line"><span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> inst&gt;</span><br><span class="line"><span class="keyword">typename</span> __malloc_alloc_template&lt;inst&gt;::PFUN</span><br><span class="line">__malloc_alloc_template&lt;inst&gt;::__malloc_alloc_oom_handler = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef __malloc_alloc_template&lt;0&gt; malloc_alloc;</span></span><br><span class="line"><span class="keyword">using</span> malloc_alloc = __malloc_alloc_template&lt;<span class="number">0</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> &#123; __ALIGN = <span class="number">8</span> &#125;;</span><br><span class="line"><span class="keyword">enum</span> &#123; __MAX_BYTES = <span class="number">128</span> &#125;;</span><br><span class="line"><span class="keyword">enum</span> &#123; __NFREELISTS = __MAX_BYTES / __ALIGN &#125;; <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">bool</span> threads,<span class="type">int</span> inst&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">__default_alloc_template</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">union</span> <span class="title class_">obj</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">union</span> <span class="title class_">obj</span>* free_list_link; <span class="comment">// next;</span></span><br><span class="line"><span class="comment">//char client_data[1];</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> obj* <span class="keyword">volatile</span> free_list[__NFREELISTS];</span><br><span class="line"><span class="type">static</span> <span class="type">char</span>* start_free;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span>* end_free;</span><br><span class="line"><span class="type">static</span> <span class="type">size_t</span> heap_size; <span class="comment">// total</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">size_t</span> <span class="title">ROUND_UP</span><span class="params">(<span class="type">size_t</span> bytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (bytes + __ALIGN - <span class="number">1</span>) &amp; ~(__ALIGN - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">size_t</span> <span class="title">FREELIST_INDEX</span><span class="params">(<span class="type">size_t</span> bytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (bytes + __ALIGN - <span class="number">1</span>) / __ALIGN - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">char</span>* <span class="title">chunk_alloc</span><span class="params">(<span class="type">size_t</span> size, <span class="type">int</span>&amp; nobjs)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//                           </span></span><br><span class="line"><span class="type">char</span>* result = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">size_t</span> total_bytes = size * nobjs; </span><br><span class="line"><span class="type">size_t</span> bytes_left = end_free - start_free; </span><br><span class="line"><span class="keyword">if</span> (bytes_left &gt;= total_bytes) <span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">result = start_free;</span><br><span class="line">start_free = start_free + total_bytes;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bytes_left &gt;= size) <span class="comment">// &gt;= 1 </span></span><br><span class="line">&#123;</span><br><span class="line">nobjs = bytes_left / size; <span class="comment">// </span></span><br><span class="line">total_bytes = size * nobjs; <span class="comment">//</span></span><br><span class="line">result = start_free;</span><br><span class="line">start_free = start_free + total_bytes;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">size_t</span> bytes_to_get = <span class="number">2</span> * total_bytes + <span class="built_in">ROUND_UP</span>(heap_size &gt;&gt; <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (bytes_left &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">obj* <span class="keyword">volatile</span>* my_free_list = free_list + <span class="built_in">FREELIST_INDEX</span>(bytes_left);</span><br><span class="line">((obj*)start_free)-&gt;free_list_link = *my_free_list;</span><br><span class="line">*my_free_list = (obj*)start_free;</span><br><span class="line">&#125;</span><br><span class="line">start_free = (<span class="type">char</span>*)<span class="built_in">malloc</span>(bytes_to_get);<span class="comment">//system heap;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == start_free)</span><br><span class="line">&#123;</span><br><span class="line">obj* <span class="keyword">volatile</span>* my_free_list = <span class="literal">NULL</span>;</span><br><span class="line">obj* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = size; i &lt;= __MAX_BYTES; i += __ALIGN)</span><br><span class="line">&#123;</span><br><span class="line">my_free_list = free_list + <span class="built_in">FREELIST_INDEX</span>(i);</span><br><span class="line">p = *my_free_list;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> != p)</span><br><span class="line">&#123;</span><br><span class="line">*my_free_list = p-&gt;free_list_link;</span><br><span class="line">start_free = (<span class="type">char</span>*)p;</span><br><span class="line">end_free = start_free + i;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">chunk_alloc</span>(size, nobjs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">start_free = (<span class="type">char</span>*)malloc_alloc::<span class="built_in">allocate</span>(bytes_to_get);</span><br><span class="line">&#125;</span><br><span class="line">end_free = start_free + bytes_to_get;</span><br><span class="line">heap_size += bytes_to_get;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">chunk_alloc</span>(size, nobjs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">refill</span><span class="params">(<span class="type">size_t</span> size)</span> <span class="comment">// </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> nobjs = <span class="number">20</span>; </span><br><span class="line"><span class="type">char</span>* chunk = <span class="built_in">chunk_alloc</span>(size, nobjs); <span class="comment">// </span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> == nobjs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> chunk;</span><br><span class="line">&#125;</span><br><span class="line">obj* <span class="keyword">volatile</span>* my_free_list = <span class="literal">NULL</span>;</span><br><span class="line">obj* result = (obj*)chunk;</span><br><span class="line">obj* current_obj = <span class="literal">NULL</span> ,* next_obj = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">my_free_list = free_list + <span class="built_in">FREELIST_INDEX</span>(size);</span><br><span class="line">*my_free_list = next_obj = (obj*)(chunk + size);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; ; ++i)</span><br><span class="line">&#123;</span><br><span class="line">current_obj = next_obj;</span><br><span class="line">next_obj = (obj*)((<span class="type">char</span>*)next_obj + size);</span><br><span class="line"><span class="keyword">if</span> (i == nobjs - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">current_obj-&gt;free_list_link = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">current_obj-&gt;free_list_link = next_obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//申请空间</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//size &gt; 128 调用一级空间适配器</span></span><br><span class="line"><span class="keyword">if</span> (size &gt; (<span class="type">size_t</span>)__MAX_BYTES)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> malloc_alloc::<span class="built_in">allocate</span>(size);</span><br><span class="line">&#125;</span><br><span class="line">obj* result = <span class="literal">nullptr</span>;</span><br><span class="line">obj* <span class="keyword">volatile</span>* my_free_list = <span class="literal">nullptr</span>; <span class="comment">//</span></span><br><span class="line">my_free_list = free_list + <span class="built_in">FREELIST_INDEX</span>(size);</span><br><span class="line">result = *my_free_list;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">nullptr</span> == result)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">void</span>* r = <span class="built_in">refill</span>(<span class="built_in">ROUND_UP</span>(size)); <span class="comment">// size = 6; 8 ; size = 10; 16 </span></span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">*my_free_list = result-&gt;free_list_link;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>* p, <span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &gt; (<span class="type">size_t</span>)__MAX_BYTES)</span><br><span class="line">&#123;</span><br><span class="line">malloc_alloc::<span class="built_in">deallocate</span>(p, n);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">obj* q = (obj*)p;</span><br><span class="line">obj* <span class="keyword">volatile</span>* my_free_list = free_list +  <span class="built_in">FREELIST_INDEX</span>(n);</span><br><span class="line">q-&gt;free_list_link = *my_free_list;</span><br><span class="line">*my_free_list = q;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">reallocate</span><span class="params">(<span class="type">void</span>* p, <span class="type">size_t</span> old_sz, <span class="type">size_t</span> new_sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (old_sz &gt; (<span class="type">size_t</span>)__MAX_BYTES &amp;&amp; new_sz &gt; (<span class="type">size_t</span>)__MAX_BYTES)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> malloc_alloc::<span class="built_in">reallocate</span>(p, old_sz, new_sz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">ROUND_UP</span>(old_sz) == <span class="built_in">ROUND_UP</span>(new_sz))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">size_t</span> sz = old_sz &lt; new_sz ? old_sz : new_sz;</span><br><span class="line"><span class="type">void</span>* s = <span class="built_in">allocate</span>(new_sz);</span><br><span class="line"><span class="built_in">memmove</span>(s, p, sz);</span><br><span class="line"><span class="built_in">deallocate</span>(p, old_sz);</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">bool</span> threads, <span class="type">int</span> inst&gt;</span><br><span class="line"><span class="keyword">typename</span> __default_alloc_template&lt;threads, inst&gt;::obj* <span class="keyword">volatile</span></span><br><span class="line">__default_alloc_template&lt;threads, inst&gt;::free_list[__NFREELISTS] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">bool</span> threads, <span class="type">int</span> inst&gt;</span><br><span class="line"><span class="type">char</span>* __default_alloc_template&lt;threads, inst&gt;::start_free = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">bool</span> threads, <span class="type">int</span> inst&gt;</span><br><span class="line"><span class="type">char</span>* __default_alloc_template&lt;threads, inst&gt;::end_free = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">bool</span> threads, <span class="type">int</span> inst&gt;</span><br><span class="line"><span class="type">size_t</span> __default_alloc_template&lt;threads, inst&gt;::heap_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// SGI STL</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __USE_MALLOC</span></span><br><span class="line"><span class="keyword">typedef</span> __malloc_alloc_template&lt;<span class="number">0</span>&gt; malloc_alloc;</span><br><span class="line"><span class="keyword">typedef</span> malloc_alloc alloc;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> __default_alloc_template&lt;<span class="number">0</span>, <span class="number">0</span>&gt; alloc;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="keyword">class</span> <span class="title class_">Alloc</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">simple_alloc</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> T* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> n)</span> <span class="comment">// n  T 类型 operator new []</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (T*)Alloc::<span class="built_in">allocate</span>(<span class="built_in">sizeof</span>(T) * n); <span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> T* <span class="title">allocate</span><span class="params">()</span> <span class="comment">//   1 T</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (T*)Alloc::<span class="built_in">allocate</span>(<span class="built_in">sizeof</span>(T));    <span class="comment">// operator new </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">deallocate</span><span class="params">(T* p, <span class="type">size_t</span> n)</span> <span class="comment">// n T </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p) <span class="keyword">return</span>;</span><br><span class="line">Alloc::<span class="built_in">deallocate</span>(p, <span class="built_in">sizeof</span>(T) * n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">deallocate</span><span class="params">(T* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == p) <span class="keyword">return</span>;</span><br><span class="line">Alloc::<span class="built_in">deallocate</span>(p, <span class="built_in">sizeof</span>(T));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（4）构造、析构"><a href="#（4）构造、析构" class="headerlink" title="（4）构造、析构"></a>（4）构造、析构</h4><p><code>my_construct.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_CONSTRUCT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_CONSTRUCT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;my_iterator.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;my_type_traits.h&quot;</span></span></span><br><span class="line"><span class="keyword">namespace</span> pzj</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T1,<span class="keyword">class</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">construct</span><span class="params">(T1* p, <span class="type">const</span> T2&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span> (p) <span class="built_in">T1</span>(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">construct</span><span class="params">(T *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span> (p) <span class="built_in">T</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">(T* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p-&gt;~<span class="built_in">T</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_FI</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __destroy_aux(_FI _F, _FI _L, pzj::__true_type)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_FI</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __destroy_aux(_FI _F, _FI _L, pzj::__false_type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (; _F != _L; ++_F)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">destroy</span>(&amp;*_F);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_FI</span>, <span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __destroy(_FI _F, _FI _L, T*) <span class="comment">// value_type;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; typeid(T).name() &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//pzj::__type_traits&lt;T&gt;();</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> pzj::__type_traits&lt;T&gt;::has_trivial_destructor dest;</span><br><span class="line">__destroy_aux(_F, _L, <span class="built_in">dest</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _FI&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">(_FI _F, _FI _L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__destroy(_F, _L, pzj::<span class="built_in">value_type</span>(_F));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二级空间配置器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】SGI一级空间配置器</title>
      <link href="/posts/aa63a38d.html"/>
      <url>/posts/aa63a38d.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、SGI空间配置器介绍"><a href="#一、SGI空间配置器介绍" class="headerlink" title="一、SGI空间配置器介绍"></a>一、SGI空间配置器介绍</h3><p><img src="https://img-blog.csdnimg.cn/3f5d240d647243f099d612bd48414447.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>一级配置器：</strong></p><ul><li>使用malloc / free</li></ul><p><strong>二级配置器：</strong></p><div class="table-container"><table><thead><tr><th>申请/释放空间</th><th>使用手段</th></tr></thead><tbody><tr><td>&gt; 128字节</td><td>使用一级配置器malloc / free</td></tr><tr><td>&lt;= 128字节</td><td>使用使用内存池memory pool</td></tr></tbody></table></div><p><strong>注意：二级配置器有可能会使用一级配置器。</strong></p><h3 id="二、一级空间配置器的实现"><a href="#二、一级空间配置器的实现" class="headerlink" title="二、一级空间配置器的实现"></a>二、一级空间配置器的实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_ALLOC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_ALLOC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> pzj</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//开关语句</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;new&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __THROW_BAD_ALLOC throw std::bad_alloc;</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> !defined (__THROW_BAD_ALLOC)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __THROW_BAD_ALLOC std::cout &lt;&lt; <span class="string">&quot;Out Of Memory&quot;</span>&lt;&lt; endl; exit(1);</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2:05</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> inst&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">__malloc_alloc_template</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">using</span> PFUN = <span class="built_in">void</span>(*)();</span><br><span class="line"><span class="comment">//typedef void(*PFUN)();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//malloc空间不足</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">oom_malloc</span><span class="params">(<span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">void</span>* result = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">void</span> (*my_malloc_handler)() = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">my_malloc_handler = __malloc_alloc_oom_handler;</span><br><span class="line"><span class="keyword">if</span> (my_malloc_handler == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">__THROW_BAD_ALLOC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放出更多内存</span></span><br><span class="line"><span class="built_in">my_malloc_handler</span>();</span><br><span class="line">result = <span class="built_in">malloc</span>(n);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//realloc空间不足</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">oom_realloc</span><span class="params">(<span class="type">void</span>* p, <span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">void</span>* result = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">void</span> (*my_malloc_handler)() = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">my_malloc_handler = __malloc_alloc_oom_handler;</span><br><span class="line"><span class="keyword">if</span> (my_malloc_handler == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">__THROW_BAD_ALLOC;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放出更多内存</span></span><br><span class="line"><span class="built_in">my_malloc_handler</span>();</span><br><span class="line">result = <span class="built_in">realloc</span>(p ,n);</span><br><span class="line"><span class="keyword">if</span> (result != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数指针解决内存不足</span></span><br><span class="line"><span class="type">static</span> PFUN __malloc_alloc_oom_handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//malloc申请空间</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">void</span>* result = <span class="built_in">malloc</span>(n);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">oom_malloc</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//free释放空间</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>* p, <span class="type">size_t</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//realloc扩容</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span>* <span class="title">reallocate</span><span class="params">(<span class="type">void</span>* p, <span class="type">size_t</span> old_size, <span class="type">size_t</span> new_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">void</span>* result = <span class="built_in">realloc</span>(p, new_size);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">oom_realloc</span>(p, new_size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决内存不足</span></span><br><span class="line"><span class="function"><span class="type">static</span> PFUN <span class="title">set_malloc_handler</span><span class="params">(PFUN p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PFUN old = __malloc_alloc_oom_handler;</span><br><span class="line">__malloc_alloc_oom_handler = p;</span><br><span class="line"><span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外初始化</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> inst&gt;</span><br><span class="line"><span class="keyword">typename</span> __malloc_alloc_template&lt;inst&gt;::PFUN</span><br><span class="line">__malloc_alloc_template&lt;inst&gt;::__malloc_alloc_oom_handler = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型重命名</span></span><br><span class="line"><span class="keyword">typedef</span> __malloc_alloc_template&lt;<span class="number">0</span>&gt; malloc_alloc;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、一级空间配置器测试"><a href="#三、一级空间配置器测试" class="headerlink" title="三、一级空间配置器测试"></a>三、一级空间配置器测试</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;my_alloc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//占用的空间</span></span><br><span class="line"><span class="type">char</span>* p = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放空间函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//将</span></span><br><span class="line">pzj::malloc_alloc::<span class="built_in">set_malloc_handler</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//设置内存清理函数</span></span><br><span class="line">pzj::malloc_alloc::<span class="built_in">set_malloc_handler</span>(rest);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开辟新空间</span></span><br><span class="line"><span class="type">void</span>* sp = pzj::malloc_alloc::<span class="built_in">allocate</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一级空间配置器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】空间配置器（construct、destroy）</title>
      <link href="/posts/e302929f.html"/>
      <url>/posts/e302929f.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、类型萃取实现对象构建、析构"><a href="#一、类型萃取实现对象构建、析构" class="headerlink" title="一、类型萃取实现对象构建、析构"></a>一、类型萃取实现对象构建、析构</h3><h4 id="（1）Object-h"><a href="#（1）Object-h" class="headerlink" title="（1）Object.h"></a>（1）Object.h</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> OBJECT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OBJECT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Ty _val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>(<span class="type">const</span> _Ty&amp; val = <span class="number">0</span>) : _val(val)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Object: &quot;</span> &lt;&lt; _val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Object</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~Object()&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="（2）my-iterator-h"><a href="#（2）my-iterator-h" class="headerlink" title="（2）my_iterator.h"></a>（2）my_iterator.h</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_ITERATOR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_ITERATOR_H</span></span><br><span class="line"><span class="keyword">namespace</span> pzj</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//只读迭代器标记</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">input_iterator_tag</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//只写迭代器标记</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">output_iterator_tag</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正向迭代器标记</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">forward_iterator_tag</span> : <span class="keyword">public</span> input_iterator_tag &#123;&#125;;</span><br><span class="line"><span class="comment">//双向迭代器标记</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bidirectional_iterator_tag</span> : <span class="keyword">public</span> forward_iterator_tag &#123;&#125;;</span><br><span class="line"><span class="comment">//随机迭代器标记</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">random_iterator_tag</span> : <span class="keyword">public</span> bidirectional_iterator_tag &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">//指针差值类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">ptrdiff_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局迭代器iterator</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_C</span>, <span class="keyword">class</span> <span class="title class_">_Ty</span>,<span class="keyword">class</span> <span class="title class_">_D</span> = <span class="type">ptrdiff_t</span>, <span class="keyword">class</span> _Pointer = _Ty*, <span class="keyword">class</span> _Reference = _Ty&amp;&gt;</span><br><span class="line"><span class="keyword">struct</span> iterator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> _Citerator_category;<span class="comment">//迭代器类别</span></span><br><span class="line"><span class="keyword">typedef</span> _Tyvalue_type;<span class="comment">//数值类型</span></span><br><span class="line"><span class="keyword">typedef</span> _Ddifference_type;<span class="comment">//差值类型</span></span><br><span class="line"><span class="keyword">typedef</span> _Pointerpointer;<span class="comment">//数值指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> _Referencereference;<span class="comment">//值引用类型</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正向迭代器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Forit</span> : <span class="keyword">public</span> iterator&lt;forward_iterator_tag, _Ty, _D&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"><span class="comment">//双向迭代器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Bidit</span> : <span class="keyword">public</span> iterator&lt;bidirectional_iterator_tag, _Ty,_D&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"><span class="comment">//随机迭代器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Randit</span> : <span class="keyword">public</span> iterator&lt;random_iterator_tag, _Ty, _D&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器类型萃取类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Iterator</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iterator_traits</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">iterator_traits</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::iterator_categoryiterator_category;<span class="comment">//迭代器类别</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::value_typevalue_type;<span class="comment">//数值类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::difference_typedifference_type;<span class="comment">//差值类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::pointerpointer;<span class="comment">//数值指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::referencereference;<span class="comment">//值引用类型</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//迭代器类型萃取类&lt;普通指针&gt;：可以看作随机迭代器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iterator_traits</span>&lt;T*&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">iterator_traits</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> random_iterator_tagiterator_category;<span class="comment">//迭代器类别</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> Tvalue_type;<span class="comment">//数值类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="type">int</span>difference_type;<span class="comment">//差值类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> T*pointer;<span class="comment">//数值指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> T&amp;reference;<span class="comment">//值引用类型</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//迭代器类型萃取类&lt;常性普通指针&gt;：可以看作随机迭代器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iterator_traits</span>&lt;<span class="type">const</span> T*&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">iterator_traits</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> random_iterator_tagiterator_category;<span class="comment">//迭代器类别</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> Tvalue_type;<span class="comment">//数值类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="type">int</span>difference_type;<span class="comment">//差值类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="type">const</span> T*pointer;<span class="comment">//数值指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="type">const</span> T&amp;reference;<span class="comment">//值引用类型</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回迭代器类别</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_It</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_It&gt;::<span class="function">iterator_category</span></span><br><span class="line"><span class="function"><span class="title">Iterator_category</span><span class="params">(_It it)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_It&gt;::iterator_category iter_cate;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">iter_cate</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回value_type类别</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_It</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_It&gt;::<span class="function">value_type*</span></span><br><span class="line"><span class="function"><span class="title">value_type</span><span class="params">(_It it)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_It&gt;::value_type* _pointer;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;_pointer&gt;(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回different_type类别</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_It</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_It&gt;::<span class="function">different_type*</span></span><br><span class="line"><span class="function"><span class="title">different_type</span><span class="params">(_It it)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_It&gt;::different_type* _different_type;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;_different_type&gt;(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">//input、output、forward迭代器都使用该迭代方式</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_II</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __advance(_II&amp; it, _D n, input_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*while (n--)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">++it;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//双向迭代器的迭代方式</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_BI</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __advance(_BI&amp; it, _D n, bidirectional_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*if (n &gt; 0)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">while(n--) ++it;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">while (n++) --it;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//随机迭代器的迭代方式</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_RI</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __advance(_RI&amp; it, _D n, random_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//it += n;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统一接口</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _II, <span class="keyword">class</span> _D&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">advance</span><span class="params">(_II&amp; it, _D n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//由于未知迭代器的类别标志，所以暂时无法使用__advance()调用对应的函数</span></span><br><span class="line"><span class="comment">//__advance(it, n, 迭代器类型标志);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类型萃取出_II的迭代器类型iter_cate</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_II&gt;::iterator_category iter_cate;</span><br><span class="line">__advance(it, n, <span class="built_in">iter_cate</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现distance</span></span><br><span class="line"><span class="comment">//输入、输出、正向、双向</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_II</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_II&gt;::difference_type</span><br><span class="line">__distance(_II first, _II last, input_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typename</span> iterator_traits&lt;_II&gt;::difference_type _dist = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (first != last)</span><br><span class="line">&#123;</span><br><span class="line">++first;</span><br><span class="line">++_dist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _dist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//随机</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_RAI</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_RAI&gt;::difference_type</span><br><span class="line">__distance(_RAI first, _RAI last, random_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> last - first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统一接口</span></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> <span class="title class_">InputIt</span> &gt;</span><br><span class="line"><span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::<span class="function">difference_type</span></span><br><span class="line"><span class="function"><span class="title">distance</span><span class="params">(InputIt first, InputIt last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//typedef typename iterator_traits&lt;InputIt&gt;::iterator_category iter_cate;</span></span><br><span class="line"><span class="comment">//__distance(first, last, iter_cate());</span></span><br><span class="line">__distance(first, last, <span class="built_in">Iterator_category</span>(first));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="（3）my-type-traits-h"><a href="#（3）my-type-traits-h" class="headerlink" title="（3）my_type_traits.h"></a>（3）my_type_traits.h</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_TYPE_TRAITS_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_TYPE_TRAITS_H</span></span><br><span class="line"><span class="keyword">namespace</span> pzj </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__true_type</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__false_type</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">type</span>&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  this_dummy_member_must_be_first;</span><br><span class="line"><span class="keyword">typedef</span> __false_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __false_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __false_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __false_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __false_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//内置类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">char</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">signed</span> <span class="type">char</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">unsigned</span> <span class="type">char</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">short</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">unsigned</span> <span class="type">short</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">long</span> <span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">float</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">double</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;<span class="type">long</span> <span class="type">double</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所有指针类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__type_traits</span>&lt;T*&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  is_POD_type; <span class="comment">// struct int </span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="（4）my-construct-h"><a href="#（4）my-construct-h" class="headerlink" title="（4）my_construct.h"></a>（4）my_construct.h</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_CONSTRUCT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_CONSTRUCT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;my_iterator.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;my_type_traits.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> pzj </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Ty&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">construct</span><span class="params">(_Ty* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span>(p) _Ty();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Ty, <span class="keyword">class</span> _Vt&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">construct</span><span class="params">(_Ty* p, <span class="type">const</span> _Vt&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span>(p) _Vt(val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构</span></span><br><span class="line"><span class="comment">//普通指针析构统一接口</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Ty&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">(_Ty* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p-&gt;~_Ty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器析构对象</span></span><br><span class="line"><span class="comment">//没必要进行析构的对象</span></span><br><span class="line"><span class="comment">//三级接口1</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_It</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __destroy_aux(_It first, _It last, pzj::__true_type)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;destroy none do!&quot;</span>&lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三级接口2</span></span><br><span class="line"><span class="comment">//有必要进行析构的对象</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_It</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __destroy_aux(_It first, _It last, pzj::__false_type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (first != last)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">destroy</span>(&amp;*first);</span><br><span class="line">++first;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二级接口</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_It</span>, <span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __destroy(_It first, _It last, _Ty*)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//萃取_Ty类型是否是无关紧要类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> __type_traits&lt;_Ty&gt;::has_trivial_destructor  dest;</span><br><span class="line">__destroy_aux(first, last, <span class="built_in">dest</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一级统一接口</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _It&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">(_It first, _It last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//萃取_It管理的对象类型</span></span><br><span class="line"><span class="comment">//typedef typename iterator_traits&lt;_It&gt;::value_type value_type;</span></span><br><span class="line"><span class="comment">//__destroy(first, last, value_type());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用my_iterator.h文件中value_type函数</span></span><br><span class="line">__destroy(first, last, pzj::<span class="built_in">value_type</span>(first));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="二、construct、destroy测试模块"><a href="#二、construct、destroy测试模块" class="headerlink" title="二、construct、destroy测试模块"></a>二、construct、destroy测试模块</h3><h4 id="（1）有关紧要的析构"><a href="#（1）有关紧要的析构" class="headerlink" title="（1）有关紧要的析构"></a>（1）有关紧要的析构</h4><p><code>Demon.cpp</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;my_construct.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Object.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//construct、destroy测试模块</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">Object&lt;<span class="type">int</span>&gt;* p = (Object&lt;<span class="type">int</span>&gt;*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Object&lt;<span class="type">int</span>&gt;) * n);</span><br><span class="line"><span class="comment">//Object&lt;int&gt; obj(10);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">pzj::<span class="built_in">construct</span>(&amp;p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pzj::<span class="built_in">destroy</span>(p, p + n);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/ab9a299217474bc697ae9fa58433b225.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）无关紧要的析构"><a href="#（2）无关紧要的析构" class="headerlink" title="（2）无关紧要的析构"></a>（2）无关紧要的析构</h4><p><code>Demon.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;my_construct.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Object.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//construct、destroy模块</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">pzj</span>::__type_traits&lt;Object&lt;<span class="type">int</span>&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  this_dummy_member_must_be_first;</span><br><span class="line"><span class="keyword">typedef</span> __false_type  has_trivial_default_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __false_type  has_trivial_copy_constructor;</span><br><span class="line"><span class="keyword">typedef</span> __false_type  has_trivial_assignment_operator;</span><br><span class="line"><span class="keyword">typedef</span> __true_type  has_trivial_destructor;<span class="comment">//析构无关紧要</span></span><br><span class="line"><span class="keyword">typedef</span> __false_type  is_POD_type;<span class="comment">//是一个 只有值的集合类型</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">Object&lt;<span class="type">int</span>&gt;* p = (Object&lt;<span class="type">int</span>&gt;*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Object&lt;<span class="type">int</span>&gt;) * n);</span><br><span class="line"><span class="comment">//Object&lt;int&gt; obj(10);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">pzj::<span class="built_in">construct</span>(&amp;p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pzj::<span class="built_in">destroy</span>(p, p + n);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0eeb997a8e704574986ea86d2865f570.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> construct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】类型萃取实现迭代器操作</title>
      <link href="/posts/1e7c95ae.html"/>
      <url>/posts/1e7c95ae.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、关于迭代器操作"><a href="#一、关于迭代器操作" class="headerlink" title="一、关于迭代器操作"></a>一、关于迭代器操作</h3><p><img src="https://img-blog.csdnimg.cn/f4a45b57aa3b4537aeb60a348d2ac65c.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/bd341cbf4f334b198e42a44ec0fa787e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a2c06ba37efa46f7b5fae7d3de505357.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>这里主要实现这两个函数的具体实现原理：类型萃取实现函数重载，从而达到不同类型容器中的迭代器都可以进行使用该函数advance和distance函数。并且不同的迭代器类型可以使用不同的方法，从而提高效率（例如随机迭代器正向移动5下，可以使用循环，也直接可以 += 5，很明显随机迭代器使用后者效率将O(n)提到了O(1)）。</p><hr><h3 id="二、关于迭代器"><a href="#二、关于迭代器" class="headerlink" title="二、关于迭代器"></a>二、关于迭代器</h3><p>迭代器按照功能可分为五类：输入迭代器、输出迭代器、向前迭代器、双向迭代器、随机迭代器<br>以下是这五类迭代器的继承关系：<img src="https://img-blog.csdnimg.cn/4ba8c84a63884cb58147ba8430574f76.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_16,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><hr><h3 id="三、实现advance"><a href="#三、实现advance" class="headerlink" title="三、实现advance"></a>三、实现advance</h3><p>既然该函数在iterator.h文件中，我们就仿照下<br><code>my_iterator.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_ITERATOR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_ITERATOR_H</span></span><br><span class="line"><span class="keyword">namespace</span> pzj</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//只读迭代器标记</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">input_iterator_tag</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//只写迭代器标记</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">output_iterator_tag</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正向迭代器标记</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">forward_iterator_tag</span> : <span class="keyword">public</span> input_iterator_tag &#123;&#125;;</span><br><span class="line"><span class="comment">//双向迭代器标记</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bidirectional_iterator_tag</span> : <span class="keyword">public</span> forward_iterator_tag &#123;&#125;;</span><br><span class="line"><span class="comment">//随机迭代器标记</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">random_iterator_tag</span> : <span class="keyword">public</span> bidirectional_iterator_tag &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">//指针差值类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> <span class="type">ptrdiff_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局迭代器iterator</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_C</span>, <span class="keyword">class</span> <span class="title class_">_Ty</span>,<span class="keyword">class</span> <span class="title class_">_D</span> = <span class="type">ptrdiff_t</span>, <span class="keyword">class</span> _Pointer = _Ty*, <span class="keyword">class</span> _Reference = _Ty&amp;&gt;</span><br><span class="line"><span class="keyword">struct</span> iterator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> _Citerator_category;<span class="comment">//迭代器类别</span></span><br><span class="line"><span class="keyword">typedef</span> _Tyvalue_type;<span class="comment">//数值类型</span></span><br><span class="line"><span class="keyword">typedef</span> _Ddifference_type;<span class="comment">//差值类型</span></span><br><span class="line"><span class="keyword">typedef</span> _Pointerpointer;<span class="comment">//数值指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> _Referencereference;<span class="comment">//值引用类型</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正向迭代器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Forit</span> : <span class="keyword">public</span> iterator&lt;forward_iterator_tag, _Ty, _D&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"><span class="comment">//双向迭代器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Bidit</span> : <span class="keyword">public</span> iterator&lt;bidirectional_iterator_tag, _Ty,_D&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"><span class="comment">//随机迭代器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Randit</span> : <span class="keyword">public</span> iterator&lt;random_iterator_tag, _Ty, _D&gt;</span><br><span class="line">&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器类型萃取类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Iterator</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iterator_traits</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">iterator_traits</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::iterator_categoryiterator_category;<span class="comment">//迭代器类别</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::value_typevalue_type;<span class="comment">//数值类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::difference_typedifference_type;<span class="comment">//差值类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::pointerpointer;<span class="comment">//数值指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Iterator::referencereference;<span class="comment">//值引用类型</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------------------------------------------------------*/</span></span><br><span class="line"><span class="comment">//input、output、forward迭代器都使用该迭代方式</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_II</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __advance(_II&amp; it, _D n, input_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*while (n--)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">++it;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//双向迭代器的迭代方式</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_BI</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __advance(_BI&amp; it, _D n, bidirectional_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*if (n &gt; 0)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">while(n--) ++it;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">while (n++) --it;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//随机迭代器的迭代方式</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_RI</span>, <span class="keyword">class</span> <span class="title class_">_D</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> __advance(_RI&amp; it, _D n, random_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//it += n;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统一接口</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _II, <span class="keyword">class</span> _D&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">advance</span><span class="params">(_II&amp; it, _D n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//由于未知迭代器的类别标志，所以暂时无法使用__advance()调用对应的函数</span></span><br><span class="line"><span class="comment">//__advance(it, n, 迭代器类型标志);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类型萃取出_II的迭代器类型iter_cate</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_II&gt;::iterator_category iter_cate;</span><br><span class="line">__advance(it, n, <span class="built_in">iter_cate</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>myvector.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYVECTOR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYVECTOR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;my_iterator.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myvector</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">const_iterator</span> : <span class="keyword">public</span> pzj::_Randit&lt;_Ty, <span class="type">int</span>&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iterator</span> : <span class="keyword">public</span> const_iterator &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>mylist.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;my_iterator.h&quot;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mylist</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">const_iterator</span> : <span class="keyword">public</span> pzj::_Bidit&lt;_Ty, <span class="type">int</span>&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iterator</span> : <span class="keyword">public</span> const_iterator &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>main.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;my_iterator.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myvector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mylist.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; typeid(pzj::_Forit&lt;int, int&gt;::iterator_category).name()&lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">myvector&lt;<span class="type">int</span>&gt;::iterator vit;</span><br><span class="line">mylist&lt;<span class="type">int</span>&gt;::iterator lit;</span><br><span class="line">pzj::<span class="built_in">advance</span>(vit, <span class="number">2</span>);</span><br><span class="line">pzj::<span class="built_in">advance</span>(lit, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="四、实现distance"><a href="#四、实现distance" class="headerlink" title="四、实现distance"></a>四、实现distance</h3><p><code>补充my_iterator.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现distance</span></span><br><span class="line"><span class="comment">//输入、输出、正向、双向</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_II</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_II&gt;::difference_type</span><br><span class="line">__distance(_II first, _II last, input_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typename</span> iterator_traits&lt;_II&gt;::difference_type _dist = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (first != last)</span><br><span class="line">&#123;</span><br><span class="line">++first;</span><br><span class="line">++_dist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> _dist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//随机</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_RAI</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_RAI&gt;::difference_type</span><br><span class="line">__distance(_RAI first, _RAI last, random_iterator_tag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> last - first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//萃取迭代器类别</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_It</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">typename</span> iterator_traits&lt;_It&gt;::<span class="function">iterator_category </span></span><br><span class="line"><span class="function"><span class="title">Iterator_category</span><span class="params">(_It it)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_It&gt;::iterator_category iter_cate;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">iter_cate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统一接口</span></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> <span class="title class_">InputIt</span> &gt;</span><br><span class="line"><span class="keyword">typename</span> iterator_traits&lt;InputIt&gt;::<span class="function">difference_type</span></span><br><span class="line"><span class="function"><span class="title">distance</span><span class="params">(InputIt first, InputIt last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//typedef typename iterator_traits&lt;InputIt&gt;::iterator_category iter_cate;</span></span><br><span class="line"><span class="comment">//__distance(first, last, iter_cate());</span></span><br><span class="line">__distance(first, last, <span class="built_in">Iterator_category</span>(first));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iterator 类型萃取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】类型萃取</title>
      <link href="/posts/92af402c.html"/>
      <url>/posts/92af402c.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、类型萃取"><a href="#一、类型萃取" class="headerlink" title="一、类型萃取"></a>一、类型萃取</h3><p>笔者目前以这种使用场景来解释什么是类型萃取，为什么需要类型萃取？看代码会更加明了。<br><code>Demo.h</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEMO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEMO_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为什么需要萃取器？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自设计的模板Object&lt;_Ty&gt;类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Ty value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Object</span>(_Ty val = <span class="number">0</span>) : <span class="built_in">value</span>(val) &#123;&#125;</span><br><span class="line">~<span class="built_in">Object</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> _Ty <span class="title">Value</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">_Ty <span class="title">Value</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自设计模板容器Container&lt;_Container&gt;类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Container</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Container c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Container</span>(_Container x = <span class="number">0</span>) : <span class="built_in">c</span>(x)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如Container&lt;Object&lt;int&gt;&gt; con;</span></span><br><span class="line"><span class="comment">//con容器中存放的是Object&lt;int&gt;类型的对象</span></span><br><span class="line"><span class="comment">//此时通过con.getObjectValue()得到存放对象的方法</span></span><br><span class="line"></span><br><span class="line">返回值类型 ? ? <span class="built_in">getObjectValue</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//此时并不知道容器中对象的成员方法的返回值类型</span></span><br><span class="line"><span class="keyword">return</span> c.<span class="built_in">Value</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>通过这个场景可以看出，我们非常有必要知道c.Value()的返回值类型，若是在Object类中，我们很容易知道返回值类型就是_Ty，但是经过一次封装后，通过封装的Container类是不能直接去获得存储在其中的对象的成员中的类型。那么类型萃取就诞生了。（不仅仅局限于这个原因，更重要C++追求效率的缘故，这个后面再说）</p><p><strong>那我们加上类型萃取器（类）后：</strong><br><code>Demo.h</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEMO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEMO_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//为什么需要萃取器？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自设计的模板类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Ty value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//第一步：对需要萃取的类型进行类型重命名</span></span><br><span class="line"><span class="comment">//这里需要_Ty的类型</span></span><br><span class="line"><span class="keyword">typedef</span> _Ty value_type;<span class="comment">//value值类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>(_Ty val = <span class="number">0</span>) : <span class="built_in">value</span>(val) &#123;&#125;</span><br><span class="line">~<span class="built_in">Object</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> _Ty <span class="title">Value</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">_Ty <span class="title">Value</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Object类的类型萃取器：</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 当使用Object&lt;int&gt;类型推演时 </span></span><br><span class="line"><span class="comment"> * 该类中将Object&lt;int&gt;::value_type进行类型重命名value_type</span></span><br><span class="line"><span class="comment"> * 最终在其他地方使用Object_traits&lt;_con&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Object</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Object_traits</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Object::value_type value_type;</span><br><span class="line"><span class="comment">//... 需要什么类型就typedef 什么就行</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自设计模板容器类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Container</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Container c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Container</span>(_Container x = <span class="number">0</span>) : <span class="built_in">c</span>(x)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="comment">//typename说明value_type是Object_traits中的一个类型</span></span><br><span class="line"><span class="keyword">typename</span> Object_traits&lt;_Container&gt;::<span class="function">value_type <span class="title">getObjectValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.<span class="built_in">Value</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><br><code>main.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Demo.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Object&lt;<span class="type">int</span>&gt; <span class="title">iobj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">Container&lt;Object&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">icon</span>(iobj);</span><br><span class="line">cout &lt;&lt; icon.<span class="built_in">getObjectValue</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Object&lt;<span class="type">double</span>&gt; <span class="title">dobj</span><span class="params">(<span class="number">3.14</span>)</span></span>;</span><br><span class="line">Container&lt;Object&lt;<span class="type">double</span>&gt;&gt; <span class="built_in">dcon</span>(dobj);</span><br><span class="line">cout &lt;&lt; dcon.<span class="built_in">getObjectValue</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="https://img-blog.csdnimg.cn/1bb98618226449738a408f7359cdd63d.png" alt="在这里插入图片描述"><br><strong>类型萃取时机总结：</strong></p><ul><li>模板类A作为模板类B的模板参数，并且模板B类中需要使用模板类A中的模板参数类型</li></ul><hr><h3 id="二、通过类型萃取实现函数重载"><a href="#二、通过类型萃取实现函数重载" class="headerlink" title="二、通过类型萃取实现函数重载"></a>二、通过类型萃取实现函数重载</h3><p>通过这几种组合起来，我们能达到早绑定的效果：在编译时期就确定函数的调用时机。</p><p><code>Demo.h</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEMO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEMO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自设计的模板类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Ty value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//第一步：对需要萃取的类型进行类型重命名</span></span><br><span class="line"><span class="comment">//这里需要_Ty的类型</span></span><br><span class="line"><span class="keyword">typedef</span> _Ty value_type;<span class="comment">//value值类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>(_Ty val = <span class="number">0</span>) : <span class="built_in">value</span>(val) &#123;&#125;</span><br><span class="line">~<span class="built_in">Object</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> _Ty <span class="title">Value</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">_Ty <span class="title">Value</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Object类的类型萃取器：</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 当使用Object&lt;int&gt;类型推演时 </span></span><br><span class="line"><span class="comment"> * 该类中将Object&lt;int&gt;::value_type进行类型重命名value_type</span></span><br><span class="line"><span class="comment"> * 最终在其他地方使用Object_traits&lt;_con&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Object</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Object_traits</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _Object::value_type value_type;</span><br><span class="line"><span class="comment">//... 需要什么类型就typedef 什么就行</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//模板函数：可以作为其他(模板)函数重载的条件</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_OBj</span>&gt;</span><br><span class="line"><span class="keyword">typename</span> Object_traits&lt;_OBj&gt;::<span class="function">value_type <span class="title">dif_Condition</span><span class="params">(<span class="type">const</span> _OBj&amp;)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//返回该类的临时对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typename</span> Object_traits&lt;_OBj&gt;::<span class="built_in">value_type</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自设计模板容器类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Container</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Container c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Container</span>(_Container x = <span class="number">0</span>) : <span class="built_in">c</span>(x)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="comment">//typename说明value_type是Object_traits中的一个类型</span></span><br><span class="line"><span class="keyword">typename</span> Object_traits&lt;_Container&gt;::<span class="function">value_type <span class="title">getObjectValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c.<span class="built_in">Value</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//两个重载的函数</span></span><br><span class="line"><span class="type">void</span> __fun(<span class="type">int</span>) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; int &quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> __fun(<span class="type">double</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; double &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过dif_condition的返回值（对象）的类型进行不同函数的调用</span></span><br><span class="line">__fun(<span class="built_in">dif_Condition</span>(c));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><br><code>main.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Demo.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Object&lt;<span class="type">int</span>&gt; <span class="title">iobj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">Container&lt;Object&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">icon</span>(iobj);</span><br><span class="line">cout &lt;&lt; icon.<span class="built_in">getObjectValue</span>() &lt;&lt; endl;</span><br><span class="line">icon.<span class="built_in">fun</span>();</span><br><span class="line"></span><br><span class="line"><span class="function">Object&lt;<span class="type">double</span>&gt; <span class="title">dobj</span><span class="params">(<span class="number">3.14</span>)</span></span>;</span><br><span class="line">Container&lt;Object&lt;<span class="type">double</span>&gt;&gt; <span class="built_in">dcon</span>(dobj);</span><br><span class="line">cout &lt;&lt; dcon.<span class="built_in">getObjectValue</span>() &lt;&lt; endl;</span><br><span class="line">dcon.<span class="built_in">fun</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong><br><img src="https://img-blog.csdnimg.cn/c692cda2fda84496bbec3f5b5968112d.png" alt="在这里插入图片描述"></p><p>本节主要为了充分理解类型粗萃取的原理，后面将会对STL中的迭代器进行论述。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类型萃取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】vector和list比较</title>
      <link href="/posts/3592e85c.html"/>
      <url>/posts/3592e85c.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/18184ffbeff245e19ef14280b37ec285.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f6864d7642c34344b40615729aeb6061.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vector list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】STL中vector容器使用总结</title>
      <link href="/posts/b3a30571.html"/>
      <url>/posts/b3a30571.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、vector"><a href="#一、vector" class="headerlink" title="一、vector"></a>一、vector</h3><p><img src="https://img-blog.csdnimg.cn/6568a698f6544d7cb5834e0606badc9e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ad6413dd9f9d467895854eeb0016aac4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0407e4dc553448b9abe5825c964aa0b9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（1）区分size-和capacity"><a href="#（1）区分size-和capacity" class="headerlink" title="（1）区分size()和capacity()"></a>（1）区分size()和capacity()</h4><p>size()：返回容纳的元素个数<br>capacity()：返回当前分配存储的容量</p><h4 id="（2）迭代器失效"><a href="#（2）迭代器失效" class="headerlink" title="（2）迭代器失效"></a>（2）迭代器失效</h4><p><img src="https://img-blog.csdnimg.cn/d9c13a095bbb400c90eb107df6b74d63.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（3）区分const-iterator和const-iterator"><a href="#（3）区分const-iterator和const-iterator" class="headerlink" title="（3）区分const_iterator和const iterator"></a>（3）区分const_iterator和const iterator</h4><p>const_iterator：常性迭代器，指向的对象的属性为常性；<br>const iterator：常性的普通迭代器，迭代器自身属性为常性；</p><h4 id="（4）区分reserve-和resize"><a href="#（4）区分reserve-和resize" class="headerlink" title="（4）区分reserve()和resize()"></a>（4）区分reserve()和resize()</h4><p><strong>reserve()：预留存储空间，只改变capacity</strong><br>增加 vector 的容量到大于或等于 new_cap 的值。若 new_cap 大于当前的 capacity() ，则分配新存储，否则该方法不做任何事。reserve() 不更改 vector 的 size 。<br>若 new_cap 大于 capacity() ，则所有迭代器，包含尾后迭代器和所有到元素的引用都被非法化。否则，没有迭代器或引用被非法化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Value</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Value</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Value()&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Value</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~Value()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Vector_user</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;Value&gt; vec;</span><br><span class="line"><span class="comment">//vec.resize(10);</span></span><br><span class="line">vec.<span class="built_in">reserve</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; vec.<span class="built_in">capacity</span>()&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; vec.<span class="built_in">size</span>()&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Vector_user</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f9c8ea9cc3bd479897f3b8f9afacfaf7.png" alt="在这里插入图片描述"></p><p><strong>resize()：改变容器中可存储元素的个数size和capacity，并调用默认的构造函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Value</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Value</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Value()&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Value</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~Value()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Vector_user</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;Value&gt; vec;</span><br><span class="line">vec.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//vec.reserve(10);</span></span><br><span class="line">cout &lt;&lt; vec.<span class="built_in">capacity</span>()&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; vec.<span class="built_in">size</span>()&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Vector_user</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c4a33e71f4794d63852aa28cc6995ccd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（5）push-back和emplace"><a href="#（5）push-back和emplace" class="headerlink" title="（5）push_back和emplace"></a>（5）push_back和emplace</h4><p><strong>1.push_back()</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Object</span>(<span class="type">int</span> x = <span class="number">0</span>):<span class="built_in">val</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Object(int x)&quot;</span>&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>(<span class="type">const</span> Object&amp; src): <span class="built_in">val</span>(src.val)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Object(const Object&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>(Object&amp;&amp; src) : <span class="built_in">val</span>(src.val)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Object(Object&amp;&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">Object&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Object&amp; src)</span><br><span class="line">&#123;</span><br><span class="line">val = src.val;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Object&amp; <span class="keyword">operator</span>=(Object&amp;&amp; src)</span><br><span class="line">&#123;</span><br><span class="line">val = src.val;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;=&amp;&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Object</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~Object()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::vector&lt;Object&gt; vcobj;</span><br><span class="line">vcobj.<span class="built_in">reserve</span>(<span class="number">5</span>);</span><br><span class="line">vcobj.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//vcobj.push_back(Object(10));</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>push_back(10);</code><br><code>push_back(Object(10));</code><br>两种方式构造对象的顺序个数都相同！<br><img src="https://img-blog.csdnimg.cn/6430ae159c44425ebc4ce3b6dc3b200f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>    <code>Object obj(10);</code><br>    <code>vcobj.push_back(obj);</code><br>    <img src="https://img-blog.csdnimg.cn/dd5a8d1f3646490796463fdedf9be109.png" alt="在这里插入图片描述"><br><strong>2. emplace()原位构造</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::vector&lt;Object&gt; vcobj;</span><br><span class="line">vcobj.<span class="built_in">reserve</span>(<span class="number">5</span>);</span><br><span class="line">vcobj.<span class="built_in">emplace_back</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5392e0381d294fd88643ec732ff6e3ef.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::vector&lt;Object&gt; vcobj;</span><br><span class="line">vcobj.<span class="built_in">reserve</span>(<span class="number">5</span>);</span><br><span class="line">vcobj.<span class="built_in">emplace_back</span>(<span class="built_in">Object</span>(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9b0ac3f452ea4bb88a86d1ec2dc84c3c.png" alt="在这里插入图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::vector&lt;Object&gt; vcobj;</span><br><span class="line">vcobj.<span class="built_in">reserve</span>(<span class="number">5</span>);</span><br><span class="line"><span class="function">Object <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">vcobj.<span class="built_in">emplace_back</span>(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3c60378865e042ceb0d6716bf93ab30b.png" alt="在这里插入图片描述"></p><h4 id="（6）关于原位构造（定位new-完美转发）"><a href="#（6）关于原位构造（定位new-完美转发）" class="headerlink" title="（6）关于原位构造（定位new + 完美转发）"></a>（6）关于原位构造（定位new + 完美转发）</h4><p>定位new：直接在指定的地址空间内调用构造函数<br>完美转发：保留传参的右值属性<br>可变参数：根据传参个数类型，调用不同的构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> ...Arg&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Make</span><span class="params">(T* p, Arg... arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">new</span>(p) <span class="built_in">T</span>(std::forward&lt;Arg...&gt;(arg)...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.开辟空间</span></span><br><span class="line">Object* p = (Object*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Object));</span><br><span class="line"><span class="comment">//2.在p指向的地址空间调用构造Object(10)</span></span><br><span class="line"><span class="built_in">Make</span>(p, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.释放空间并调用析构函数</span></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a3ae6f19536e470c8144e5873e6735e5.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【设计模式】工厂模式的map优化</title>
      <link href="/posts/cb90ad03.html"/>
      <url>/posts/cb90ad03.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、有map，无unique-ptr版本"><a href="#一、有map，无unique-ptr版本" class="headerlink" title="一、有map，无unique_ptr版本"></a>一、有map，无unique_ptr版本</h3><h4 id="（1）代码"><a href="#（1）代码" class="headerlink" title="（1）代码"></a>（1）代码</h4><p><code>Factory.h</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> FACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有map</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Products</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//产品方法</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">productMethod</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//car产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> : <span class="keyword">public</span> Products</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">productMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; car &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bus产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bus</span> : <span class="keyword">public</span> Products</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">productMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; bus &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Products* <span class="title">create</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> map&lt;string, BaseFactory*&gt; fac;<span class="comment">// key value</span></span><br><span class="line"><span class="function"><span class="type">static</span> Products* <span class="title">create_product</span><span class="params">(<span class="type">const</span> string&amp; name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (fac.<span class="built_in">find</span>(name) != fac.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//fac[name]是name工厂地址</span></span><br><span class="line"><span class="keyword">return</span> fac[name]-&gt;<span class="built_in">create</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外初始化</span></span><br><span class="line">map&lt;string, BaseFactory*&gt; BaseFactory::fac;</span><br><span class="line"></span><br><span class="line"><span class="comment">//car工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">carFactory</span> : <span class="keyword">public</span> BaseFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Products* <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">car</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bus工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">busFactory</span> : <span class="keyword">public</span> BaseFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Products* <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">bus</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用一个初始化类对BaseFactory::map&lt;string, BaseFactory*&gt;fac进行初始化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Init_BaseFac</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> Init_BaseFac m_init;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Init_BaseFac</span>()</span><br><span class="line">&#123;</span><br><span class="line">BaseFactory::fac[<span class="string">&quot;car&quot;</span>] = <span class="keyword">new</span> <span class="built_in">carFactory</span>();</span><br><span class="line">BaseFactory::fac[<span class="string">&quot;bus&quot;</span>] = <span class="keyword">new</span> <span class="built_in">busFactory</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//避免使用Init_BaseFac类手动初始化</span></span><br><span class="line">Init_BaseFac Init_BaseFac::m_init;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><code>client.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有map,无unique_ptr</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Factory.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Products* p = BaseFactory::<span class="built_in">create_product</span>(<span class="string">&quot;car&quot;</span>);</span><br><span class="line">p-&gt;<span class="built_in">productMethod</span>();</span><br><span class="line"></span><br><span class="line">p = BaseFactory::<span class="built_in">create_product</span>(<span class="string">&quot;bus&quot;</span>);</span><br><span class="line">p-&gt;<span class="built_in">productMethod</span>();</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）结果"><a href="#（2）结果" class="headerlink" title="（2）结果"></a>（2）结果</h4><p><img src="https://img-blog.csdnimg.cn/67249b6dcfab4fdfa56b11f2cf578c86.png" alt="在这里插入图片描述"></p><hr><h3 id="二、有map，有unqiue-ptr版本"><a href="#二、有map，有unqiue-ptr版本" class="headerlink" title="二、有map，有unqiue_ptr版本"></a>二、有map，有unqiue_ptr版本</h3><h4 id="（1）代码-1"><a href="#（1）代码-1" class="headerlink" title="（1）代码"></a>（1）代码</h4><p><code>Factory.h</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> FACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有map，有unique_ptr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Products</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//产品方法</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">productMethod</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//car产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> : <span class="keyword">public</span> Products</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">productMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; car &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bus产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bus</span> : <span class="keyword">public</span> Products</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">productMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; bus &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> unique_ptr&lt;Products&gt; <span class="title">create</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> map&lt;string, unique_ptr&lt;BaseFactory&gt;&gt; fac;<span class="comment">// key value</span></span><br><span class="line"><span class="function"><span class="type">static</span> unique_ptr&lt;Products&gt; <span class="title">create_product</span><span class="params">(<span class="type">const</span> string&amp; name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (fac.<span class="built_in">find</span>(name) != fac.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//fac[name]是name工厂地址</span></span><br><span class="line"><span class="keyword">return</span> fac[name]-&gt;<span class="built_in">create</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外初始化</span></span><br><span class="line">map&lt;string, unique_ptr&lt;BaseFactory&gt;&gt; BaseFactory::fac;</span><br><span class="line"></span><br><span class="line"><span class="comment">//car工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">carFactory</span> : <span class="keyword">public</span> BaseFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">unique_ptr&lt;Products&gt;<span class="built_in">create</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">unique_ptr</span>&lt;Products&gt;(<span class="keyword">new</span> <span class="built_in">car</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bus工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">busFactory</span> : <span class="keyword">public</span> BaseFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">unique_ptr&lt;Products&gt;<span class="built_in">create</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">unique_ptr</span>&lt;Products&gt;(<span class="keyword">new</span> <span class="built_in">bus</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用一个初始化类对BaseFactory::map&lt;string, BaseFactory*&gt;fac进行初始化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Init_BaseFac</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> Init_BaseFac m_init;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Init_BaseFac</span>()</span><br><span class="line">&#123;</span><br><span class="line">BaseFactory::fac[<span class="string">&quot;car&quot;</span>] = <span class="built_in">unique_ptr</span>&lt;BaseFactory&gt;(<span class="keyword">new</span> <span class="built_in">carFactory</span>());</span><br><span class="line">BaseFactory::fac[<span class="string">&quot;bus&quot;</span>] = <span class="built_in">unique_ptr</span>&lt;BaseFactory&gt;(<span class="keyword">new</span> <span class="built_in">busFactory</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//避免使用Init_BaseFac类手动初始化</span></span><br><span class="line">Init_BaseFac Init_BaseFac::m_init;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p><code>client.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Factory.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">unique_ptr&lt;Products&gt; p = BaseFactory::<span class="built_in">create_product</span>(<span class="string">&quot;car&quot;</span>);</span><br><span class="line">p-&gt;<span class="built_in">productMethod</span>();</span><br><span class="line"></span><br><span class="line">p = BaseFactory::<span class="built_in">create_product</span>(<span class="string">&quot;bus&quot;</span>);</span><br><span class="line">p-&gt;<span class="built_in">productMethod</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）结果-1"><a href="#（2）结果-1" class="headerlink" title="（2）结果"></a>（2）结果</h4><p><img src="https://img-blog.csdnimg.cn/9de7cd88d26348b99c575f960a7b2b95.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 map优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】shared_ptr的环状引用问题</title>
      <link href="/posts/9b0889d7.html"/>
      <url>/posts/9b0889d7.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、环状引用"><a href="#一、环状引用" class="headerlink" title="一、环状引用"></a>一、环状引用</h3><p><strong>举个栗子：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="comment">//环形引用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">shared_ptr&lt;B&gt; _b;</span><br><span class="line"><span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">~<span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;~A()&quot;</span>&lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">shared_ptr&lt;A&gt; _a;</span><br><span class="line"><span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">~<span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">shared_ptr&lt;A&gt; pa = <span class="built_in">make_shared</span>&lt;A&gt;();</span><br><span class="line">shared_ptr&lt;B&gt; pb = <span class="built_in">make_shared</span>&lt;B&gt;();</span><br><span class="line"></span><br><span class="line">pa-&gt;_b = pb;</span><br><span class="line">pb-&gt;_a = pa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="https://img-blog.csdnimg.cn/bf49ac6805974625855b68f649d3c554.png" alt="在这里插入图片描述"><br>一个很明显的错误：那就是内存泄漏了，调用了构造却没有调用析构函数。这就是环状引用带来的问题。</p><hr><h3 id="二、环状引用内存结构"><a href="#二、环状引用内存结构" class="headerlink" title="二、环状引用内存结构"></a>二、环状引用内存结构</h3><p>我们分步骤进行构建：<br><img src="https://img-blog.csdnimg.cn/fc5a4c4c77c240b6b6b8dfcaabc2ee35.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/750df8095e584e31a4af51a2ab2a0813.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以看到关系还是十分的复杂。其主要原因出在析构上。</p><h3 id="三、解决方案weak-ptr"><a href="#三、解决方案weak-ptr" class="headerlink" title="三、解决方案weak_ptr"></a>三、解决方案weak_ptr</h3><p>为了使环状引用得到解决，使用weak_ptr便可以很好的处理这种情况。</p><p><strong>下来看看weak_ptr是如何解决的</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//环形引用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">weak_ptr&lt;B&gt; _b;</span><br><span class="line"><span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">~<span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">weak_ptr&lt;A&gt; _a;</span><br><span class="line"><span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">~<span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">shared_ptr&lt;A&gt; pa = <span class="built_in">make_shared</span>&lt;A&gt;();</span><br><span class="line">shared_ptr&lt;B&gt; pb = <span class="built_in">make_shared</span>&lt;B&gt;();</span><br><span class="line">pa-&gt;_b = pb;</span><br><span class="line">pb-&gt;_a = pa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fun2</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="https://img-blog.csdnimg.cn/d248180e3ad3468483c55ba6867e5153.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以看到，所管理的对象在环形引用下也完成了资源的释放。成功解决了内存泄露的问题。我们通过构造和析构的过程对其进行分析。</p><hr><h3 id="四、weak-ptr环形引用结构图"><a href="#四、weak-ptr环形引用结构图" class="headerlink" title="四、weak_ptr环形引用结构图"></a>四、weak_ptr环形引用结构图</h3><h4 id="（1）构造过程"><a href="#（1）构造过程" class="headerlink" title="（1）构造过程"></a>（1）构造过程</h4><p><img src="https://img-blog.csdnimg.cn/f43c13ddd2b54d648dce4f545bd1242a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/95d56470af40486892f318eedad32c03.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）析构过程"><a href="#（2）析构过程" class="headerlink" title="（2）析构过程"></a>（2）析构过程</h4><p><strong>shared_ptr析构函数：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~<span class="built_in">shared_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Ref != <span class="literal">NULL</span> &amp;&amp; --_Ref-&gt;_Users == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">_deleter(_Ptr);</span><br><span class="line"><span class="keyword">if</span> (--_Ref-&gt;_Weaks == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _Ref;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>weak_ptr析构函数：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~<span class="built_in">weak_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Rp != <span class="literal">NULL</span> &amp;&amp; --_Rp-&gt;_Weaks == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _Rp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第一步：析构pb，_a</strong><br><img src="https://img-blog.csdnimg.cn/b878e8b933b84a2e87d170bcdaf1eabd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>第二步：析构pa，_b</strong><br><img src="https://img-blog.csdnimg.cn/a3b65d6556fb49eba2e4e3b413eb506f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以看到在使用了弱引用的环状引用已经可以解决内存泄露的问题。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环状引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】STL中shared_ptr和weak_ptr</title>
      <link href="/posts/76124719.html"/>
      <url>/posts/76124719.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、shared-ptr的内存结构"><a href="#一、shared-ptr的内存结构" class="headerlink" title="一、shared_ptr的内存结构"></a>一、shared_ptr的内存结构</h3><p><img src="https://img-blog.csdnimg.cn/3ef4826736134370abfa0a1dd91069e0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>结构解释：</strong></p><ul><li>_Ptr和_Ref分别保存存放在堆区空间的被管理对象和引用计数结构</li><li>引用计数结构中的_rptr也保存被管理对象的地址。</li><li>_Users记录shared_ptr指针管理对象的个数</li><li>_Weaks记录weak_ptr管理对象的个数</li></ul><h3 id="二、删除器"><a href="#二、删除器" class="headerlink" title="二、删除器"></a>二、删除器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个对象删除器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Deleter</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Deleter</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(_Ty* p = <span class="literal">NULL</span>)</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一组对象删除器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Deleter</span>&lt;_Ty[]&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Deleter</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(_Ty* p = <span class="literal">NULL</span>)</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="三、引用计数"><a href="#三、引用计数" class="headerlink" title="三、引用计数"></a>三、引用计数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用计数结构</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rfc</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Ty* _rPtr;<span class="comment">//指向被管理对象</span></span><br><span class="line">atomic_int _Users;<span class="comment">//shared_ptr引用个数</span></span><br><span class="line">atomic_int _Weaks;<span class="comment">//weak_ptr引用个数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Rfc</span>(_Ty* p = <span class="literal">NULL</span>) :_rPtr(p), _Users(<span class="number">1</span>), _Weaks(<span class="number">1</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line">~<span class="built_in">Rfc</span>() &#123;&#125;</span><br><span class="line"><span class="comment">//增加_Users</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IncRef_Users</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++_Users;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增加_Weaks</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IncRef_Weaks</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++_Weaks;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="四、shared-ptr仿写"><a href="#四、shared-ptr仿写" class="headerlink" title="四、shared_ptr仿写"></a>四、shared_ptr仿写</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个对象shared_ptr结构</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">Deleter_T</span> = Deleter&lt;_Ty&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> shared_ptr</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Ty*_Ptr;<span class="comment">//保存被管理对象的地址</span></span><br><span class="line">Rfc&lt;_Ty&gt;*_Ref;<span class="comment">//保存引用计数结构的地址</span></span><br><span class="line">Deleter_T_deleter;<span class="comment">//删除器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">shared_ptr</span>(_Ty* p = <span class="literal">NULL</span>) : _Ptr(p), _Ref(<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">__Ref = <span class="keyword">new</span> <span class="built_in">Rfc</span>&lt;_Ty&gt;(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">shared_ptr</span>(<span class="type">const</span> shared_ptr&amp; src): _Ptr(src._Ptr), _Ref(src._Ref)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Ref != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">_Ref-&gt;<span class="built_in">Incref_Users</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">shared_ptr</span>(shared_ptr&amp;&amp; rval): _Ptr(rval._Ptr), _Ref(rval._Ref)</span><br><span class="line">&#123;</span><br><span class="line">rval._Ptr = <span class="literal">NULL</span>;</span><br><span class="line">rval._Ref = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">shared_ptr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> shared_ptr&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;src || _Ptr == src._Ptr)</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span> &amp;&amp; --_Ref-&gt;_Users == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">_deleter(_Ptr);</span><br><span class="line"><span class="keyword">if</span> (--_Ref-&gt;_Weaks == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _Ref;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">_Ptr = src._Ptr;</span><br><span class="line">_Ref = src._Ref;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">_Ref-&gt;<span class="built_in">IncRef_Users</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">shared_ptr&amp; <span class="keyword">operator</span>=(shared_ptr&amp;&amp; rval)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//p = std::move(p)</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rval)</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="comment">//p = fun() return share_ptr</span></span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span> &amp;&amp; rval._Ptr != <span class="literal">NULL</span> &amp;&amp; _Ptr == rval._Ptr)</span><br><span class="line">&#123;</span><br><span class="line">--_Ref-&gt;_Users;</span><br><span class="line">rval._Ptr = <span class="literal">NULL</span>;</span><br><span class="line">rval._Ref = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span> &amp;&amp; --_Ref-&gt;_Users == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">_deleter(_Ptr);</span><br><span class="line"><span class="keyword">if</span> (--_Ref-&gt;_Weaks == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _Ref;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">_Ptr = rval._Ptr;</span><br><span class="line">_Ref = rval._Ref;</span><br><span class="line">rval._Ptr = <span class="literal">NULL</span>;</span><br><span class="line">rval._Ref = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">shared_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Ref != <span class="literal">NULL</span> &amp;&amp; --_Ref-&gt;_Users == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">_deleter(_Ptr);</span><br><span class="line"><span class="keyword">if</span> (--_Ref-&gt;_Weaks == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _Ref;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">_Ty* <span class="title">get</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr;</span><br><span class="line">&#125;</span><br><span class="line">_Ty* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line">_Ty&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">use_count</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _Ref-&gt;_Users;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(shared_ptr&amp; src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::<span class="built_in">swap</span>(_Ptr, src._Ptr);</span><br><span class="line">std::<span class="built_in">swap</span>(_Ref, src._Ref);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">weak_ptr</span>&lt;_Ty&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="五、关于weak-ptr"><a href="#五、关于weak-ptr" class="headerlink" title="五、关于weak_ptr"></a>五、关于weak_ptr</h3><p>定义于头文件 <memory></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> <span class="title class_">T</span> &gt; <span class="keyword">class</span> <span class="title class_">weak_ptr</span>;</span><br><span class="line"><span class="comment">//  (C++11 起) </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>std::weak_ptr 是一种智能指针，它对被 std::shared_ptr 管理的对象存在非拥有性（「弱」）引用。在访问所引用的对象前必须先转换为 std::shared_ptr。</p><p>std::weak_ptr 用来表达临时所有权的概念：当某个对象只有存在时才需要被访问，而且随时可能被他人删除时，可以使用 std::weak_ptr 来跟踪该对象。需要获得临时所有权时，则将其转换为 std::shared_ptr，此时如果原来的 std::shared_ptr 被销毁，则该对象的生命期将被延长至这个临时的 std::shared_ptr 同样被销毁为止。</p><p>std::weak_ptr 的另一用法是打断 std::shared_ptr 所管理的对象组成的环状引用。若这种环被孤立（例如无指向环中的外部共享指针），则 shared_ptr 引用计数无法抵达零，而内存被泄露。能令环中的指针之一为弱指针以避免此情况。</p><h3 id="六、weak-ptr与shared-ptr关联内存结构"><a href="#六、weak-ptr与shared-ptr关联内存结构" class="headerlink" title="六、weak_ptr与shared_ptr关联内存结构"></a>六、weak_ptr与shared_ptr关联内存结构</h3><p><img src="https://img-blog.csdnimg.cn/695db2e7fcc8422c88153b95c93942c6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="七、weak-ptr仿写"><a href="#七、weak-ptr仿写" class="headerlink" title="七、weak_ptr仿写"></a>七、weak_ptr仿写</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//weak_ptr</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">weak_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Rfc&lt;_Ty&gt;* _Rp;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">weak_ptr</span>(Rfc&lt;_Ty&gt;* p = <span class="literal">NULL</span>) : _Rp(p)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="built_in">weak_ptr</span>(<span class="type">const</span> shared_ptr&lt;_Ty&gt;&amp; src) : _Rp(src._Ref)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Rp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">_Rp-&gt;<span class="built_in">IncRef_Weaks</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">weak_ptr</span>(<span class="type">const</span> weak_ptr&amp; src) : _Rp(src._Ref)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Rp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">_Rp-&gt;<span class="built_in">IncRef_Weaks</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">weak_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Rp != <span class="literal">NULL</span> &amp;&amp; --_Rp-&gt;_Weaks == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _Rp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">weak_ptr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> weak_ptr&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;src || _Rp == src._Rp) </span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">if</span> (_Rp != <span class="literal">NULL</span> &amp;&amp; --_Rp-&gt;_Weaks == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _Rp;</span><br><span class="line">&#125;</span><br><span class="line">_Rp = src._Rp;</span><br><span class="line"><span class="keyword">if</span> (_Rp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">_Rp-&gt;<span class="built_in">IncRef_Weaks</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">weak_ptr&amp; <span class="keyword">operator</span>=(weak_ptr&amp;&amp; rval)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rval || _Rp == rval._Rp) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">if</span> (_Rp != <span class="literal">NULL</span> &amp;&amp; rval._Rp != <span class="literal">NULL</span> &amp;&amp; _Rp == rval._Rp)</span><br><span class="line">&#123;</span><br><span class="line">--_Rp-&gt;_Weaks;</span><br><span class="line">rval._Rp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (_Rp != <span class="literal">NULL</span> &amp;&amp; --_Rp-&gt;_Weaks == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _Rp;</span><br><span class="line">&#125;</span><br><span class="line">_Rp = rval._Rp;</span><br><span class="line">rval._Rp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weak_ptr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> shared_ptr&lt;_Ty&gt;&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Rp != <span class="literal">NULL</span> &amp;&amp; --_Rp-&gt;_Weaks == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> _Rp;</span><br><span class="line">&#125;</span><br><span class="line">_Rp = src._Ref;</span><br><span class="line"><span class="keyword">if</span> (_Rp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">_Rp-&gt;<span class="built_in">IncRef_Weaks</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">weak_ptr&amp; <span class="keyword">operator</span>=(shared_ptr&lt;_Ty&gt;&amp;&amp; rval) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查关联对象是否被删除</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">expired</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _Rp-&gt;_Users == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(weak_ptr&amp; src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::<span class="built_in">swap</span>(_Rp, src._Rp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建管理被引用的对象的shared_ptr</span></span><br><span class="line"><span class="function">shared_ptr&lt;_Ty&gt; <span class="title">lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">shared_ptr&lt;_Ty&gt; tmp;</span><br><span class="line">tmp._Ptr = _Rp-&gt;_rPtr;</span><br><span class="line">tmp._Ref = _Rp;</span><br><span class="line">tmp._Ref-&gt;<span class="built_in">IncRef_Users</span>();</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shared_ptr weak_ptr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】STL中shared_ptr仿写一</title>
      <link href="/posts/50a4e218.html"/>
      <url>/posts/50a4e218.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、关于shared-ptr"><a href="#一、关于shared-ptr" class="headerlink" title="一、关于shared_ptr"></a>一、关于shared_ptr</h3><p>定义于头文件 <memory></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> <span class="title class_">T</span> &gt; <span class="keyword">class</span> <span class="title class_">shared_ptr</span>;</span><br><span class="line"><span class="comment">//(C++11 起) </span></span><br></pre></td></tr></table></figure><p>std::shared_ptr 是通过指针保持对象共享所有权的智能指针。多个 shared_ptr 对象可占有同一对象。<br>下列情况之一出现时销毁对象并解分配其内存：</p><ul><li>最后剩下的占有对象的 shared_ptr 被销毁；</li><li>最后剩下的占有对象的 shared_ptr 被通过 operator= 或 reset() 赋值为另一指针。</li></ul><hr><h3 id="二、shared-ptr对象内存结构"><a href="#二、shared-ptr对象内存结构" class="headerlink" title="二、shared_ptr对象内存结构"></a>二、shared_ptr对象内存结构</h3><p><img src="https://img-blog.csdnimg.cn/43b819cffb2b4eda9aa8a97edf5ddd8d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="三、仿写代码"><a href="#三、仿写代码" class="headerlink" title="三、仿写代码"></a>三、仿写代码</h3><p><code>shared_ptr</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SHARED_PTR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHARED_PTR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> pzj</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//单个对象删除器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Deleter</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Deleter</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(_Ty* p = <span class="literal">NULL</span>)</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//一组对象删除器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Deleter</span>&lt;_Ty[]&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Deleter</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(_Ty* p = <span class="literal">NULL</span>)</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用计数类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rfc</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Ty* _mptr;<span class="comment">//存放被管理对象的地址</span></span><br><span class="line"><span class="type">size_t</span> _count;<span class="comment">//管理者的个数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Rfc</span>(_Ty* p = <span class="literal">NULL</span>) : _mptr(p), _count(p != <span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">~<span class="built_in">Rfc</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单个对象版本</span></span><br><span class="line"><span class="comment">//shared_ptr</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">Deleter_T</span> = Deleter&lt;_Ty&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> shared_ptr</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">shared_ptr</span>(_Ty* p = <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">_Ptr = <span class="keyword">new</span> <span class="built_in">Rfc</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">shared_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span> &amp;&amp; --_Ptr-&gt;_count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">deleter</span>(_Ptr-&gt;_mptr);</span><br><span class="line"><span class="keyword">delete</span> _Ptr;</span><br><span class="line">&#125;</span><br><span class="line">_Ptr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">shared_ptr</span>(<span class="type">const</span> shared_ptr&amp; src) : _Ptr(src._Ptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">++_Ptr-&gt;_count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">shared_ptr</span>(shared_ptr&amp;&amp; rval):_Ptr(rval._Ptr)</span><br><span class="line">&#123;</span><br><span class="line">rval._Ptr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shared_ptr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> shared_ptr&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;src) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span> &amp;&amp; --_Ptr-&gt;_count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">deleter</span>(_Ptr-&gt;_mptr);</span><br><span class="line"><span class="keyword">delete</span> _Ptr;</span><br><span class="line">&#125;</span><br><span class="line">_Ptr = src._Ptr;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">++_Ptr-&gt;_count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">shared_ptr&amp; <span class="keyword">operator</span>=(shared_ptr&amp;&amp; rval)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rval) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">if</span> (_Ptr == rval._Ptr &amp;&amp; _Ptr != <span class="literal">NULL</span> &amp;&amp; rval._Ptr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">--_Ptr-&gt;_count;</span><br><span class="line">rval._Ptr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span> &amp;&amp; --_Ptr-&gt;_count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">deleter</span>(_Ptr-&gt;_mptr);</span><br><span class="line"><span class="keyword">delete</span> _Ptr;</span><br><span class="line">&#125;</span><br><span class="line">_Ptr = rval._Ptr;</span><br><span class="line">rval._Ptr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(_Ty* p = <span class="literal">NULL</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span> &amp;&amp; --_Ptr-&gt;_count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">deleter</span>(_Ptr-&gt;_mptr);</span><br><span class="line"><span class="keyword">delete</span> _Ptr;</span><br><span class="line">&#125;</span><br><span class="line">_Ptr = <span class="keyword">new</span> <span class="built_in">Rfc</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">_Ty* <span class="title">get</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr-&gt;_mptr;</span><br><span class="line">&#125;</span><br><span class="line">_Ty* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line">_Ty&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">use_count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr-&gt;_count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(shared_ptr&amp; src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::<span class="built_in">swap</span>(_Ptr, src._Ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Rfc&lt;_Ty&gt;* _Ptr;<span class="comment">//存放引用计数对象地址</span></span><br><span class="line">Deleter_T deleter;<span class="comment">//删除器对象</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个对象版本</span></span><br><span class="line"><span class="comment">//shared_ptr</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">Deleter_T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">shared_ptr</span>&lt;_Ty[], Deleter_T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">shared_ptr</span>(_Ty* p = <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">_Ptr = <span class="keyword">new</span> <span class="built_in">Rfc</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">shared_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span> &amp;&amp; --_Ptr-&gt;_count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">deleter</span>(_Ptr-&gt;_mptr);</span><br><span class="line"><span class="keyword">delete</span> _Ptr;</span><br><span class="line">&#125;</span><br><span class="line">_Ptr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">shared_ptr</span>(<span class="type">const</span> shared_ptr&amp; src) : _Ptr(src._Ptr)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">++_Ptr-&gt;_count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">shared_ptr</span>(shared_ptr&amp;&amp; rval) :_Ptr(rval._Ptr)</span><br><span class="line">&#123;</span><br><span class="line">rval._Ptr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shared_ptr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> shared_ptr&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;src) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span> &amp;&amp; --_Ptr-&gt;_count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">deleter</span>(_Ptr-&gt;_mptr);</span><br><span class="line"><span class="keyword">delete</span> _Ptr;</span><br><span class="line">&#125;</span><br><span class="line">_Ptr = src._Ptr;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">++_Ptr-&gt;_count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">shared_ptr&amp; <span class="keyword">operator</span>=(shared_ptr&amp;&amp; rval)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rval) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">if</span> (_Ptr == rval._Ptr &amp;&amp; _Ptr != <span class="literal">NULL</span> &amp;&amp; rval._Ptr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">--_Ptr-&gt;_count;</span><br><span class="line">rval._Ptr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span> &amp;&amp; --_Ptr-&gt;_count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">deleter</span>(_Ptr-&gt;_mptr);</span><br><span class="line"><span class="keyword">delete</span> _Ptr;</span><br><span class="line">&#125;</span><br><span class="line">_Ptr = rval._Ptr;</span><br><span class="line">rval._Ptr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(_Ty* p = <span class="literal">NULL</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span> &amp;&amp; --_Ptr-&gt;_count == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">deleter</span>(_Ptr-&gt;_mptr);</span><br><span class="line"><span class="keyword">delete</span> _Ptr;</span><br><span class="line">&#125;</span><br><span class="line">_Ptr = <span class="keyword">new</span> <span class="built_in">Rfc</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">_Ty* <span class="title">get</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr-&gt;_mptr;</span><br><span class="line">&#125;</span><br><span class="line">_Ty* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line">_Ty&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">use_count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr-&gt;_count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(shared_ptr&amp; src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::<span class="built_in">swap</span>(_Ptr, src._Ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[]</span></span><br><span class="line">_Ty&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr-&gt;_mptr[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Rfc&lt;_Ty&gt;* _Ptr;<span class="comment">//存放引用计数对象地址</span></span><br><span class="line">Deleter_T deleter;<span class="comment">//删除器对象</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际上这并不是shared_ptr的最终形态。仿写二中将讲述shared_ptr的真实形态和交叉引用的问题。但是这种实现方式尤为重要！！！</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shared_ptr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【设计模式】工厂模式</title>
      <link href="/posts/150c8c9e.html"/>
      <url>/posts/150c8c9e.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、工厂模式"><a href="#一、工厂模式" class="headerlink" title="一、工厂模式"></a>一、工厂模式</h3><p><strong>工厂模式是对简单工厂模式的优化，以汽车为例，工厂模式有以下角色</strong></p><ul><li>抽象工厂类：抽象汽车工厂</li><li>具体工厂类：轿车工厂类、公交工厂类</li><li>抽象产品类：汽车产品类</li><li>具体产品类：汽车、公交</li></ul><p><strong>各类关系图：</strong><br><img src="https://img-blog.csdnimg.cn/b358b881621d423d9abf5416903c11dc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_11,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="二、工厂模式的实现"><a href="#二、工厂模式的实现" class="headerlink" title="二、工厂模式的实现"></a>二、工厂模式的实现</h3><p><code>Factory.h</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> FACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//抽象产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Products</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//产品方法</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">productMethod</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//car产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> : <span class="keyword">public</span> Products</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">productMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; car &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bus产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bus</span> : <span class="keyword">public</span> Products</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">productMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; bus &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Products* <span class="title">create</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//car工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">carFactory</span> : <span class="keyword">public</span> BaseFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Products* <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">car</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bus工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">busFactory</span> : <span class="keyword">public</span> BaseFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">Products* <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">bus</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><code>client.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Factory.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用流程:</span></span><br><span class="line"><span class="comment">1. 需要什么产品</span></span><br><span class="line"><span class="comment">2. 构建对应工厂</span></span><br><span class="line"><span class="comment">3. 使用对应工厂生产对应产品</span></span><br><span class="line"><span class="comment">4. 使用产品对应方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产小轿车</span></span><br><span class="line">BaseFactory* bf = <span class="keyword">new</span> <span class="built_in">carFactory</span>();</span><br><span class="line">Products* bp = bf-&gt;<span class="built_in">create</span>();</span><br><span class="line">bp-&gt;<span class="built_in">productMethod</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> bf;</span><br><span class="line"><span class="keyword">delete</span> bp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产公交车</span></span><br><span class="line">bf = <span class="keyword">new</span> <span class="built_in">busFactory</span>();</span><br><span class="line">bp = bf-&gt;<span class="built_in">create</span>();</span><br><span class="line">bp-&gt;<span class="built_in">productMethod</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> bf;</span><br><span class="line"><span class="keyword">delete</span> bp;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/892a9b09363848b793ba69e3256b8487.png" alt="在这里插入图片描述"></p><hr><h3 id="三、unique-ptr的优化"><a href="#三、unique-ptr的优化" class="headerlink" title="三、unique_ptr的优化"></a>三、unique_ptr的优化</h3><p><code>Factory.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> FACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//抽象产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Products</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//产品方法</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">productMethod</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//car产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> : <span class="keyword">public</span> Products</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">productMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; car &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bus产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bus</span> : <span class="keyword">public</span> Products</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">productMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; bus &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseFactory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> unique_ptr&lt;Products&gt; <span class="title">create</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//car工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">carFactory</span> : <span class="keyword">public</span> BaseFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">unique_ptr&lt;Products&gt; <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">unique_ptr</span>&lt;Products&gt;(<span class="keyword">new</span> <span class="built_in">car</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//bus工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">busFactory</span> : <span class="keyword">public</span> BaseFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">unique_ptr&lt;Products&gt; <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">unique_ptr</span>&lt;Products&gt;(<span class="keyword">new</span> <span class="built_in">bus</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>client.h</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工厂模式客户端</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Factory.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//生产小轿车</span></span><br><span class="line"><span class="function">unique_ptr&lt;BaseFactory&gt; <span class="title">bf</span><span class="params">(<span class="keyword">new</span> carFactory())</span></span>;</span><br><span class="line">unique_ptr&lt;Products&gt; bp = bf-&gt;<span class="built_in">create</span>();</span><br><span class="line">bp-&gt;<span class="built_in">productMethod</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产公交车</span></span><br><span class="line">bf.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">busFactory</span>());</span><br><span class="line">bp = bf-&gt;<span class="built_in">create</span>();</span><br><span class="line">bp-&gt;<span class="built_in">productMethod</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/6799a1408ef143e3845dea07d44bd7ac.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【设计模式】简单工厂模式</title>
      <link href="/posts/13444890.html"/>
      <url>/posts/13444890.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、简单工厂模式"><a href="#一、简单工厂模式" class="headerlink" title="一、简单工厂模式"></a>一、简单工厂模式</h3><p>以汽车厂生产为例子：</p><ul><li>工厂角色：（汽车厂）一个静态公有成员方法负责生产符合要求的产品；</li><li>抽象产品：是一个抽象类，其派生类有各种各样的产品；</li><li>具体产品：汽车car、公交车bus</li></ul><p><strong>对应的代码：</strong><br><code>SimpleFactory.h</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SIMPLEFACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIMPLEFACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//抽象产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Products</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">product</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> : <span class="keyword">public</span> Products</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">product</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;create car&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bus</span> : <span class="keyword">public</span> Products</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">product</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;create bus&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//静态</span></span><br><span class="line"><span class="function"><span class="type">static</span> Products* <span class="title">create_product</span><span class="params">(<span class="type">const</span> string&amp; p_name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Products* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(p_name == <span class="string">&quot;car&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="keyword">new</span> <span class="built_in">car</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p_name == <span class="string">&quot;bus&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="keyword">new</span> <span class="built_in">bus</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p><code>client.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleFactory.h&quot;</span></span></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Products* pcar = Factory::<span class="built_in">create_product</span>(<span class="string">&quot;car&quot;</span>);</span><br><span class="line">pcar-&gt;<span class="built_in">product</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line"><span class="keyword">delete</span> pcar;</span><br><span class="line"></span><br><span class="line">Products* pbus = Factory::<span class="built_in">create_product</span>(<span class="string">&quot;bus&quot;</span>);</span><br><span class="line">pbus-&gt;<span class="built_in">product</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line"><span class="keyword">delete</span> pbus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/37e613a5a6784a57801dd69fe634f56b.png" alt="在这里插入图片描述"></p><hr><h3 id="二、使用unique-ptr的优化"><a href="#二、使用unique-ptr的优化" class="headerlink" title="二、使用unique_ptr的优化"></a>二、使用unique_ptr的优化</h3><p><code>SimpleFactory.h</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SIMPLEFACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIMPLEFACTORY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//抽象产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Products</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">product</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">car</span> : <span class="keyword">public</span> Products</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">product</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;create car&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bus</span> : <span class="keyword">public</span> Products</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">product</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;create bus&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//静态</span></span><br><span class="line"><span class="function"><span class="type">static</span> unique_ptr&lt;Products&gt; <span class="title">create_product</span><span class="params">(<span class="type">const</span> string&amp; p_name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(p_name == <span class="string">&quot;car&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">unique_ptr</span>&lt;Products&gt;(<span class="keyword">new</span> <span class="built_in">car</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p_name == <span class="string">&quot;bus&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">unique_ptr</span>&lt;Products&gt;(<span class="keyword">new</span> <span class="built_in">bus</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有匹配NULL</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">unique_ptr</span>&lt;Products&gt;();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><br><code>client.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SimpleFactory.h&quot;</span></span></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">unique_ptr&lt;Products&gt; upcar = Factory::<span class="built_in">create_product</span>(<span class="string">&quot;car&quot;</span>);</span><br><span class="line">upcar-&gt;<span class="built_in">product</span>();</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;Products&gt; upbus = Factory::<span class="built_in">create_product</span>(<span class="string">&quot;bus&quot;</span>);</span><br><span class="line">upbus-&gt;<span class="built_in">product</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/31522b33f61244148ff749d154f9baf8.png" alt="在这里插入图片描述"></p><hr><h3 id="三、简单工厂模式总结"><a href="#三、简单工厂模式总结" class="headerlink" title="三、简单工厂模式总结"></a>三、简单工厂模式总结</h3><h4 id="（1）优点"><a href="#（1）优点" class="headerlink" title="（1）优点"></a>（1）优点</h4><ol><li>实现了对象创建和使用的分离</li><li>客户端仅需知道产品名对应参数即可，无需记忆类名</li><li>客户端可使用配置文件，不修改客户端代码的前提下，提高系统的灵活性</li></ol><h4 id="（2）缺点"><a href="#（2）缺点" class="headerlink" title="（2）缺点"></a>（2）缺点</h4><ol><li>工厂类职责过重</li><li>增加类个数，增加系统了系统的复杂程度</li><li>系统扩展困难，一旦增加新产品就必须修改工厂逻辑，当产品过多时就会导致工厂类过于复杂</li><li>简单工厂模式使用了静态工厂方法，造成角色无法形成基于继承的结构。</li></ol><h4 id="（3）使用场景"><a href="#（3）使用场景" class="headerlink" title="（3）使用场景"></a>（3）使用场景</h4><ol><li>工厂类创建对象较少</li><li>客户端只关心传入工厂参数，不关心如何创建对象。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】unique_ptr问题补充</title>
      <link href="/posts/d180e5ec.html"/>
      <url>/posts/d180e5ec.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="关于使用unique-ptr作为函数返回值"><a href="#关于使用unique-ptr作为函数返回值" class="headerlink" title="关于使用unique_ptr作为函数返回值"></a>关于使用unique_ptr作为函数返回值</h3><h4 id="（1）写法"><a href="#（1）写法" class="headerlink" title="（1）写法"></a>（1）写法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">fun</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(x))</span></span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; ptr = <span class="built_in">fun</span>(a);</span><br><span class="line">cout &lt;&lt; *ptr &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3d054b0599c04d689f59b85ac0c34ca3.png" alt="在这里插入图片描述"></p><p><strong>分析：</strong><br>众所周知，unique_ptr中已经将拷贝构造和赋值构造函数删除了，那为什么这个fun在返回tmp没有报错呢？<br>原因在于：值类型返回时，tmp将采用移动构造存储在临时对象空间中，将临时空间对象再使用移动赋值转移资源给ptr对象，所以并未报错，并且十分合理。</p><h4 id="（2）写法"><a href="#（2）写法" class="headerlink" title="（2）写法"></a>（2）写法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">fun</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">unique_ptr</span>&lt;<span class="type">int</span>&gt;(<span class="keyword">new</span> <span class="built_in">int</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; ptr = <span class="built_in">fun</span>(a);</span><br><span class="line">cout &lt;&lt; *ptr &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong><br>这种写法的效率明显会比第一种写法高，少一次unique_ptr对象的构建和析构</p><h4 id="（3）错误写法"><a href="#（3）错误写法" class="headerlink" title="（3）错误写法"></a>（3）错误写法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt;&amp; <span class="title">fun</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(x))</span></span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; ptr = <span class="built_in">fun</span>(a);<span class="comment">//ptr管理的对象失效</span></span><br><span class="line">cout &lt;&lt; *ptr &lt;&lt; endl;<span class="comment">//err</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>分析：</strong><br>返回值为tmp的引用，返回局部对象引用，栈帧回退时，tmp已经调用析构函数。</p><h4 id="（4）错误写法"><a href="#（4）错误写法" class="headerlink" title="（4）错误写法"></a>（4）错误写法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt;&amp;&amp; <span class="title">fun</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">unique_ptr&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(x))</span></span>;</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">move</span>(tmp);<span class="comment">//tmp生存期结束，将资源释放，以右值引用返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; ptr = <span class="built_in">fun</span>(a);</span><br><span class="line">cout &lt;&lt; *ptr &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong><br>tmp生存期结束，将资源释放，以右值引用返回，调用移动赋值，可惜该资源已经被释放。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>所以在使用unique_ptr时，尤其是作为返回值时，请务必不要以引用或者右值引用返回！！！</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unique_ptr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】STL中unique_ptr</title>
      <link href="/posts/6880505a.html"/>
      <url>/posts/6880505a.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、关于unique-ptr"><a href="#一、关于unique-ptr" class="headerlink" title="一、关于unique_ptr"></a>一、关于unique_ptr</h3><p>C++11标准引入唯一性智能指针unique_ptr，是通过指针占有并管理另一对象(new申请)，并在unique_ptr离开作用域时自动释放该对象的智能指针。定义于头文件<memory></p><ul><li>单对象一般版本：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Deleter</span> = std::default_delete&lt;T&gt;&gt; </span><br><span class="line"><span class="keyword">class</span> unique_ptr;</span><br></pre></td></tr></table></figure><ul><li>数组特化版本</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Deleter</span>&gt; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">unique_ptr</span>&lt;T[], Deleter&gt;;</span><br></pre></td></tr></table></figure><p>注：Deleter是删除器类型</p><hr><h3 id="二、相关解释"><a href="#二、相关解释" class="headerlink" title="二、相关解释"></a>二、相关解释</h3><ol><li>删除了拷贝构造、赋值重载</li><li>保留移动构造、移动赋值</li><li>unique_ptr 可以不占有对象，该情况下称它为空。</li></ol><h3 id="三、使用场景"><a href="#三、使用场景" class="headerlink" title="三、使用场景"></a>三、使用场景</h3><p><img src="https://img-blog.csdnimg.cn/0e0af01fc6e34b9a8efbae064435bab1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="四、unique-ptr仿写"><a href="#四、unique-ptr仿写" class="headerlink" title="四、unique_ptr仿写"></a>四、unique_ptr仿写</h3><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> pzj</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//强制调用类型转换成右值_Ty&amp;&amp;</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> _Ty&gt;</span></span><br><span class="line"><span class="function">_Ty&amp;&amp; <span class="title">move</span><span class="params">(_Ty&amp; src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (_Ty&amp;&amp;)src;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认删除器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Default_deleter</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="title">Default_deleter</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>= <span class="keyword">default</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(_Ty* p)</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组特化版本删除器</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Default_deleter</span>&lt;_Ty[]&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="title">Default_deleter</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>= <span class="keyword">default</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(_Ty* p)</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//unique_ptr</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">Deleter</span> = Default_deleter&lt;_Ty&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> unique_ptr</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> _Tyelement_type;</span><br><span class="line"><span class="keyword">typedef</span> _Ty*pointer;</span><br><span class="line"><span class="keyword">typedef</span> Deleter deleter_type;<span class="comment">//删除器类型</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">pointer _Ptr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除拷贝构造</span></span><br><span class="line"><span class="built_in">unique_ptr</span>(<span class="type">const</span> unique_ptr&amp; src) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="comment">//删除赋值</span></span><br><span class="line">unique_ptr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> unique_ptr&amp; src) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line"><span class="built_in">unique_ptr</span>(pointer p = <span class="literal">NULL</span>) : _Ptr(p) &#123;&#125;</span><br><span class="line"><span class="comment">//移动构造</span></span><br><span class="line"><span class="built_in">unique_ptr</span>(unique_ptr&amp;&amp; P)</span><br><span class="line">&#123;</span><br><span class="line">_Ptr = P.<span class="built_in">release</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移动赋值</span></span><br><span class="line">unique_ptr&amp; <span class="keyword">operator</span>=(unique_ptr&amp;&amp; P)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;P) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="built_in">reset</span>(P.<span class="built_in">release</span>());</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取被管理对象的指针</span></span><br><span class="line"><span class="function">pointer <span class="title">get</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr;</span><br><span class="line">&#125;</span><br><span class="line">element_type&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line">pointer <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回删除器</span></span><br><span class="line"><span class="function">deleter_type <span class="title">get_deleter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">deleter_type</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//检查是否有关联的对象</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get</span>() != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改器</span></span><br><span class="line"><span class="comment">//释放所有权前，返回被管理对象</span></span><br><span class="line"><span class="function">pointer <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pointer tmp = _Ptr;</span><br><span class="line">_Ptr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//替换被管理对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(pointer p = <span class="literal">NULL</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">get_deleter</span>()(_Ptr);</span><br><span class="line">_Ptr = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换被管理对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">const</span> unique_ptr&amp; src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pointer tmp = _Ptr;</span><br><span class="line">_Ptr = src._Ptr;</span><br><span class="line">src._Ptr = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">unique_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">get_deleter</span>()(_Ptr);</span><br><span class="line">&#125;</span><br><span class="line">_Ptr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组特化版本</span></span><br><span class="line"><span class="comment">//unique_ptr</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>, <span class="keyword">class</span> <span class="title class_">Deleter</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">unique_ptr</span>&lt;_Ty[], Deleter&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">typedef</span> _Tyelement_type;</span><br><span class="line"><span class="keyword">typedef</span> _Ty* pointer;</span><br><span class="line"><span class="keyword">typedef</span> Deleter deleter_type;<span class="comment">//删除器类型</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">pointer _Ptr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除拷贝构造</span></span><br><span class="line"><span class="built_in">unique_ptr</span>(<span class="type">const</span> unique_ptr&amp; src) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="comment">//删除赋值</span></span><br><span class="line">unique_ptr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> unique_ptr&amp; src) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line"><span class="built_in">unique_ptr</span>(pointer p = <span class="literal">NULL</span>) : _Ptr(p) &#123;&#125;</span><br><span class="line"><span class="comment">//移动构造</span></span><br><span class="line"><span class="built_in">unique_ptr</span>(unique_ptr&amp;&amp; P)</span><br><span class="line">&#123;</span><br><span class="line">_Ptr = P.<span class="built_in">release</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移动赋值</span></span><br><span class="line">unique_ptr&amp; <span class="keyword">operator</span>=(unique_ptr&amp;&amp; P)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;P) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"><span class="built_in">reset</span>(P.<span class="built_in">release</span>());</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取被管理对象的指针</span></span><br><span class="line"><span class="function">pointer <span class="title">get</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr;</span><br><span class="line">&#125;</span><br><span class="line">element_type&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line">pointer <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回删除器</span></span><br><span class="line"><span class="function">deleter_type <span class="title">get_deleter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">deleter_type</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//检查是否有关联的对象</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get</span>() != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改器</span></span><br><span class="line"><span class="comment">//释放所有权前，返回被管理对象</span></span><br><span class="line"><span class="function">pointer <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pointer tmp = _Ptr;</span><br><span class="line">_Ptr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//替换被管理对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(pointer p = <span class="literal">NULL</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">get_deleter</span>()(_Ptr);</span><br><span class="line">_Ptr = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换被管理对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">const</span> unique_ptr&amp; src)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pointer tmp = _Ptr;</span><br><span class="line">_Ptr = src._Ptr;</span><br><span class="line">src._Ptr = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">unique_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (_Ptr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">get_deleter</span>()(_Ptr);</span><br><span class="line">&#125;</span><br><span class="line">_Ptr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//[]重载</span></span><br><span class="line">element_type&amp; <span class="keyword">operator</span>[](<span class="type">const</span> <span class="type">int</span> index)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">get</span>()[index];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pzj::make_unique()创建一个unique_ptr对象</span></span><br><span class="line"><span class="comment">//例如 pzj::unique_ptr&lt;int&gt; up = pzj::make_unique&lt;int&gt;(10);</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">class</span> T, <span class="keyword">class</span>... Args &gt;</span></span><br><span class="line"><span class="function">unique_ptr&lt;T&gt; <span class="title">make_unique</span><span class="params">(Args&amp;&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">unique_ptr</span>&lt;T&gt;(<span class="keyword">new</span> <span class="built_in">T</span>(args...));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unique_ptr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】STL中被弃用的auto_ptr</title>
      <link href="/posts/e27bea23.html"/>
      <url>/posts/e27bea23.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、关于auto-ptr"><a href="#一、关于auto-ptr" class="headerlink" title="一、关于auto_ptr"></a>一、关于auto_ptr</h3><p>C++11标准前STL中就有了auto_ptr， 是通过由 new 表达式获得的对象，并在 auto_ptr 自身被销毁时删除该对象的智能指针。它可用于为动态分配的对象提供异常安全、传递动态分配对象的所有权给函数和从函数返回动态分配的对象。</p><hr><h3 id="二、实现auto-ptr"><a href="#二、实现auto-ptr" class="headerlink" title="二、实现auto_ptr"></a>二、实现auto_ptr</h3><p><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> pzj</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">auto_ptr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Ty* _P;<span class="comment">//new的对象的地址</span></span><br><span class="line"><span class="type">bool</span> owns;<span class="comment">//拥有权（_P为NULL为假，反之）</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//成员函数</span></span><br><span class="line"><span class="built_in">auto_ptr</span>(_Ty* p = <span class="literal">NULL</span>) : _P(p), <span class="built_in">owns</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//存在浅拷贝的风险</span></span><br><span class="line"><span class="comment">auto_ptr(const auto_ptr&amp; src):owns(src.owns), _P(src._P)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//存在形参拷贝构造资源转移，实参失效问题</span></span><br><span class="line"><span class="comment">auto_ptr(const auto_ptr&amp; src):owns(src.owns), _P(src.release())</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">~<span class="built_in">auto_ptr</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (owns)</span><br><span class="line">&#123;</span><br><span class="line">owns = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">delete</span> _P;</span><br><span class="line">&#125;</span><br><span class="line">_P = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//转移所有权</span></span><br><span class="line">auto_ptr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> auto_ptr&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (owns)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line">_P = src.<span class="built_in">release</span>();</span><br><span class="line"><span class="keyword">if</span> (_P != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">owns = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//观察器</span></span><br><span class="line"><span class="comment">//获取_P</span></span><br><span class="line"><span class="function">_Ty* <span class="title">get</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _P;</span><br><span class="line">&#125;</span><br><span class="line">_Ty&amp; <span class="keyword">operator</span>*()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *_P;</span><br><span class="line">&#125;</span><br><span class="line">_Ty* <span class="keyword">operator</span>-&gt;()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//return get();</span></span><br><span class="line"><span class="keyword">return</span> &amp;**<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改器</span></span><br><span class="line"><span class="comment">//替换被管理对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(_Ty* p = <span class="literal">NULL</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (owns)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">delete</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">_P = p;</span><br><span class="line"><span class="keyword">if</span> (_P == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">owns = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放被管理对象的所有权</span></span><br><span class="line"><span class="function">_Ty* <span class="title">release</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Ty* tmp = _P;</span><br><span class="line"><span class="keyword">if</span> (owns)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">delete</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">owns = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="三、auto-ptr被C-11弃用，C-17移除的原因"><a href="#三、auto-ptr被C-11弃用，C-17移除的原因" class="headerlink" title="三、auto_ptr被C++11弃用，C++17移除的原因"></a>三、auto_ptr被C++11弃用，C++17移除的原因</h3><p><strong>该智能指针已经暴露出以下缺点：</strong></p><ol><li>拷贝构造语义不明（两种拷贝构造都会带来风险：浅拷贝风险、实参失效问题）</li><li>赋值重载语义不明（转移资源or浅拷贝？）</li><li>未提出资源转移的问题（C11后提出 移动构造、移动赋值的概念）</li><li>未解决delete[]释放资源的问题</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> auto_ptr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】菱形继承和虚继承</title>
      <link href="/posts/5f1d6c43.html"/>
      <url>/posts/5f1d6c43.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、菱形继承"><a href="#一、菱形继承" class="headerlink" title="一、菱形继承"></a>一、菱形继承</h3><p><strong>菱形继承结构：</strong><br><img src="https://img-blog.csdnimg.cn/5fc223f1e59242189aa1cda7f5465dda.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ul><li>菱形继承在现实中是存在的，例如人、学生、研究生、在职研究生的关系就是属于菱形继承。</li><li>但是明显看出<code>普通的菱形继承结构出现了数据冗余</code>，而虚继承就是解决菱形继承带来的数据冗余问题。</li></ul><hr><h3 id="二、虚继承"><a href="#二、虚继承" class="headerlink" title="二、虚继承"></a>二、虚继承</h3><p><strong>语法：</strong><br><code>class 派生类 ：virtual 继承权限 基类;</code><br><strong>菱形继承代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span> : <span class="keyword">virtual</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> first;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> : <span class="keyword">virtual</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> second;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Grandson</span> : <span class="keyword">public</span> Son1, <span class="keyword">public</span> Son2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> low;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>虚继承解决数据冗余后的内存结构：</strong></p><p><img src="https://img-blog.csdnimg.cn/561606b4e51d485cb84e13039d8da20f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_13,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 菱形继承 虚继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】类模板继承问题</title>
      <link href="/posts/14968ed.html"/>
      <url>/posts/14968ed.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、情况一"><a href="#一、情况一" class="headerlink" title="一、情况一"></a>一、情况一</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Ty val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>(_Ty x = _Ty()): <span class="built_in">val</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="type">int</span> Base&lt;_Ty&gt;::num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span> : <span class="keyword">public</span> Base&lt;<span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son1</span>(): <span class="built_in">Base</span>()</span><br><span class="line">&#123;</span><br><span class="line">num +=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintNum</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> : <span class="keyword">public</span> Base&lt;<span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son2</span>(): <span class="built_in">Base</span>()</span><br><span class="line">&#123;</span><br><span class="line">num +=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintNum</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son1 s1, s2;</span><br><span class="line">Son2 c1, c2;</span><br><span class="line"></span><br><span class="line">s2.<span class="built_in">PrintNum</span>();</span><br><span class="line">c2.<span class="built_in">PrintNum</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong><br>由于Son1和Son2两个派生类都继承的是代码推演的Base<int>类（只有一份，num只有一个）; 因此两个派生类的构造函数对基类中静态num进行+1时，构建四个对象，加了4次。结果是4,4<br><strong>结果：</strong><br><img src="https://img-blog.csdnimg.cn/fd435834a2ae463baf88998f9f896f40.png" alt="在这里插入图片描述"></p><hr><h3 id="二、情况二"><a href="#二、情况二" class="headerlink" title="二、情况二"></a>二、情况二</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">_Ty val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>(_Ty x = _Ty()): <span class="built_in">val</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="type">int</span> Base&lt;_Ty&gt;::num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span> : <span class="keyword">public</span> Base&lt;<span class="type">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son1</span>(): <span class="built_in">Base</span>()</span><br><span class="line">&#123;</span><br><span class="line">num +=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintNum</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> : <span class="keyword">public</span> Base&lt;<span class="type">char</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son2</span>(): <span class="built_in">Base</span>()</span><br><span class="line">&#123;</span><br><span class="line">num +=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintNum</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son1 s1, s2;</span><br><span class="line">Son2 c1, c2;</span><br><span class="line"></span><br><span class="line">s2.<span class="built_in">PrintNum</span>();</span><br><span class="line">c2.<span class="built_in">PrintNum</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong><br>由于Son1继承Base<int>类；Son1构造函数对Base<int>::num进行+1时，构建两个对象，加了2次。结果是2<br>同理Son2继承Base<char>类；Son2构造函数对Base<char>::num进行+1时，构建两个对象，加了2次。结果是2<br><strong>结果：</strong><br><img src="https://img-blog.csdnimg.cn/d139eb9c14ce447d95f445f80d6d9ee5.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类模板继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】完美转发</title>
      <link href="/posts/1369d3f6.html"/>
      <url>/posts/1369d3f6.html</url>
      
        <content type="html"><![CDATA[<hr><p><strong>完美转发（perfect forwarding）</strong> 是指<code>函数模板在向其他函数传递参数时该如何保留该参数的左右值属性的问题。</code></p><p>也就是说函数模板在向其他函数传递自身形参时，如果相应<code>实参是左值，它就应该被转发为左值</code>；同样如果相应<code>实参是右值，它就应该被转发为右值</code>。</p><p>这样做是为了保留在其他函数针对转发而来的参数的左右值属性进行不同处理（比如参数为<code>左值时实施拷贝语义</code>；参数为<code>右值时实施移动语义</code>）的可能性。</p><p>如果将自身参数不分左右值一律转发为左值，其他函数就只能将转发而来的参数视为左值，从而失去针对该参数的左右值属性进行不同处理的可能性。</p><p>一个完美转发的例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> &amp;x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;lvalue ref&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> &amp;&amp;x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;rvalue ref&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;const lvalue ref&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;&amp;x)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;const rvalue ref&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PerfectForward</span><span class="params">(T &amp;&amp;t)</span> </span>&#123; <span class="built_in">fun</span>(std::forward&lt;T&gt;(t)); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">PerfectForward</span>(<span class="number">10</span>);           <span class="comment">// rvalue ref</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">PerfectForward</span>(a);            <span class="comment">// lvalue ref</span></span><br><span class="line"><span class="built_in">PerfectForward</span>(std::<span class="built_in">move</span>(a)); <span class="comment">// rvalue ref</span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> <span class="type">int</span> b = <span class="number">8</span>;</span><br><span class="line"><span class="built_in">PerfectForward</span>(b);            <span class="comment">// const lvalue ref</span></span><br><span class="line"><span class="built_in">PerfectForward</span>(std::<span class="built_in">move</span>(b)); <span class="comment">// const rvalue ref</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，左右值属性完美地保留了。其核心就在std::forward这个模板函数。</p><hr><p>版权声明：本文为CSDN博主「一如当初」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/aqtata/article/details/35372769">https://blog.csdn.net/aqtata/article/details/35372769</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 完美转发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】纯虚函数和抽象类</title>
      <link href="/posts/e99eace4.html"/>
      <url>/posts/e99eace4.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、纯虚函数"><a href="#一、纯虚函数" class="headerlink" title="一、纯虚函数"></a>一、纯虚函数</h3><h4 id="（1）语法"><a href="#（1）语法" class="headerlink" title="（1）语法"></a>（1）语法</h4><p><code>virtual 返回类型 函数名(形参列表) = 0;</code></p><h4 id="（2）虚函数表"><a href="#（2）虚函数表" class="headerlink" title="（2）虚函数表"></a>（2）虚函数表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>(<span class="type">int</span> x = <span class="number">0</span>): <span class="built_in">val</span>(x)&#123;&#125;</span><br><span class="line">~<span class="built_in">Base</span>()&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span><span class="type">const</span> </span>&#123;cout &lt;&lt; val &lt;&lt; endl;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/cf21af0f744d4858b1c1f92650e0834a.png" alt="在这里插入图片描述"></p><hr><h3 id="二、抽象类"><a href="#二、抽象类" class="headerlink" title="二、抽象类"></a>二、抽象类</h3><p><strong>概念：</strong>只要含有一个纯虚函数，该类就叫做抽象类</p><p>抽象类不能实例化对象，由抽象类继承而来的派生类，必须<code>重写</code>基类中的纯虚函数，否则该派生类也无法实例化对象（也是抽象类）</p><hr><h3 id="三、接口类"><a href="#三、接口类" class="headerlink" title="三、接口类"></a>三、接口类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Interface</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//接口一</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun1</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="comment">//接口二</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun2</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 纯虚函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】free delete delete[]注意事项</title>
      <link href="/posts/30d82752.html"/>
      <url>/posts/30d82752.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、尽量配套使用"><a href="#一、尽量配套使用" class="headerlink" title="一、尽量配套使用"></a>一、尽量配套使用</h3><div class="table-container"><table><thead><tr><th>申请</th><th>释放</th></tr></thead><tbody><tr><td>malloc</td><td>free</td></tr><tr><td>new()</td><td>delete</td></tr><tr><td>new[]</td><td>delete[]</td></tr></tbody></table></div><hr><h3 id="二、原因"><a href="#二、原因" class="headerlink" title="二、原因"></a>二、原因</h3><p><strong>我们举例说明：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>(<span class="type">int</span> x = <span class="number">0</span>): <span class="built_in">num</span>(x)&#123;&#125;</span><br><span class="line">~<span class="built_in">Test</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（1）申请一个Test"><a href="#（1）申请一个Test" class="headerlink" title="（1）申请一个Test()"></a>（1）申请一个Test()</h4><p><code>Test* tp = new Test();</code><br><strong>内存模型</strong><br><img src="https://img-blog.csdnimg.cn/b05893935a4f4c598c3ae1e02d744d19.png" alt="在这里插入图片描述"><br><strong>结论：</strong></p><ol><li>可以使用delete tp; </li><li>可以free(tp)，但是不适用自定义类型（未调用析构函数）</li><li>不可以delete[]，将上越界标记识别成对象个数，导致崩溃</li></ol><h4 id="（2）申请一组Test-10"><a href="#（2）申请一组Test-10" class="headerlink" title="（2）申请一组Test[10]"></a>（2）申请一组Test[10]</h4><p><code>Test* array = new Test[10];</code></p><p><strong>内存模型：</strong><br><img src="https://img-blog.csdnimg.cn/8c82877089ce4ecf8598a9466029fa5d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>结论：</strong></p><ol><li>不可以free，将对象个数当作上越界标记，导致崩溃</li><li>不可以delete，将对象个数当作上越界标记，导致崩溃</li><li>可以delete[]，正确识别对象个数，正确识别上越界标记</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> free delete </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】C语言实现继承和多态</title>
      <link href="/posts/bd43a314.html"/>
      <url>/posts/bd43a314.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、C语言实现继承"><a href="#一、C语言实现继承" class="headerlink" title="一、C语言实现继承"></a>一、C语言实现继承</h3><p><strong>原理：结构体组合类</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基类</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//基类自身属性和方法</span></span><br><span class="line"><span class="type">int</span> b_val = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b_val:%d\n&quot;</span>, b_val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Base;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Son</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//隐藏基类对象</span></span><br><span class="line">Base base;</span><br><span class="line"><span class="comment">//派生类自身属性和函数</span></span><br><span class="line"><span class="type">int</span> s_val = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s_val:%d\n&quot;</span>, s_val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;Son;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son s;</span><br><span class="line">s.<span class="built_in">show</span>();</span><br><span class="line">s.base.<span class="built_in">show</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/57c45a8582f54b7bae487fe0f62ae710.png" alt="在这里插入图片描述"></p><hr><h3 id="二、C语言实现多态"><a href="#二、C语言实现多态" class="headerlink" title="二、C语言实现多态"></a>二、C语言实现多态</h3><h4 id="（1）静态多态"><a href="#（1）静态多态" class="headerlink" title="（1）静态多态"></a>（1）静态多态</h4><p><strong>原理：使用宏实现</strong><br>静态多态：函数重载、运算符重载</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SUM(A,B) (A)+(B)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">SUM</span>(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line"><span class="function">string <span class="title">s1</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">s2</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">SUM</span>(s1, s2) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d02d339d72994e00bf0550f5fb7241e2.png" alt="在这里插入图片描述"></p><h4 id="（2）动态多态"><a href="#（2）动态多态" class="headerlink" title="（2）动态多态"></a>（2）动态多态</h4><p><strong>注意：当公有继承的基类中不存在虚函数时，构建的对象内存中不含有__vfptr指针</strong><br><strong>原理：继承前提下，使用函数指针、虚表指针、理解构建虚函数表的过程</strong></p><p>在实现动态多态前，我们先看看C++提供给我们的类结构是怎样的，以下面代码为例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> b_val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>(<span class="type">int</span> x = <span class="number">0</span>): <span class="built_in">b_val</span>(x)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b_val:&quot;</span>&lt;&lt; b_val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> s_val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>(<span class="type">int</span> x = <span class="number">0</span>) : <span class="built_in">Base</span>(x), <span class="built_in">s_val</span>(x + <span class="number">10</span>) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s_val:&quot;</span> &lt;&lt; s_val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son s;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>s对象内存结构：</strong><br><img src="https://img-blog.csdnimg.cn/b74817058b4f406f83b6549f4d3fa9bd.png" alt="在这里插入图片描述"><br><strong>实现代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//虚函数表结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">vftable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">void</span> (*show)(<span class="type">void</span>*);<span class="comment">//根据所需自定义虚函数指针类型</span></span><br><span class="line">&#125;vftable;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基类</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//虚表指针</span></span><br><span class="line">vftable* __vfptr;</span><br><span class="line"><span class="comment">//基类自身属性</span></span><br><span class="line"><span class="type">int</span> b_val = <span class="number">0</span>;</span><br><span class="line">&#125;Base;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Son</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//隐藏基类对象</span></span><br><span class="line">Base base;</span><br><span class="line"></span><br><span class="line"><span class="comment">//派生类自身属性和函数</span></span><br><span class="line"><span class="type">int</span> s_val = <span class="number">10</span>;</span><br><span class="line">&#125;Son;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基类函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowBase</span><span class="params">(<span class="type">void</span>* th)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Base* bs = (Base*)th;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b_val:%d\n&quot;</span>, bs-&gt;b_val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//派生类函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowSon</span><span class="params">(<span class="type">void</span>* th)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son* ss = (Son*)th;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s_val:%d\n&quot;</span>, ss-&gt;s_val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成基类虚函数表</span></span><br><span class="line">vftable base_vftable = &#123; ShowBase&#125;;</span><br><span class="line"><span class="comment">//生成派生类虚函数表</span></span><br><span class="line">vftable son_vftable = &#123; ShowSon &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基类构造函数</span></span><br><span class="line"><span class="function">Base* <span class="title">create_Base</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Base* tmp = (Base*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Base));</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="built_in">sizeof</span>(Base));</span><br><span class="line"><span class="comment">//设置虚表指针 指向基类虚函数表</span></span><br><span class="line">tmp-&gt;__vfptr = &amp;base_vftable;</span><br><span class="line"><span class="comment">//初始化Base中成员</span></span><br><span class="line">tmp-&gt;b_val = val;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//派生类构造函数</span></span><br><span class="line"><span class="function">Son* <span class="title">create_Son</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son* tmp = (Son*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Son));</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="built_in">sizeof</span>(Son));</span><br><span class="line"><span class="comment">//设置虚表指针</span></span><br><span class="line">tmp-&gt;base.__vfptr = &amp;son_vftable;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化Base中成员</span></span><br><span class="line">tmp-&gt;base.b_val = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//初始化Son中成员</span></span><br><span class="line">tmp-&gt;s_val = val;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.构造派生类对象</span></span><br><span class="line">Son* sp = <span class="built_in">create_Son</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">Base* bp = (Base*)sp;</span><br><span class="line"><span class="comment">//2.调用show函数指针 查派生类 虚函数表调用派生类的函数</span></span><br><span class="line">bp-&gt;__vfptr-&gt;<span class="built_in">show</span>((<span class="type">void</span>*)sp);</span><br><span class="line"><span class="built_in">free</span>(sp);</span><br><span class="line">bp = <span class="literal">NULL</span>;</span><br><span class="line">sp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：使用基类指针成功调用派生类成员方法</strong></p><p><img src="https://img-blog.csdnimg.cn/2dacf82bde72445e99a2408d37099262.png" alt="在这里插入图片描述"><br><strong>对应内存结构：</strong></p><p><img src="https://img-blog.csdnimg.cn/e286207646d1406ba9211344e8660c42.png" alt="在这里插入图片描述"></p><hr><p><strong>参考文章：</strong><br><a href="https://blog.csdn.net/dumpling5232/article/details/52632060?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164637730616780265494975%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164637730616780265494975&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-52632060.first_rank_v2_pc_rank_v29&amp;utm_term=C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%80%81&amp;spm=1018.2226.3001.4187">C语言实现多态</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c实现继承多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】虚表指针和虚函数表</title>
      <link href="/posts/47f1dfcd.html"/>
      <url>/posts/47f1dfcd.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、虚表指针和虚函数表定义"><a href="#一、虚表指针和虚函数表定义" class="headerlink" title="一、虚表指针和虚函数表定义"></a>一、虚表指针和虚函数表定义</h3><ul><li>虚表指针：指向虚函数表首地址的一个指针，存在于每个基类对象的内存中，在调用构造函数构造对象时，设置虚表指针__vfptr</li><li>虚函数表：在<code>编译阶段生成</code>，编译器将类中虚函数的地址存放在虚函数表中，虚函数表存在于全局数据区.data，每个类仅有一个，供所有对象共享。</li></ul><hr><h3 id="二、虚函数表生成"><a href="#二、虚函数表生成" class="headerlink" title="二、虚函数表生成"></a>二、虚函数表生成</h3><p>我们已经清楚虚函数表是在<code>编译期间</code>生成的，那我们详细看看虚函数表的生成过程吧，以下面代码为例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> x = <span class="number">0</span>): <span class="built_in">val</span>(x)&#123; cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">A</span>()&#123; cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123; cout &lt;&lt; <span class="string">&quot;A::fun1()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123; cout &lt;&lt; <span class="string">&quot;A::fun2()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="type">int</span> x = <span class="number">0</span>): <span class="built_in">num</span>(x), <span class="built_in">A</span>(x)&#123; cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">B</span>()&#123; cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123; cout &lt;&lt; <span class="string">&quot;B::fun1()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123; cout &lt;&lt; <span class="string">&quot;B::fun2()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>😏生成的虚函数表的过程：</strong><br><img src="https://img-blog.csdnimg.cn/994683948b5547289410e0a6ddd85335.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="三、虚表指针的内存模型"><a href="#三、虚表指针的内存模型" class="headerlink" title="三、虚表指针的内存模型"></a>三、虚表指针的内存模型</h3><p><strong><code>以上面代码为例：生成B b(10);对象的内存模型</code></strong><br><img src="https://img-blog.csdnimg.cn/83e0515b4c2b4669bf3267875ce6d235.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="四、虚表指针的设置过程"><a href="#四、虚表指针的设置过程" class="headerlink" title="四、虚表指针的设置过程"></a>四、虚表指针的设置过程</h3><p><strong>设置时机：</strong><br>运行阶段调用类的构造函数时、调用析构函数（定义成虚函数）时</p><h4 id="1-构造过程"><a href="#1-构造过程" class="headerlink" title="1. 构造过程"></a>1. 构造过程</h4><p><strong>（1）调用A(10)构造函数并设置__vfptr</strong><br><img src="https://img-blog.csdnimg.cn/f7dff4576bae4733bef5ef3912821b59.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>（2）构造b(10)并设置__vfptr过程</strong></p><p><img src="https://img-blog.csdnimg.cn/eb9117cf57664dff9b53a78553eeaa75.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="2-析构过程"><a href="#2-析构过程" class="headerlink" title="2. 析构过程"></a>2. 析构过程</h4><p><strong>（1）先析构派生类对象b(10)</strong><br><img src="https://img-blog.csdnimg.cn/0c544b2837f3480c84f46ee4eeb638ac.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>（2）析构基类对象过程</strong><br><img src="https://img-blog.csdnimg.cn/bc222166bc194e15909406737e953892.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚表指针 虚函数表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】虚函数与多态</title>
      <link href="/posts/504374f5.html"/>
      <url>/posts/504374f5.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、虚函数"><a href="#一、虚函数" class="headerlink" title="一、虚函数"></a>一、虚函数</h3><p>类成员方法（除过构造函数）前使用virtual关键字，将函数声明成虚函数。类外实现函数的定义无需在前加virtual关键字。</p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;工作&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></h2><h3 id="二、多态"><a href="#二、多态" class="headerlink" title="二、多态"></a>二、多态</h3><p>静态多态：编译期间就已经确定函数的调用时机（函数重载、运算符重载）<br>动态多态：运行时确定函数的调用时机</p><p><strong>动态多态触发条件：</strong></p><ol><li>公有继承中</li><li>基类含有虚函数&amp;&amp;派生类重写虚函数</li><li>使用基类指针或引用访问派生类成员方法</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;工作&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;学习&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Programmer</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;编程&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HowWork</span><span class="params">(Person* p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p-&gt;<span class="built_in">work</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student stu;</span><br><span class="line">Programmer code;</span><br><span class="line"><span class="built_in">HowWork</span>(&amp;stu);</span><br><span class="line"><span class="built_in">HowWork</span>(&amp;code);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e7e4ad4f19fc47439b5a7417ffeb22a2.png" alt="在这里插入图片描述"><br><strong>总结：</strong></p><ol><li>虚函数适用于有继承关系的类对象（类的成员函数才能设置成虚函数）</li><li>静态成员函数不能作为虚函数（不依赖于对象）</li><li>成员函数内联不能作为虚函数（每个对象一份拷贝，无映射关系）</li><li>构造函数不可以作为虚函数（调用构造函数时，对象还未被实例化）</li><li>基类和派生类中动态分配内存空间时，需要将析构函数定义为虚函数（实现析构对象的多态性）</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚函数 多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】继承中对象构造与析构、赋值</title>
      <link href="/posts/4cf638fe.html"/>
      <url>/posts/4cf638fe.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、构造-析构顺序及继承性"><a href="#一、构造-析构顺序及继承性" class="headerlink" title="一、构造/析构顺序及继承性"></a>一、构造/析构顺序及继承性</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> a = <span class="number">0</span>): _a(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~A()&quot;</span>&lt;&lt; <span class="keyword">this</span> &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="type">int</span> b): _b(b), <span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~B()&quot;</span>&lt;&lt; <span class="keyword">this</span> &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9b3bf9b041f44d169d12c8b8e004869c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>结论：</strong></p><ol><li>构造顺序：先构造基类，后构造派生类</li><li>析构顺序：先析构派生类，后析构基类</li></ol><hr><h3 id="二、拷贝构造的继承性"><a href="#二、拷贝构造的继承性" class="headerlink" title="二、拷贝构造的继承性"></a>二、拷贝构造的继承性</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> a = <span class="number">0</span>): _a(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">A</span>(<span class="type">const</span> A&amp; src): _a(src._a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A(const A&amp; src)&quot;</span>&lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~A()&quot;</span>&lt;&lt; <span class="keyword">this</span> &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="type">int</span> b): _b(b), <span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">B</span>(<span class="type">const</span> B&amp; src): _b(src._b)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B(const B&amp; src)&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~B()&quot;</span>&lt;&lt; <span class="keyword">this</span> &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3ac39f5297174c59ab294eca8cf4a438.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>结论：</strong></p><ol><li>先调用基类缺省的构造函数，后调用派生类的拷贝构造函数</li><li>若派生类没有缺省构造函数A()，就会报错</li></ol><p><strong>疑惑：如何去调用基类的拷贝构造而不是缺省构造</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> a = <span class="number">0</span>) : _a(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">A</span>(<span class="type">const</span> A&amp; src) : _a(src._a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A(const A&amp; src)&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="type">int</span> b) : _b(b), <span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">B</span>(<span class="type">const</span> B&amp; src) : _b(src._b), <span class="built_in">A</span>(src)<span class="comment">//发生赋值兼容规则（切片)</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B(const B&amp; src)&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">B <span class="title">b</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">B <span class="title">b1</span><span class="params">(b)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c28f4bae83aa4345b1987660b45c0098.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>结果：</strong></p><p>将B类型src传递给A类型的A(const A&amp; src)拷贝构造函数，发生了赋值兼容规则（切片现象）</p><hr><h3 id="三、赋值重载不具有继承性"><a href="#三、赋值重载不具有继承性" class="headerlink" title="三、赋值重载不具有继承性"></a>三、赋值重载不具有继承性</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> a = <span class="number">0</span>) : _a(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">A</span>(<span class="type">const</span> A&amp; src) : _a(src._a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A(const A&amp; src)&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">A&amp; <span class="keyword">operator</span>=(<span class="type">const</span> A&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> != &amp;src)</span><br><span class="line">&#123;</span><br><span class="line">_a = src._a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A&amp; operator=(const A&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="type">int</span> b) : _b(b), <span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">B</span>(<span class="type">const</span> B&amp; src) : _b(src._b), <span class="built_in">A</span>(src)<span class="comment">//发生赋值兼容规则（切片)</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B(const B&amp; src)&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">B&amp; <span class="keyword">operator</span>=(<span class="type">const</span> B&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> != &amp;src)</span><br><span class="line">&#123;</span><br><span class="line">_b = src._b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B&amp; operator=(const B&amp; src)&quot;</span> &lt;&lt;  endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">B <span class="title">b1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">B <span class="title">b2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">b1 = b2;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2e52ce4221074fee892959763cc54a37.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>结论：默认情况下仅仅调用了派生类的对象的赋值重载，并未调用基类的赋值重载。</strong></p><p><strong>解决方案：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">int</span> a = <span class="number">0</span>) : _a(a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">A</span>(<span class="type">const</span> A&amp; src) : _a(src._a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A(const A&amp; src)&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">A&amp; <span class="keyword">operator</span>=(<span class="type">const</span> A&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> != &amp;src)</span><br><span class="line">&#123;</span><br><span class="line">_a = src._a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;A&amp; operator=(const A&amp; src)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~A()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _b;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">B</span>(<span class="type">int</span> b) : _b(b), <span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">B</span>(<span class="type">const</span> B&amp; src) : _b(src._b), <span class="built_in">A</span>(src)<span class="comment">//发生赋值兼容规则（切片)</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B(const B&amp; src)&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">B&amp; <span class="keyword">operator</span>=(<span class="type">const</span> B&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> != &amp;src)</span><br><span class="line">&#123;</span><br><span class="line">*(A*)<span class="keyword">this</span> = src;<span class="comment">//将调用基类赋值重载</span></span><br><span class="line">_b = src._b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;B&amp; operator=(const B&amp; src)&quot;</span> &lt;&lt;  endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">B</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~B()&quot;</span> &lt;&lt; <span class="keyword">this</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">B <span class="title">b1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">B <span class="title">b2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">b1 = b2;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4768ff37c11949c3b4373957db9ddc39.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构造/析构/赋值顺序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】继承中的同名隐藏和赋值兼容规则</title>
      <link href="/posts/edfb960.html"/>
      <url>/posts/edfb960.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、继承中同名隐藏"><a href="#一、继承中同名隐藏" class="headerlink" title="一、继承中同名隐藏"></a>一、继承中同名隐藏</h3><h4 id="（1）同名成员属性"><a href="#（1）同名成员属性" class="headerlink" title="（1）同名成员属性"></a>（1）同名成员属性</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _a;<span class="comment">//这个_a</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_a = <span class="number">10</span>;<span class="comment">//就近原则</span></span><br><span class="line">A::_a = <span class="number">20</span>;<span class="comment">//加上作用域访问</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（2）同名成员方法"><a href="#（2）同名成员方法" class="headerlink" title="（2）同名成员方法"></a>（2）同名成员方法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123; cout &lt;&lt; <span class="string">&quot;A::fun&quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123; cout &lt;&lt; <span class="string">&quot;B::fun&quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">B b;</span><br><span class="line">b.<span class="built_in">fun</span>();</span><br><span class="line">b.A::<span class="built_in">fun</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>错误理解：函数重载</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> x)</span></span>&#123; cout &lt;&lt; <span class="string">&quot;A::fun(int)&quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123; cout &lt;&lt; <span class="string">&quot;B::fun&quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">B b;</span><br><span class="line">b.<span class="built_in">fun</span>();</span><br><span class="line">b.<span class="built_in">fun</span>(<span class="number">10</span>);<span class="comment">//编译器报错：参数太多 （B::fun隐藏了A:fun(int) 想要调用A中fun必须使用A::）b.A::fun(10);</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li>继承中的同名成员属性、同名成员方法，通常是编译器将基类中同名成员属性和方法隐藏，只显示派生类中的同名成员属性、方法</li><li>继承中要想访问基类中的同名成员属性、同名成员方法必须加上基类名::方法名进行访问</li><li>继承中的同名成员是隐藏，不是覆盖、不是函数重载！！！</li></ol><hr><h3 id="二、赋值兼容规则"><a href="#二、赋值兼容规则" class="headerlink" title="二、赋值兼容规则"></a>二、赋值兼容规则</h3><p><strong>前提：公有继承</strong></p><ul><li>派生类的对象可以赋值给基类对象。</li><li>在赋值时舍弃派生类自己的成员，只进行数据成员的赋值。</li><li>赋值只是对数据成员赋值，对成员函数不存在赋值问题，内存中数据成员和成员函数是分开的。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> _a = <span class="number">0</span>): _age(_a)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> : <span class="keyword">public</span> Person</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>(<span class="type">int</span> _s = <span class="number">0</span>): <span class="built_in">Person</span>(), <span class="built_in">score</span>(_s)</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Student <span class="title">stu</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">p = stu;<span class="comment">//赋值兼容规则（切片）</span></span><br><span class="line"></span><br><span class="line">Person* ptr = &amp;stu;<span class="comment">//赋值兼容规则（切片）</span></span><br><span class="line"></span><br><span class="line">Person&amp; per = stu;<span class="comment">//赋值兼容规则（切片）</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li>公有继承是一个的概念： 派生类对象是一个基类对象</li><li>公有继承下，可以使用派生来对象给基类对象进行赋值（赋值兼容规则）</li><li>公有继承下，可以使用基类指针或者基类引用去 访问派生类对象。</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 赋值兼容规则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】继承中的权限</title>
      <link href="/posts/b6ded184.html"/>
      <url>/posts/b6ded184.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="一、默认权限"><a href="#一、默认权限" class="headerlink" title="一、默认权限"></a>一、默认权限</h3><p>struct 默认公有权限<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>class 默认私有权限</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="二、默认继承权限"><a href="#二、默认继承权限" class="headerlink" title="二、默认继承权限"></a>二、默认继承权限</h3><h4 id="（1）class-继承-struct"><a href="#（1）class-继承-struct" class="headerlink" title="（1）class 继承 struct"></a>（1）class 继承 struct</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : A&#123;&#125;;<span class="comment">//默认私有继承</span></span><br></pre></td></tr></table></figure><h4 id="（2）struct-继承-class"><a href="#（2）struct-继承-class" class="headerlink" title="（2）struct 继承 class"></a>（2）struct 继承 class</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> : A&#123;&#125;;<span class="comment">//默认公有继承</span></span><br></pre></td></tr></table></figure><p>😀<strong>总结：以派生类的默认权限作为继承权限</strong></p><hr><h3 id="三、继承权限探究"><a href="#三、继承权限探究" class="headerlink" title="三、继承权限探究"></a>三、继承权限探究</h3><h4 id="（1）公有继承"><a href="#（1）公有继承" class="headerlink" title="（1）公有继承"></a>（1）公有继承</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _Ba;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> _Bb;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _Bc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _Sa;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> _Sb;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _Sc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>😋Son的内存结构模型（类内访问）</strong></p><p><img src="https://img-blog.csdnimg.cn/47ad2ac941a3486bb2d92b3ddfd07cac.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_13,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）私有继承"><a href="#（2）私有继承" class="headerlink" title="（2）私有继承"></a>（2）私有继承</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">private</span> Base</span><br><span class="line">&#123;&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>😋Son的内存结构模型（类内访问）</strong><br><img src="https://img-blog.csdnimg.cn/6b4ba69b9157485aa311b8f3daa32f8f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（3）保护继承"><a href="#（3）保护继承" class="headerlink" title="（3）保护继承"></a>（3）保护继承</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">protected</span> Base</span><br><span class="line">&#123;&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>😋Son的内存结构模型（类内访问）</strong><br><img src="https://img-blog.csdnimg.cn/b89697fb2c5a4f198904af3e6f7ac8d8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>总结：</strong><br><strong>1. 无论采取何种继承方式，派生类都可以类内访问基类中的public和protected权限的成员属性</strong></p><p><strong>2. 采用何种继承方式，继承而来的基类成员和方法就以该种权限存在于派生类中</strong></p><hr><h3 id="四、继承和派生类中定义基类成员权限的区别"><a href="#四、继承和派生类中定义基类成员权限的区别" class="headerlink" title="四、继承和派生类中定义基类成员权限的区别"></a>四、继承和派生类中定义基类成员权限的区别</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _Ba;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> _Bb;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _Bc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> _Sa;</span><br><span class="line">Base _SB_a;<span class="comment">//基类对象</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> _Sb;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> _Sc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>😃Base对象模型：</strong><br><img src="https://img-blog.csdnimg.cn/5431dc97b19b45f4878999cd404f0808.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>总结：派生类中定义基类对象，访问成员只能类内访问public权限的属性。（区别继承：无法内类访问protected权限）</strong></p><p><strong>注意：😃要区别于类外访问！！！类外只能访问public</strong></p><hr>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 继承中的权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】STL中list仿写</title>
      <link href="/posts/b41312c7.html"/>
      <url>/posts/b41312c7.html</url>
      
        <content type="html"><![CDATA[<hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_H</span></span><br><span class="line"><span class="keyword">namespace</span> pzj</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(T v1, T v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T tmp = v1;</span><br><span class="line">v1 = v2;</span><br><span class="line">v2 = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//_Ty值类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_Ty</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//设计节点类型</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Node</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_Node</span>* _Nodeptr;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Node</span></span><br><span class="line">&#123;</span><br><span class="line">_Ty value;          <span class="comment">//value</span></span><br><span class="line">_Nodeptr pref;      <span class="comment">//前驱</span></span><br><span class="line">_Nodeptr next;      <span class="comment">//后继</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//设计获取结点数据类</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Acc</span>;</span><br><span class="line"><span class="keyword">typedef</span> _Ty&amp; _Valref;  <span class="comment">//value的引用类型</span></span><br><span class="line"><span class="keyword">typedef</span> _Node*&amp; _Noderef; <span class="comment">//指针的引用类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">_Acc</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获取结点中的值的引用</span></span><br><span class="line"><span class="function"><span class="type">static</span> _Valref <span class="title">Value</span><span class="params">(_Nodeptr node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> node-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取结点中的pref的引用</span></span><br><span class="line"><span class="type">static</span> _Noderef _Pref(_Nodeptr node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> node-&gt;pref;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取节点中的next的引用</span></span><br><span class="line"><span class="type">static</span> _Noderef _Next(_Nodeptr node)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> node-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//_Ty的类型重命名:两种迭代器将使用</span></span><br><span class="line"><span class="keyword">typedef</span> _Ty         value_type;</span><br><span class="line"><span class="keyword">typedef</span> _Ty*value_pointer;</span><br><span class="line"><span class="keyword">typedef</span> _Ty&amp;value_reference;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">const</span> _Ty*value_const_pointer;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">const</span> _Ty&amp;value_const_reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//设计两种迭代器</span></span><br><span class="line"><span class="comment">//能力：const_itreator（常性迭代器） &lt; iterator迭代器</span></span><br><span class="line"><span class="comment">//能力：const_reverse_iterator(常性反向迭代器) &lt; reverse_iterator(反向迭代器)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iterator</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">const_iterator</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">reverse_iterator</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">const_reverse_itertor</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//常性迭代器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">const_iterator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">_Nodeptr _Ptr; <span class="comment">//节点指针类型（结点地址）</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">const_iterator</span>(_Nodeptr node = <span class="literal">nullptr</span>) : _Ptr(node) &#123;&#125;</span><br><span class="line"><span class="comment">//获取_Ptr指向节点中的value</span></span><br><span class="line">value_const_reference <span class="keyword">operator</span>*() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _Acc::<span class="built_in">Value</span>(_Ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取value地址</span></span><br><span class="line">value_const_pointer <span class="keyword">operator</span>-&gt;() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// return &amp;_Acc::Value(_Ptr);</span></span><br><span class="line"><span class="keyword">return</span> &amp;**<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前置++ 后继结点的迭代器</span></span><br><span class="line">const_iterator&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">_Ptr = _Acc::_Next(_Ptr);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">const_iterator <span class="keyword">operator</span>++(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">iterator tmp = *<span class="keyword">this</span>;</span><br><span class="line">++* <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const_iterator&amp; <span class="keyword">operator</span>--()</span><br><span class="line">&#123;</span><br><span class="line">_Ptr = _Acc::_Pref(_Ptr);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">const_iterator <span class="keyword">operator</span>--(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">iterator tmp = *<span class="keyword">this</span>;</span><br><span class="line">--* <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ==</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> const_iterator &amp; it) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr == it._Ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//!=</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> const_iterator&amp; it) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回_Ptr</span></span><br><span class="line"><span class="function">_Nodeptr <span class="title">MyNode</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> _Ptr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器:同名方法隐藏</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iterator</span> : <span class="keyword">public</span> const_iterator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//解决未识别const_iterator中的_Ptr</span></span><br><span class="line"><span class="keyword">typedef</span> const_iterator Base;</span><br><span class="line"></span><br><span class="line"><span class="built_in">iterator</span>(_Nodeptr node = <span class="literal">nullptr</span>) :<span class="built_in">const_iterator</span>(node) &#123;&#125;</span><br><span class="line"><span class="comment">//获取_Ptr指向节点中的value</span></span><br><span class="line">value_reference <span class="keyword">operator</span>*()<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _Acc::<span class="built_in">Value</span>(Base::_Ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取value地址</span></span><br><span class="line">value_pointer <span class="keyword">operator</span>-&gt;()<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//return &amp;_Acc::Value(_Ptr);</span></span><br><span class="line"><span class="keyword">return</span> &amp;**<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前置++ 后继结点的迭代器</span></span><br><span class="line">iterator&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">Base::_Ptr = _Acc::_Next(Base::_Ptr);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">iterator <span class="keyword">operator</span>++(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">iterator tmp = *<span class="keyword">this</span>;</span><br><span class="line">++* <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">iterator&amp; <span class="keyword">operator</span>--()</span><br><span class="line">&#123;</span><br><span class="line">Base::_Ptr = _Acc::_Pref(Base::_Ptr);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">iterator <span class="keyword">operator</span>--(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">iterator tmp = *<span class="keyword">this</span>;</span><br><span class="line">--* <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ==</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> iterator &amp; it)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Base::_Ptr == it._Ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//!=</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> iterator&amp; it)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">_Nodeptr <span class="title">MyNode</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Base::_Ptr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//List成员属性</span></span><br><span class="line">_Nodeptr_Head;<span class="comment">//头结点</span></span><br><span class="line"><span class="type">size_t</span>_Size;<span class="comment">//数据结点个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//申请结点</span></span><br><span class="line"><span class="function">_Nodeptr <span class="title">Alloc_Node</span><span class="params">(_Nodeptr pref = <span class="literal">nullptr</span>, _Nodeptr next = <span class="literal">nullptr</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Nodeptr node = (_Nodeptr)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(_Node));</span><br><span class="line"><span class="built_in">assert</span>(node != <span class="literal">nullptr</span>);</span><br><span class="line">_Acc::_Next(node) = next == <span class="literal">nullptr</span> ? node : next;</span><br><span class="line">_Acc::_Pref(node) = pref == <span class="literal">nullptr</span> ? node : pref;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Delete_Node</span><span class="params">(_Nodeptr node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">nullptr</span> != node)</span><br><span class="line"><span class="built_in">free</span>(node);</span><br><span class="line">node = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//List的成员方法</span></span><br><span class="line"><span class="built_in">List</span>() :_Head(<span class="built_in">Alloc_Node</span>()), _Size(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">~<span class="built_in">List</span>() </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">Delete_Node</span>(_Head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">List</span>(<span class="type">const</span> List&amp; _S):_Head(<span class="built_in">Alloc_Node</span>()), _Size(<span class="number">0</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">insert</span>(<span class="built_in">begin</span>(), _S.<span class="built_in">begin</span>(), _S.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//list&lt;_Ty&gt; list = &#123;, , ,&#125;;构建</span></span><br><span class="line"><span class="built_in">List</span>(std::initializer_list&lt;_Ty&gt; list) :<span class="built_in">List</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; it : list)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">push_back</span>(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//list&lt;_Ty&gt; list(iterator ...,&#123;, , ,&#125;);构建</span></span><br><span class="line"><span class="built_in">List</span>(iterator _P, std::initializer_list&lt;_Ty&gt; list) :<span class="built_in">List</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : list)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">insert</span>(_P, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//_P迭代器之前 插入结点</span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator _P, <span class="type">const</span> _Ty&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">_Nodeptr _S = _P.<span class="built_in">MyNode</span>();</span><br><span class="line"></span><br><span class="line">_Acc::_Pref(_S) = <span class="built_in">Alloc_Node</span>(_Acc::_Pref(_S), _S);</span><br><span class="line">_S = _Acc::_Pref(_S);</span><br><span class="line">_Acc::_Next(_Acc::_Pref(_S)) = _S;</span><br><span class="line"></span><br><span class="line"><span class="comment">////在这个地址中调用_Ty的构造函数（例：string）</span></span><br><span class="line"><span class="keyword">new</span>(&amp;_Acc::<span class="built_in">Value</span>(_S)) _Ty(val);</span><br><span class="line">++_Size;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">iterator</span>(_S);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从_P迭代器之前 插入_F到_L之间的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(iterator _P, <span class="type">const</span> _Ty&amp; _F, <span class="type">const</span> _Ty&amp; _L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (; _F != _L; ++_F)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">insert</span>(_P, *_F);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重命名常性迭代器</span></span><br><span class="line"><span class="keyword">typedef</span> const_iterator _It;</span><br><span class="line"><span class="comment">//从_P迭代器之前 插入_F迭代器到_L迭代器之间的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(iterator _P, _It _F, _It _L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (; _F != _L; ++_F)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">insert</span>(_P, *_F);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从_P迭代器之前 插入count个val</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(iterator _P, <span class="type">size_t</span> count,<span class="type">const</span> _Ty&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(count &gt; <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (count--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">insert</span>(_P, val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//push_front</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_front</span><span class="params">(<span class="type">const</span> _Ty&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">insert</span>(<span class="built_in">begin</span>(), val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//push_back</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> _Ty&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">insert</span>(<span class="built_in">end</span>(), val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除_P迭代器的结点</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator _P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//先调用重载后置++,返回</span></span><br><span class="line">_Nodeptr _S = _P++.<span class="built_in">MyNode</span>();</span><br><span class="line">_Acc::_Next(_Acc::_Pref(_S)) = _Acc::_Next(_S);</span><br><span class="line">_Acc::_Pref(_Acc::_Next(_S)) = _Acc::_Pref(_S);</span><br><span class="line"><span class="comment">//调用_P指向的结点中数据的析构函数</span></span><br><span class="line">(&amp;_Acc::<span class="built_in">Value</span>(_S))-&gt;~_Ty();</span><br><span class="line"><span class="built_in">Delete_Node</span>(_S);</span><br><span class="line">--_Size;</span><br><span class="line"><span class="keyword">return</span> _P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_front</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">erase</span>(<span class="built_in">begin</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">erase</span>(--<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(iterator _F, iterator _L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (; _F != _L; )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">erase</span>(_F++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">erase</span>(<span class="built_in">begin</span>(), <span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">const</span> _Ty&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (iterator it = <span class="built_in">begin</span>(); it != <span class="built_in">end</span>(); ++it)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (val == *it)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">erase</span>(it);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove_all</span><span class="params">(<span class="type">const</span> _Ty&amp; _X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">iterator _F = <span class="built_in">begin</span>(), _L = <span class="built_in">end</span>();</span><br><span class="line"><span class="keyword">for</span> (; _F != _L; )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*_F == _X)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">erase</span>(_F++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">++_F;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(List&amp; _L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pzj::<span class="built_in">swap</span>(_Head, _L._Head);</span><br><span class="line">pzj::<span class="built_in">swap</span>(_Size, _L._Size);</span><br><span class="line">&#125;</span><br><span class="line">List&amp; <span class="keyword">operator</span>=(<span class="type">const</span> List &amp; _S)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == &amp;_S)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">iterator _F1 = <span class="built_in">begin</span>();</span><br><span class="line">iterator _L1 = <span class="built_in">end</span>();</span><br><span class="line">const_iterator _F2 = _S.<span class="built_in">begin</span>();</span><br><span class="line">const_iterator _L2 = _S.<span class="built_in">end</span>();</span><br><span class="line"><span class="keyword">while</span> (_F1 != _L1 &amp;&amp; _F2 != _L2)</span><br><span class="line">&#123;</span><br><span class="line">*_F1 = *_F2;</span><br><span class="line">++_F1;</span><br><span class="line">++_F2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">erase</span>(_F1, _L1);</span><br><span class="line"><span class="built_in">insert</span>(_L1, _F2, _L2);</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//List的迭代器方法</span></span><br><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">iterator</span>(_Acc::_Next(_Head));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">iterator</span>(_Head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">const_iterator <span class="title">begin</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">const_iterator</span>(_Acc::_Next(_Head));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">const_iterator <span class="title">end</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">const_iterator</span>(_Head);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【leetcode 203】移除链表元素</title>
      <link href="/posts/e10fbfcd.html"/>
      <url>/posts/e10fbfcd.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）题目描述"><a href="#（一）题目描述" class="headerlink" title="（一）题目描述"></a>（一）题目描述</h3><p><img src="https://img-blog.csdnimg.cn/4c07cec55ca443ed9a56eb9b0d56998d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="（二）题目意图"><a href="#（二）题目意图" class="headerlink" title="（二）题目意图"></a>（二）题目意图</h3><p>删除head链表中所有的val == Node.val的结点，最终返回头结点。</p><hr><h3 id="（三）题目分析"><a href="#（三）题目分析" class="headerlink" title="（三）题目分析"></a>（三）题目分析</h3><ul><li>head结点和非头结点的删除方式不同</li><li>是否使用伪头结点</li></ul><blockquote><p>我的错误分析：误以为head中的val不作为val==head-&gt;val的条件，所以未对head结点进行处理。<br>未考虑到的：head结点为nullptr</p></blockquote><hr><h3 id="（四）画图分析"><a href="#（四）画图分析" class="headerlink" title="（四）画图分析"></a>（四）画图分析</h3><p><strong><code>例如：删除[6,2,6,3,4,5,6]中的6</code></strong></p><p><strong>（1）未使用伪头结点</strong></p><p><img src="https://img-blog.csdnimg.cn/cd6fc9955ece485981b7002858aaa3f1.png" alt="在这里插入图片描述"><br>可以看到删除的结点既有头结点、中间结点、尾结点。<br><strong>代码：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不使用伪头结点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除头结点</span></span><br><span class="line">    <span class="comment">//头结点不为nullptr head-&gt;val == val</span></span><br><span class="line">    <span class="keyword">while</span>(head != <span class="literal">NULL</span> &amp;&amp; head-&gt;val == val)</span><br><span class="line">    &#123;</span><br><span class="line">        ListNode* tmp = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除非头结点</span></span><br><span class="line">    ListNode* p = head;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next-&gt;val == val)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* tmp = p-&gt;next;</span><br><span class="line">            p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>（2）使用伪头结点</strong><br><img src="https://img-blog.csdnimg.cn/48f8f71df1b94b829daefa88aaa45bca.png" alt="在这里插入图片描述"><br><strong>代码：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用伪头结点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeElements</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode* tmphead = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        <span class="comment">//tmphead-&gt;val = 0; tmphead-&gt;next = head;</span></span><br><span class="line"></span><br><span class="line">        ListNode* p = tmphead;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;next-&gt;val == val)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode* tmp = p-&gt;next;</span><br><span class="line">                p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">                <span class="keyword">delete</span> tmp;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head = tmphead-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> tmphead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】运算符重载</title>
      <link href="/posts/59df1bf6.html"/>
      <url>/posts/59df1bf6.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）不可重载的运算符"><a href="#（一）不可重载的运算符" class="headerlink" title="（一）不可重载的运算符"></a>（一）不可重载的运算符</h3><p><img src="https://img-blog.csdnimg.cn/cb6ffeaaed16477b84ef02bf25de1510.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="（二）运算符重载语法"><a href="#（二）运算符重载语法" class="headerlink" title="（二）运算符重载语法"></a>（二）运算符重载语法</h3><ul><li>函数名：<code>类型 operator运算符()&#123;&#125;</code> </li></ul><h3 id="（三）重载"><a href="#（三）重载" class="headerlink" title="（三）重载++"></a>（三）重载++</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Int</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Int</span>() :<span class="built_in">val</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"><span class="built_in">Int</span>(<span class="type">int</span> value)</span><br><span class="line">&#123;</span><br><span class="line">val = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缺省拷贝构造</span></span><br><span class="line"><span class="built_in">Int</span>(<span class="type">const</span> Int&amp; src)：<span class="built_in">val</span>(src.val)&#123;&#125;</span><br><span class="line"><span class="comment">//缺省的赋值运算符重载</span></span><br><span class="line">Int&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Int&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span> != &amp;src)</span><br><span class="line">&#123;</span><br><span class="line">val = src.val;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前置++</span></span><br><span class="line">Int&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">val++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后置++</span></span><br><span class="line">Int <span class="keyword">operator</span>++(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">Int tmp = *<span class="keyword">this</span>;</span><br><span class="line">++* <span class="keyword">this</span>;<span class="comment">//从右向左结合</span></span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line"><span class="comment">//return Int(val++); //匿名对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="（四）重载"><a href="#（四）重载" class="headerlink" title="（四）重载+"></a>（四）重载+</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象 = 对象 + 对象</span></span><br><span class="line">Int <span class="keyword">operator</span>+(<span class="type">const</span> Int&amp; right)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Int</span>(val + right.val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象 = 对象 + 常量</span></span><br><span class="line">Int <span class="keyword">operator</span>+(<span class="type">const</span> <span class="type">int</span> value)<span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Int</span>(val + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//对象 = 常量 + 对象</span></span><br><span class="line">Int <span class="keyword">operator</span>+(<span class="type">const</span> <span class="type">int</span> value, <span class="type">const</span> Int&amp; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//使用对象+常量重载</span></span><br><span class="line"><span class="keyword">return</span> right + value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运算符重载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】数组的引用</title>
      <link href="/posts/660c0b9.html"/>
      <url>/posts/660c0b9.html</url>
      
        <content type="html"><![CDATA[<p><strong>引用数组：就是对数组进行引用</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">int</span> (&amp;b)[<span class="number">5</span>] = arr;<span class="comment">//b就是arr数组的引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>通过b来打印arr中的元素：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">int</span>(&amp;b)[<span class="number">5</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>完整：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">int</span>(&amp;b)[<span class="number">5</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">Print</span>(arr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2804286ec91e4320b7e15d681fdd89b0.png" alt="在这里插入图片描述"></p><hr><p><strong>加一点模板：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">type</span>, <span class="type">int</span> len&gt;<span class="comment">//len 是非类型常量</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(type (&amp;b)[len])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; b[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">char</span> crr[<span class="number">6</span>] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">Print</span>(arr);</span><br><span class="line"><span class="built_in">Print</span>(crr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2e5e0a630cc845a89a841da6ba6d5e92.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组的引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】拷贝构造函数</title>
      <link href="/posts/ab826251.html"/>
      <url>/posts/ab826251.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）拷贝构造函数"><a href="#（一）拷贝构造函数" class="headerlink" title="（一）拷贝构造函数"></a>（一）拷贝构造函数</h3><p>同一个类的对象在内存中拥有相同的结构，若作为整体拷贝是可以的。但我们知道，同一个类的方法是所有该类的对象共用的。所以只需要拷贝数据成员。拷贝构造函数的功能就是专门拷贝数据成员的函数。</p><p>拷贝构造函数的作用：当使用一个成员对象初始化一个对象时，会调用该函数来构造对象</p><hr><h3 id="（二）浅拷贝的问题"><a href="#（二）浅拷贝的问题" class="headerlink" title="（二）浅拷贝的问题"></a>（二）浅拷贝的问题</h3><h2 id="当析构使用缺省的拷贝构造函数（浅拷贝）构造的对象和被拷贝的对象时（有堆区空间），在两次delete时，由于是浅拷贝，所以两次delete的空间地址是同一块内存地址，程序会崩溃。"><a href="#当析构使用缺省的拷贝构造函数（浅拷贝）构造的对象和被拷贝的对象时（有堆区空间），在两次delete时，由于是浅拷贝，所以两次delete的空间地址是同一块内存地址，程序会崩溃。" class="headerlink" title="- 当析构使用缺省的拷贝构造函数（浅拷贝）构造的对象和被拷贝的对象时（有堆区空间），在两次delete时，由于是浅拷贝，所以两次delete的空间地址是同一块内存地址，程序会崩溃。"></a>- 当析构使用缺省的拷贝构造函数（浅拷贝）构造的对象和被拷贝的对象时（有堆区空间），在两次delete时，由于是浅拷贝，所以两次delete的空间地址是同一块内存地址，程序会崩溃。</h2><h3 id="（三）解决方案"><a href="#（三）解决方案" class="headerlink" title="（三）解决方案"></a>（三）解决方案</h3><h4 id="（1）深拷贝的拷贝构造函数"><a href="#（1）深拷贝的拷贝构造函数" class="headerlink" title="（1）深拷贝的拷贝构造函数"></a>（1）深拷贝的拷贝构造函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//深拷贝拷贝构造函数</span></span><br><span class="line"><span class="built_in">Object</span>(<span class="type">const</span> Object&amp; src):<span class="built_in">name</span>(<span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(src.name) + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="built_in">strcpy</span>(name, src.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对应的析构函数</span></span><br><span class="line">~<span class="built_in">object</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span>* name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="（2）引用计数技术"><a href="#（2）引用计数技术" class="headerlink" title="（2）引用计数技术"></a>（2）引用计数技术</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Object</span>()</span><br><span class="line">:<span class="built_in">name</span>(<span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>]),<span class="built_in">count</span>(<span class="number">1</span>);</span><br><span class="line">&#123;</span><br><span class="line">*name = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//浅拷贝的拷贝构造函数</span></span><br><span class="line"><span class="built_in">Object</span>(Object&amp; src)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//浅拷贝，引用计数</span></span><br><span class="line">src.count++;</span><br><span class="line">*<span class="keyword">this</span> = src;<span class="comment">//使用默认的赋值运算符重载函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">Object</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(count == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] name;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//引用计数-1</span></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span>* name;</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="（四）总结"><a href="#（四）总结" class="headerlink" title="（四）总结"></a>（四）总结</h3><ul><li>拷贝构造函数的参数<code>一定要使用引用</code>（值传递会造成无限递归，因值传递生成临时对象需要调用拷贝构造函数…） </li><li>当没有显示指定该类的拷贝构造函数时，编译器提供缺省的拷贝构造函数（浅拷贝）<br><strong>形如：</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//缺省拷贝构造函数</span></span><br><span class="line"><span class="built_in">Object</span>(<span class="type">const</span> Object&amp; src):<span class="built_in">name</span>(src.name)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span>* name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>当函数的返回值是类的对象，返回的对象其实是一个通过拷贝构造函数构造的临时对象。（函数返回结束，函数栈帧回收，栈帧中的对象已无效），所以在返回之前会调用拷贝构造函数生成临时对象并返回。当该句函数调用完成，该临时对象会被析构。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拷贝构造函数 浅拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】引用实现双向函数</title>
      <link href="/posts/67f06dfa.html"/>
      <url>/posts/67f06dfa.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）题目描述"><a href="#（一）题目描述" class="headerlink" title="（一）题目描述"></a>（一）题目描述</h3><p>如何使用一个函数实现SetValue和GetValue的功能？</p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Obj</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Obj</span>():<span class="built_in">value</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetValue</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">value = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></h2><h3 id="（二）引用实现"><a href="#（二）引用实现" class="headerlink" title="（二）引用实现"></a>（二）引用实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Obj</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Obj</span>():<span class="built_in">value</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"><span class="built_in">Obj</span>(<span class="type">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line">value = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetValue</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">value = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">Fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Obj <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line">cout &lt;&lt; obj.<span class="built_in">Fun</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入</span></span><br><span class="line">obj.<span class="built_in">Fun</span>() = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line">cout &lt;&lt; obj.<span class="built_in">Fun</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0ea53d396e6d49e3b101255bc0b1eb8a.png" alt="在这里插入图片描述"></p><hr><h3 id="（三）考虑常对象情况"><a href="#（三）考虑常对象情况" class="headerlink" title="（三）考虑常对象情况"></a>（三）考虑常对象情况</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Obj</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Obj</span>() :<span class="built_in">value</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line"><span class="built_in">Obj</span>(<span class="type">int</span> val)</span><br><span class="line">&#123;</span><br><span class="line">value = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetValue</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">value = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">Fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">int</span>&amp; <span class="title">Fun</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Obj <span class="title">obj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line">cout &lt;&lt; obj.<span class="built_in">Fun</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入</span></span><br><span class="line">obj.<span class="built_in">Fun</span>() = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取</span></span><br><span class="line">cout &lt;&lt; obj.<span class="built_in">Fun</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//常对象读取</span></span><br><span class="line"><span class="function"><span class="type">const</span> Obj <span class="title">cobj</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; cobj.<span class="built_in">Fun</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d2af4e8fb87b4b069bf8c116c942bf41.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双向函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】引用本质</title>
      <link href="/posts/5757e541.html"/>
      <url>/posts/5757e541.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）汇编层面看引用"><a href="#（一）汇编层面看引用" class="headerlink" title="（一）汇编层面看引用"></a>（一）汇编层面看引用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p = &amp;a;</span><br><span class="line"><span class="type">int</span>&amp; q = a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>汇编代码：可以看出，引用底层就是指针实现的</strong><br><img src="https://img-blog.csdnimg.cn/f8563fbf463d412384a4797bd3850844.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="（二）程序分析"><a href="#（二）程序分析" class="headerlink" title="（二）程序分析"></a>（二）程序分析</h3><p><strong>我们再通过一个程序进行分析：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(<span class="type">int</span>&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* p = &amp;a;</span><br><span class="line">a = <span class="number">20</span>;</span><br><span class="line">*p = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>&amp; y = x;<span class="comment">//y是x的别名</span></span><br><span class="line"><span class="built_in">fun</span>(x);<span class="comment">//调用fun(),a是x的别名，p指向a的地址，a = 20（x = 20）,*p = 100(x = 100),所以x = 100；</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;x =&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;y =&quot;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line"><span class="built_in">fun</span>(y);<span class="comment">//调用fun(),y时x的别名，a是y的别名，p指向a的地址，a = 20（x = 20 ， y = 20）,*p = 100(y = 100, x = 100),所以x = 100；</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;x =&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;y =&quot;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/a8a235c68d884f07872e6cb8104df0e0.png" alt="在这里插入图片描述"><br><strong>编译器对引用的处理过程：</strong><br><img src="https://img-blog.csdnimg.cn/395c52c97b3547629f65b979170b67a5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="（三）总结"><a href="#（三）总结" class="headerlink" title="（三）总结"></a>（三）总结</h3><ul><li>引用是指针的一种<a href="https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95%E7%B3%96/5247005">语法糖</a>概念</li><li>指针需要开发者进行安全性检查，而引用直接封装好，让你使用。</li><li>函数禁止返回局部变量的引用</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引用本质 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】__cplusplus宏</title>
      <link href="/posts/69104668.html"/>
      <url>/posts/69104668.html</url>
      
        <content type="html"><![CDATA[<p><strong>这篇文章将讲述__cplusplus这个宏的用法。这个宏经常和预处理指令搭配使用。</strong></p><p>下面描述一个场景：同一份代码，既可以让C编译器编译并且C++编译器也可编译通过。如何实现呢？</p><hr><h4 id="（1）实现手段：-cplusplus"><a href="#（1）实现手段：-cplusplus" class="headerlink" title="（1）实现手段：__cplusplus"></a>（1）实现手段：__cplusplus</h4><p><code>#ifdef __cpluscplus</code><br><code>...//C++代码</code><br><code>#else</code><br><code>...//C代码</code><br><code>#endif</code></p><hr><h4 id="（2）测试代码"><a href="#（2）测试代码" class="headerlink" title="（2）测试代码"></a>（2）测试代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d\n&quot;</span>, a, b);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="（3）C编译器"><a href="#（3）C编译器" class="headerlink" title="（3）C编译器"></a>（3）C编译器</h4><p><img src="https://img-blog.csdnimg.cn/2f34f1e4b14144e39e58a4c1edc2b500.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/249a4518171b4a36927ba698bb7b98fc.png" alt="在这里插入图片描述"></p><hr><h3 id="（4）C-编译器"><a href="#（4）C-编译器" class="headerlink" title="（4）C++编译器"></a>（4）C++编译器</h3><p><img src="https://img-blog.csdnimg.cn/399cfed5b9b24b9588061f83163f28b1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7cb3c2f915f4470c8a9bc8bcad04d985.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> __cplusplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】new/delete对象过程</title>
      <link href="/posts/a98146b3.html"/>
      <url>/posts/a98146b3.html</url>
      
        <content type="html"><![CDATA[<h3 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h3><p>我们往往使用new delete对象，这个过程被编译器藏得很深，但是这个过程具体是什么？和C语言的malloc、free有什么样的区别和联系呢？那就先看看下面这个点类的设计，本文将通过这个代码进行new和delete对象的步骤的深入。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Point</span>()&#123;&#125;</span><br><span class="line"><span class="built_in">Point</span>(<span class="type">int</span> r, <span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">row = r;</span><br><span class="line">col = c;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Point</span>();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> row;<span class="comment">//行</span></span><br><span class="line"><span class="type">int</span> col;<span class="comment">//列</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//new p过程</span></span><br><span class="line">Point* p = <span class="keyword">new</span> <span class="built_in">Point</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//delete p过程</span></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="（一）new对象过程"><a href="#（一）new对象过程" class="headerlink" title="（一）new对象过程"></a>（一）new对象过程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//new p过程</span></span><br><span class="line">Point* p = <span class="keyword">new</span> <span class="built_in">Point</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 1.申请空间：Point* p = (Ponit*)malloc(sizeof(Point));</span></span><br><span class="line"><span class="comment">* 2.构建对象： //定位new </span></span><br><span class="line"><span class="comment">* new(s) Pointer(10, 20);</span></span><br><span class="line"><span class="comment">* 3.返回堆空间首地址</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h3 id="（二）delete对象过程"><a href="#（二）delete对象过程" class="headerlink" title="（二）delete对象过程"></a>（二）delete对象过程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//delete p过程</span></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 1.调用析构函数：p-&gt;~Point();</span></span><br><span class="line"><span class="comment">* 2.释放内存空间：free(p); p = NULL;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>C++中 分配了空间不一定就有对象（对象还没有创建出来）</li><li>使用定位new开辟的空间，需要手动调用对象的析构函数，以及手动释放free该空间</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】构造-析构详解</title>
      <link href="/posts/f81a3c12.html"/>
      <url>/posts/f81a3c12.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）构造函数的用途"><a href="#（一）构造函数的用途" class="headerlink" title="（一）构造函数的用途"></a>（一）构造函数的用途</h3><ul><li>创建对象</li><li>初始化对象的属性</li><li>类型转换(只允许单个参数的构造函数)<blockquote><p><code>explicit</code>加在构造函数前表示明确不允许隐式类型转换。</p></blockquote></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Object</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//explicit禁止隐式类型转换</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Object</span><span class="params">(<span class="type">int</span> x = <span class="number">0</span>)</span>:val(x)&#123;</span>&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Object obja;</span><br><span class="line">obja = <span class="number">10</span>;<span class="comment">//err</span></span><br><span class="line">obja = (Object)<span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="（二）构造函数的特点"><a href="#（二）构造函数的特点" class="headerlink" title="（二）构造函数的特点"></a>（二）构造函数的特点</h3><ul><li>构造函数是特有<code>公有</code>成员函数;（<code>1%特殊情况：可以私有、保护</code>）</li><li>构造函数无返回值类型（<code>实际上返回创建的对象</code>）</li><li>程序运行，构造对象时，该对象所属类的构造函数<code>自动被调用</code></li><li>构造函数可以重载</li><li>构造函数可以在类中定义，类中声明，在类外定义</li><li>若没有给定构造函数，C++编译器添加<strong>缺省的构造函数 <code>类名(void)&#123;&#125;</code></strong></li><li>只要定义一个构造函数，系统就不会生成缺省的构造函数。</li><li>缺省构造函数只能有一个</li></ul><hr><h3 id="（三）构造函数的调用情况"><a href="#（三）构造函数的调用情况" class="headerlink" title="（三）构造函数的调用情况"></a>（三）构造函数的调用情况</h3><h4 id="（1）花括号式的初始化"><a href="#（1）花括号式的初始化" class="headerlink" title="（1）花括号式的初始化"></a>（1）花括号式的初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1 = &#123;<span class="number">18</span>, <span class="string">&quot;jiege&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种初始化的方式，就是将类当作结构体使用。编译器会生成缺省的构造函数<code>Person(void);</code></p><h4 id="（2）圆括号的初始化"><a href="#（2）圆括号的初始化" class="headerlink" title="（2）圆括号的初始化"></a>（2）圆括号的初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>();</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> _age, <span class="type">const</span> <span class="type">char</span>* _name);</span><br><span class="line">~<span class="built_in">Person</span>();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line">Person::<span class="built_in">Person</span>()</span><br><span class="line">:<span class="built_in">age</span>(<span class="number">0</span>), <span class="built_in">name</span>(<span class="keyword">new</span> <span class="type">char</span>[<span class="number">20</span>])</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Person::<span class="built_in">Person</span>(<span class="type">int</span> _age, <span class="type">const</span> <span class="type">char</span>* _name)</span><br><span class="line">: <span class="built_in">age</span>(<span class="number">0</span>), <span class="built_in">name</span>(<span class="keyword">new</span> <span class="type">char</span>[<span class="number">20</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(name, _name);</span><br><span class="line">age = _age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p;<span class="comment">//会调用无参构造/缺省构造函数</span></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>, <span class="string">&quot;jiege&quot;</span>)</span></span>;<span class="comment">//会调用有参构造</span></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">()</span></span>;<span class="comment">//编译：函数声明</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><blockquote><ul><li>初始化列表只能在构造函数上使用。</li><li><code>Person p2();</code> 被编译器编译成返回值为Person类型 函数名p2的函数声明；</li><li>构造函数不能手动调用</li></ul></blockquote><hr><h3 id="（四）析构函数"><a href="#（四）析构函数" class="headerlink" title="（四）析构函数"></a>（四）析构函数</h3><p>由于析构函数比较简单，这里就简单介绍下：<br><strong>用途：注销对象、系统自动回收对象占用的资源</strong></p><p><strong>基本语法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~类名()&#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>析构函数可手动调用</li><li>析构函数不能重载</li><li>析构函数没有参数</li></ul><hr><h3 id="（四）理解构造、析构思想"><a href="#（四）理解构造、析构思想" class="headerlink" title="（四）理解构造、析构思想"></a>（四）理解构造、析构思想</h3><p><strong>生可带来，死不带去。这句话很有深意，并且构造创建对象，对象的析构的过程 和 人的出生和死亡的过程是如此相似。</strong></p><p><strong>举个例子：</strong></p><ul><li>生可带来：有人生下来就是富二代（生可带来），就像有参构造（通过实参，给构造的对象的属性进行改造），普通人生下来（调用无参构造，不会对对象的属性进行额外的修改）；</li><li>死不带去：死亡的过程（对象的析构过程），不管是富人、穷人都会面临死亡（所有的对象最后都会使用同一个析构函数去析构自己）</li></ul><p><strong>注意：</strong></p><ul><li>构造函数不能手动调用（系统自动调用，就像人无法就决定自己的出生条件，not remake）</li><li>析构函数可以手动调用（就像人的死亡，可以主动选择死亡，对象的析构也是如此）</li><li>多个构造函数的意义：构造不同属性的对象（好比富人、穷人、普通人…）</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构造-析构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】常方法+常对象</title>
      <link href="/posts/a0ee5b24.html"/>
      <url>/posts/a0ee5b24.html</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><blockquote><p>前一节类的编译流程中简单介绍了this指针的类型，但没说为什么是这种定义方式。this指针的原型就是<code>类名* const this</code>，其实也就是为什么*的右边需要加个const，原因很简单：害怕程序员修改this指针的值，比如说：置空this = NULL; 这种操作对代码的后续执行是致命的。</p></blockquote><hr><h3 id="（一）this指针-const"><a href="#（一）this指针-const" class="headerlink" title="（一）this指针+const"></a>（一）this指针+const</h3><p>看了引言的小伙伴就很疑惑，明明都已经说过了this加const的情况，那为何还有const可加？？</p><p><strong>这是之前讲过的栗子：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> p = &amp;a;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> cp = &amp;a; </span><br></pre></td></tr></table></figure><p>可以看到上面的p就相当于对象中的那个this指针的类型（依赖于对象），而cp就是我所谓的this指针+const了。很明显，并不重复。</p><p><strong>C++中也为this指针提供了这种定义方式：<code>（常方法）</code></strong></p><p><code>返回值 方法名(形参列表)const;</code></p><p>()后面的const修饰的就是对应方法的第一个参数this指针，形式如下：<code>const 类名* const this</code>，这里的左const就是我们在()后面加的const，右const是编译器在编译时期加的。</p><hr><h3 id="（二）常对象"><a href="#（二）常对象" class="headerlink" title="（二）常对象"></a>（二）常对象</h3><p>有一句话叫做：<code>常对象只能调用常方法</code>。上面已经讲述了常方法，那么这句话的意思也大概能够参透了。</p><p><strong>这句话意味着：</strong></p><blockquote><ul><li>常对象只能调用常方法；</li><li>普通对象可以调用所有方法；</li></ul></blockquote><p>下面我举个栗子解释下为什么是这样：</p><p>你能看出这段代码有什么问题吗？？<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//设计个人类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>();<span class="comment">//无参构造</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetAge</span><span class="params">()</span><span class="type">const</span></span>;<span class="comment">//常方法</span></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">GetName</span><span class="params">()</span></span>;<span class="comment">//普通方法</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//普通对象</span></span><br><span class="line">Person p1;<span class="comment">//假设已经初始化</span></span><br><span class="line">p1.<span class="built_in">GetAge</span>();<span class="comment">//GetAge(&amp;p1) 正确</span></span><br><span class="line">p1.<span class="built_in">GetName</span>();<span class="comment">//GetName(&amp;p1) 正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常对象</span></span><br><span class="line"><span class="type">const</span> Person p2;<span class="comment">//假设已经初始化</span></span><br><span class="line">p2.<span class="built_in">GetAge</span>();<span class="comment">//GetAge(&amp;p2)正确</span></span><br><span class="line">p2.<span class="built_in">GetName</span>();<span class="comment">//GetName(&amp;p2) 错误</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>分析：</strong></p><ul><li>先对p1分析：p1是一个Person类型的<code>普通对象</code>，<code>调用常方法GetAge()</code>，编译器在编译阶段将该语句编译成<code>GetAge(&amp;p1);</code>，使用const Person<em> const 类型的this指针指向p1的地址（Person</em>类型），能力缩小，这是完全可行的。那么GetName()也自然可行，<code>编译成功</code>。</li><li>p2分析：p2的地址类型（const Person<em>）,在调用常方法<code>GetAge()</code>，编译期间被改写成<code>GetAge(&amp;p2)</code>，此时使用const Person</em> const this指针指向p2，未对p2的产生影响，可行，<code>编译成功</code>。但是在调用GetName()时，此时的this指针是<code>Person* const</code>类型，而p2的地址（const Person<em>）,this保存p2的地址扩大了p2的能力，<code>编译不通过</code>。<em>*所以常对象只能调用常方法</em></em></li></ul><hr><h3 id="（三）this指针的传递方式"><a href="#（三）this指针的传递方式" class="headerlink" title="（三）this指针的传递方式"></a>（三）this指针的传递方式</h3><p>this指针的调用跟调用约定相关。</p><h4 id="（1）thiscall调用约定"><a href="#（1）thiscall调用约定" class="headerlink" title="（1）thiscall调用约定"></a>（1）thiscall调用约定</h4><p>thiscall仅仅应用于C++成员方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lea ecx,[p1];将p1地址给ecx寄存器</span><br><span class="line">mov [<span class="keyword">this</span>], ecx  ;将ecx中的值给<span class="keyword">this</span>指针</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/107fc61fb7e542e592e990d501d0b00f.png" alt="在这里插入图片描述"></p><h4 id="（2）-cdecl调用约定"><a href="#（2）-cdecl调用约定" class="headerlink" title="（2）__cdecl调用约定"></a>（2）__cdecl调用约定</h4><p><img src="https://img-blog.csdnimg.cn/e35ca19a69fc44ea9fab3015156062c4.png" alt="在这里插入图片描述"></p><p><strong>结论：__cdecl 比 thiscall 多了一次push和pop</strong></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常方法、常对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】类的编译流程</title>
      <link href="/posts/eb57c55e.html"/>
      <url>/posts/eb57c55e.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="C-编译器对类的编译流程"><a href="#C-编译器对类的编译流程" class="headerlink" title="C++编译器对类的编译流程"></a>C++编译器对类的编译流程</h3><hr><p><strong>（1）找到成员属性（类型，成员名）</strong><br><strong>（2）识别方法声明（识别函数原型）</strong><br><strong>（3）改写方法：在每个方法的第一个形参前面添加个 该类的一个this指针<code>（类名* const this）</code></strong></p><p><strong>例如：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>();<span class="comment">//构造</span></span><br><span class="line">~<span class="built_in">Person</span>();<span class="comment">//析构</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">char</span>* _name, <span class="type">int</span> _age);<span class="comment">//有参构造</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line"><span class="type">char</span>* name;<span class="comment">//姓名</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><strong>改写前：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现</span></span><br><span class="line">Person::<span class="built_in">Person</span>()</span><br><span class="line">:<span class="built_in">age</span>(<span class="number">0</span>), <span class="built_in">name</span>(<span class="keyword">new</span> <span class="type">char</span>[<span class="number">20</span>])</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person::<span class="built_in">Person</span>(<span class="type">char</span>* _name, <span class="type">int</span> _age)</span><br><span class="line">:<span class="built_in">name</span>(<span class="keyword">new</span> <span class="type">char</span>[<span class="number">20</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(_name == <span class="literal">NULL</span> || age &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(name, _name);</span><br><span class="line">age = _age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] name;</span><br><span class="line">age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改写后：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现</span></span><br><span class="line">Person::<span class="built_in">Person</span>(Person* <span class="type">const</span> <span class="keyword">this</span>)</span><br><span class="line">:<span class="built_in">age</span>(<span class="number">0</span>), <span class="built_in">name</span>(<span class="keyword">new</span> <span class="type">char</span>[<span class="number">20</span>])</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person::<span class="built_in">Person</span>(Person* <span class="type">const</span> <span class="keyword">this</span>, <span class="type">const</span> <span class="type">char</span>* _name, <span class="type">int</span> _age)</span><br><span class="line">:<span class="built_in">name</span>(<span class="keyword">new</span> <span class="type">char</span>[<span class="number">20</span>]), <span class="built_in">age</span>(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(_name == <span class="literal">NULL</span> || age &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, _name);</span><br><span class="line"><span class="keyword">this</span>-&gt;age = _age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::~<span class="built_in">Person</span>(Person* <span class="type">const</span> <span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;name;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>（4）调用对象成员方法时：编译器改成面向过程的形式</strong></p><p><strong>编译器改前：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;jiege&quot;</span>, <span class="number">21</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;yueyue&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用对象的成员方法</span></span><br><span class="line">p1.~<span class="built_in">Person</span>();</span><br><span class="line">p2.~<span class="built_in">Person</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>编译器改后：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;jiege&quot;</span>, <span class="number">21</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;yueyue&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用对象的成员方法</span></span><br><span class="line">~<span class="built_in">Person</span>(&amp;p1);</span><br><span class="line">~<span class="built_in">Person</span>(&amp;p2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想必在看完上面的编译器编译流程后，你已经对this指针以及C++的对象模型有了一定的理解吧。后面再详细讲this指针相关内容。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类编译流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】const+指针+引用</title>
      <link href="/posts/3f619c8c.html"/>
      <url>/posts/3f619c8c.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="（一）指针和const"><a href="#（一）指针和const" class="headerlink" title="（一）指针和const"></a>（一）指针和const</h3><p><strong><code>const关键字加在定义变量之前。说明定义的变量是一个常变量</code></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p = &amp;a;</span><br><span class="line"><span class="comment">//p是一个int类型的指针变量，保存a的地址</span></span><br><span class="line">*p = <span class="number">20</span>;<span class="comment">//可以通过解引用的方式修改保存地址中的值</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p1 = &amp;a;</span><br><span class="line"><span class="type">int</span> <span class="type">const</span> *p2 = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> p3 = &amp;a;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> p4 = &amp;a;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><ul><li>（常指针）p1、p2 指向a的地址，const修饰的是<em>p1 和 </em>p2，所以p1和p2的值可以修改，<em>p1 和 </em>p2的值不可修改</li><li>p3 指向a的地址，const修饰的是p3，所以p3的值不可修改，*p3的值可以修改</li><li>p4指向a的地址，从右向左，第一个const修饰p4的值，第二个const修饰<em>p4的值，所以p4和</em>p4的值都不可修改</li></ul><p><strong>结论：</strong></p><blockquote><p><strong><code>看准 const 和 * 的位置：</code></strong></p><ul><li>const 在<em>左边，const修饰 </em>变量名；</li><li>const 在*右边，const修饰 变量名；</li></ul></blockquote><hr><h3 id="（二）能力缩小定律"><a href="#（二）能力缩小定律" class="headerlink" title="（二）能力缩小定律"></a>（二）能力缩小定律</h3><h4 id="（1）小试身手"><a href="#（1）小试身手" class="headerlink" title="（1）小试身手"></a>（1）小试身手</h4><p><strong>我们对（一）进行小小地修改，看下面那句代码编译错误？</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p1 = p;</span><br><span class="line"><span class="type">int</span> <span class="type">const</span> *p2 = p;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> p3 = p;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> p4 = p;</span><br></pre></td></tr></table></figure></p><p><strong>分析：</strong></p><blockquote><p>（1）从p指针的能力入手：p可改变，<em>p也可改变<br>（2）const修饰 \</em>p1 ，缩小p1的 *p1能力，可以编译通过；<br>（3）p2和p1一样，可以编译通过<br>（4）const 修饰p3的值，不影响p自身的能力，编译通过<br>（5）右const修饰p4，左const修饰*p4，p4 和 *p4都不可改变，可以编译通过</p></blockquote><p><strong>结论：编译通过</strong></p><hr><h4 id="（2）小试身手"><a href="#（2）小试身手" class="headerlink" title="（2）小试身手"></a>（2）小试身手</h4><p>这次我们在<em>p的前面加上const，那这次的编译结果呢？<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p0 = p;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p1 = p;</span><br><span class="line"><span class="type">int</span> <span class="type">const</span> *p2 = p;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> p3 = p;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> p4 = p;</span><br></pre></td></tr></table></figure><br><em>*分析：</em></em></p><blockquote><ul><li>同样从p的能力入手，const修饰<em>p，所以后面的语句有修改</em>p的嫌疑都编译不通过</li><li>p0拥有*p0能力，具有修改*p的嫌疑，编译不通过</li><li>const修饰*p1和*p2，符合p的能力，可以编译通过</li><li>const修饰p3的指向，没有限制*p3的能力，有修改*p的嫌疑，编译不通过</li><li>左const修饰*p4，右const修饰p4，限制了*p4能力，可以编译通过</li></ul></blockquote><p><strong>结论：p0 p3编译不通过，其余可以编译通过</strong></p><hr><h4 id="（3）小试身手"><a href="#（3）小试身手" class="headerlink" title="（3）小试身手"></a>（3）小试身手</h4><p>再次修改，那麽这次的编译结果呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p0 = p;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p1 = p;</span><br><span class="line"><span class="type">int</span> <span class="type">const</span> *p2 = p;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> p3 = p;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> p4 = p;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><blockquote><ul><li>从p的能力入手，const修饰的是p的值，所有具有*p的能力</li><li>由于后面都是一级指针，无法通过同级指针来修改p的指向（p的值），所以全部都可以编译通过</li></ul></blockquote><p><strong>结论：都可以编译通过</strong></p><hr><h3 id="（三）指针-引用"><a href="#（三）指针-引用" class="headerlink" title="（三）指针+引用"></a>（三）指针+引用</h3><p>也可以看看这种形式的使用，下面的编译情况呢？？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p0 = p;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *&amp;s = p;<span class="comment">//true</span></span><br><span class="line"><span class="type">int</span> &amp;*q = p;<span class="comment">//error</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析：主要难度就在后两句上，符号从右向左解释<br><code>int *&amp;s = p;</code>这句意思就是s是指针p的引用，所以可以编译通过<br><img src="https://img-blog.csdnimg.cn/85af6944872b4a78878c66a0fc19fd14.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><code>int&amp;* q = p;</code>这句话没有任何意思，编译错误<br><img src="https://img-blog.csdnimg.cn/6cfc05c9996d41bf80dd9d238493aa22.png" alt="在这里插入图片描述"></p><hr><h3 id="（四）指针-引用-const"><a href="#（四）指针-引用-const" class="headerlink" title="（四）指针+引用+const"></a>（四）指针+引用+const</h3><p>在看懂上面的所有情况之后，再来看这种形式的使用，想必一定是手到擒来了吧，吧。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span>* p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>*&amp; s = p;<span class="comment">//s是p指针的别名，可以通过修改s和*s，修改p的值和*p的值</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>*&amp; s1 = p; <span class="comment">//s1是p指针的别名，可以通过修改s1修改p的值； （vs2019不支持，vc6.0支持）</span></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> &amp;s2 = p;<span class="comment">//s2是p指针的别名，可以通过*s2修改*p的值；</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span>&amp; s3 = p;<span class="comment">//无法通过修改s3和*s3的值，修改p和*p的值</span></span><br></pre></td></tr></table></figure></p><h4 id="（1）const修饰p"><a href="#（1）const修饰p" class="headerlink" title="（1）const修饰p"></a>（1）const修饰p</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> p = &amp;a;<span class="comment">//凡是后面增加了修改p的值的能力的语句都无法编译通过</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>*&amp; s = p;<span class="comment">//可通过s改变p的值，编译错误</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>*&amp; s1 = p; <span class="comment">//可通过s1改变p的值，编译错误 （vs2019不支持，vc6.0支持）</span></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> &amp;s2 = p;<span class="comment">// 类型匹配，编译通过</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span>&amp; s3 = p;<span class="comment">//缩小能力，编译通过</span></span><br></pre></td></tr></table></figure><h4 id="（2）const修饰-p"><a href="#（2）const修饰-p" class="headerlink" title="（2）const修饰*p"></a>（2）const修饰*p</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> p = &amp;a;<span class="comment">//凡是后面增加了修改*p的值的能力的语句都无法编译通过</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>*&amp; s = p;<span class="comment">//可通过*s改变*p的值，编译错误</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>*&amp; s1 = p; <span class="comment">//类型匹配，编译通过 （vs2019不支持，vc6.0支持）</span></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> &amp;s2 = p;<span class="comment">// 可通过*s2改变*p的值，编译错误</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span>&amp; s3 = p;<span class="comment">//缩小能力，编译通过</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> const+指针+引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】面向对象的思想和类的认识</title>
      <link href="/posts/935b81e2.html"/>
      <url>/posts/935b81e2.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="（一）面向对象的思想"><a href="#（一）面向对象的思想" class="headerlink" title="（一）面向对象的思想"></a>（一）面向对象的思想</h3><p><img src="https://img-blog.csdnimg.cn/02a86011d86c4e5ea73c819bca0307d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="（二）类的认识"><a href="#（二）类的认识" class="headerlink" title="（二）类的认识"></a>（二）类的认识</h3><ul><li>类是一组相关的属性（变量）和行为（方法）的集合。是一个抽象概念设计的产物；</li><li>对象是该类事物的具体表现形式。现实世界存在对应的实体；</li><li>成员变量是对象的属性（变量、指针、数组等），属性的值确定对象的状态；</li><li>成员函数是对象的方法，确定对象的行为；</li><li>变量的值确定了对象的状态；</li><li>通过对象的方法可以改变对象的状态；</li></ul><hr><h3 id="（三）类的设计"><a href="#（三）类的设计" class="headerlink" title="（三）类的设计"></a>（三）类的设计</h3><p><strong><code>在C++中类是一种数据类型；</code></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名<span class="comment">//类 头</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//公有</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:<span class="comment">//私有</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:<span class="comment">//保护</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>类是一种数据类型，在设计时，不分配存储空间，所以不能对数据成员初始化。类中的属性也不能使用关键字extern、auto、register等限定其存储类型；</li><li>类中默认权限private(私有)，其中类的权限体现封装性；</li></ul><hr><h3 id="（四）C-对象模型"><a href="#（四）C-对象模型" class="headerlink" title="（四）C++对象模型"></a>（四）C++对象模型</h3><p>通过同一个类实例化的对象，这些对象只有属性的值不同，每个对象的成员方法都是相同的。所以同一类的对象，每个对象分配单独的数据区，成员方法存放在代码区为每个对象共用。</p><p>下面我们设计人类进行举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>();</span><br><span class="line">~<span class="built_in">person</span>();</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetAge</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">GetName</span><span class="params">()</span></span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person s1,s2,s3;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对象模型如下：</strong><br><img src="https://img-blog.csdnimg.cn/5d6f2d2b39a44d03bcc7875858b465d7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="（五）总结"><a href="#（五）总结" class="headerlink" title="（五）总结"></a>（五）总结</h3><ul><li>有空间，不一定有对象</li><li>有对象，一定有空间（空类型的对象占用1字节的大小）</li><li>类也遵守结构体内存对齐的规则</li></ul><hr><p>下节：讲解C++对象模型的实现方式（this指针实现）</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】命名空间</title>
      <link href="/posts/d69f9fb.html"/>
      <url>/posts/d69f9fb.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="（一）引入命名空间"><a href="#（一）引入命名空间" class="headerlink" title="（一）引入命名空间"></a>（一）引入命名空间</h3><p>我们经常会看到如下的用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hello, world&quot;</span>&lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中使用了<code>using namespace std;</code>    若不加这句话，主函数中的cout就无法使用，原因在于cout类的实现在std中（标准输入输出 命名空间）</p><p>若删去<code>using namespace std;</code>，那就需要在<code>cout 和 endl</code>前加上<code>std::</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hello, world&quot;</span>&lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><code>为了解决命名冲突的问题，C++提供了命名空间的作用域的机制；</code></strong></p><hr><h3 id="（二）命名空间的使用"><a href="#（二）命名空间的使用" class="headerlink" title="（二）命名空间的使用"></a>（二）命名空间的使用</h3><h4 id="（1）定义基本语法"><a href="#（1）定义基本语法" class="headerlink" title="（1）定义基本语法"></a>（1）定义基本语法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> 命名空间名</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（2）使用"><a href="#（2）使用" class="headerlink" title="（2）使用"></a>（2）使用</h4><p><strong>错误写法：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> jiege;</span><br><span class="line"><span class="keyword">namespace</span> jiege</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;jiege&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><strong>正确写法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> jiege</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;jiege&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> jiege;</span><br></pre></td></tr></table></figure><h4 id="（3）栗子"><a href="#（3）栗子" class="headerlink" title="（3）栗子"></a>（3）栗子</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> jiege</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;jiege&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> awei</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;awei&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">jiege::<span class="built_in">Print</span>();</span><br><span class="line">awei::<span class="built_in">Print</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结果：</strong><br><img src="https://img-blog.csdnimg.cn/b8e62c629bb9429d9140692809ad9166.png" alt="在这里插入图片描述"></p><hr>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命名空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】new/delete用法</title>
      <link href="/posts/e95356b4.html"/>
      <url>/posts/e95356b4.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="（一）new-delete用法"><a href="#（一）new-delete用法" class="headerlink" title="（一）new/delete用法"></a>（一）new/delete用法</h3><p><strong>基础语法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开辟空间</span></span><br><span class="line"><span class="comment">//单独堆区空间</span></span><br><span class="line">类型* 指针变量名 = <span class="keyword">new</span> 类型(初始值);</span><br><span class="line"><span class="comment">//连续堆区空间</span></span><br><span class="line">类型* 指针变量名 = <span class="keyword">new</span> 类型[个数];</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放空间</span></span><br><span class="line"><span class="comment">//单独堆区空间</span></span><br><span class="line"><span class="keyword">delete</span> 指针变量名;</span><br><span class="line"><span class="comment">//连续堆区空间</span></span><br><span class="line"><span class="keyword">delete</span>[] 指针变量名;</span><br></pre></td></tr></table></figure><h4 id="（1）申请-释放-单独-堆区空间"><a href="#（1）申请-释放-单独-堆区空间" class="headerlink" title="（1）申请/释放 单独 堆区空间"></a>（1）申请/释放 单独 堆区空间</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>;<span class="comment">//只进行申请堆区空间sizeof(int)大小</span></span><br><span class="line">*p = <span class="number">20</span>;<span class="comment">//对申请的空间赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;<span class="comment">//将p指向的空间还给系统</span></span><br><span class="line">p = <span class="literal">NULL</span>;<span class="comment">//将p变量的内容置空</span></span><br></pre></td></tr></table></figure><h4 id="（2）申请-释放-连续-堆区空间"><a href="#（2）申请-释放-连续-堆区空间" class="headerlink" title="（2）申请/释放 连续 堆区空间"></a>（2）申请/释放 连续 堆区空间</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];<span class="comment">//申请10个int类型的堆区空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] p;<span class="comment">//将p指向的连续空间还给系统</span></span><br><span class="line">p = <span class="literal">NULL</span>;<span class="comment">//将p 的值置空</span></span><br></pre></td></tr></table></figure><h4 id="（3）单独空间-申请并初始化"><a href="#（3）单独空间-申请并初始化" class="headerlink" title="（3）单独空间 申请并初始化"></a>（3）单独空间 申请并初始化</h4><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);<span class="comment">//将申请的int类型的堆区空间，初始化为10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;<span class="comment">//将p指向的空间还给系统</span></span><br><span class="line">p = <span class="literal">NULL</span>;<span class="comment">//将p变量的内容置空</span></span><br></pre></td></tr></table></figure></h2><h3 id="（二）堆区二维数组的开辟"><a href="#（二）堆区二维数组的开辟" class="headerlink" title="（二）堆区二维数组的开辟"></a>（二）堆区二维数组的开辟</h3><h4 id="（1）数组指针方式"><a href="#（1）数组指针方式" class="headerlink" title="（1）数组指针方式"></a>（1）数组指针方式</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p是数组指针，指向的堆区数组有两个子元素p[0][10]和p[1][10];</span></span><br><span class="line"><span class="comment">//p[0][10]和p[1][10]又各自有十个int类型的子元素</span></span><br><span class="line"><span class="built_in">int</span> (*p)[<span class="number">10</span>] = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">2</span>][<span class="number">10</span>];</span><br><span class="line"><span class="comment">//new了一个二维数组, 去掉最左边那一维[2], 剩下int[10], 所以返回的是一个指向int[10]这种一维数组的指针int (*)[10].  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br></pre></td></tr></table></figure><p><strong>使用测试：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">int</span>(*p)[<span class="number">10</span>] = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">2</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span>(*s)[<span class="number">10</span>] = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* q = (<span class="type">int</span>*)s;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">q[j] = j;</span><br><span class="line">cout &lt;&lt; q[j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">s++;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放空间</span></span><br><span class="line"><span class="keyword">delete</span>[<span class="number">10</span>] p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果:</strong><br><img src="https://img-blog.csdnimg.cn/03afcf9001384c529ffe1b506df45bbc.png" alt="在这里插入图片描述"></p><h4 id="（2）指针数组方式"><a href="#（2）指针数组方式" class="headerlink" title="（2）指针数组方式"></a>（2）指针数组方式</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让指针数组中的每个指针都指向一个连续的堆区空间</span></span><br><span class="line"><span class="comment">//int** p = (int**)malloc(sizeof(int*) * 10);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开辟</span></span><br><span class="line"><span class="type">int</span>** p = <span class="keyword">new</span> <span class="type">int</span>*[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//p[i]指向的空间是连续的空间，所以使用delete[]</span></span><br><span class="line"><span class="keyword">delete</span>[] p[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//p有两个子元素都是int*类型</span></span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br></pre></td></tr></table></figure><hr><h3 id="（三）new和malloc区别"><a href="#（三）new和malloc区别" class="headerlink" title="（三）new和malloc区别"></a>（三）new和malloc区别</h3><ul><li>C语言malloc申请失败返回NULL。可由程序员手动处理。C++new失败，直接抛出异常。</li></ul><p><strong>不抛出异常的处理：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//申请失败，返回NULL给p，不抛出异常</span></span><br><span class="line"><span class="type">int</span>* p = <span class="built_in">new</span>(nothrow) <span class="type">int</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="（四）new创建对象特点"><a href="#（四）new创建对象特点" class="headerlink" title="（四）new创建对象特点"></a>（四）new创建对象特点</h3><ul><li>new创建对象需要指针接收，一处初始化，多处使用</li><li>new创建对象使用完需delete销毁</li><li>new创建对象直接使用堆空间，而局部不用new定义对象则使用栈空间</li><li>new对象指针用途广泛，比如作为函数返回值、函数参数等</li></ul><hr><h3 id="（五）总结"><a href="#（五）总结" class="headerlink" title="（五）总结"></a>（五）总结</h3><ul><li><code>new 类型()</code> 在堆区申请 <strong>类型</strong>的大小空间，使用圆括号中的值，对该空间进行初始化；</li><li><code>new 类型[]</code> 在堆区申请 连续 类型的空间，空间大小sizeof(类型) * []中的个数， 并使用默认的构造函数进行初始化。</li></ul><hr><p>这里主要说明new/delete的基本用法，至于malloc和new的具体区别，请关注后续文章。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> new/delete </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】函数模板</title>
      <link href="/posts/e4b65df4.html"/>
      <url>/posts/e4b65df4.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="（一）函数模板"><a href="#（一）函数模板" class="headerlink" title="（一）函数模板"></a>（一）函数模板</h3><ul><li><p>作用：提高复用性。</p></li><li><p>实质：函数模板就是将函数的类型推演交给了编译器。在编译阶段，编译器将根据调用函数的实参的类型，进行推演出对应的类型。（增加了编译器的工作量）</p></li></ul><p><strong>案例：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//满足内置类型的交换函数</span></span><br><span class="line"><span class="comment">//template&lt;class T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T tmp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="type">double</span> c = <span class="number">12.33</span>, d = <span class="number">22.33</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Swap</span>&lt;<span class="type">int</span>&gt;(a, b); </span><br><span class="line"><span class="built_in">Swap</span>&lt;<span class="type">double</span>&gt;(c, d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>模板实参推演：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typedef int T;</span></span><br><span class="line"><span class="built_in">Swap</span>&lt;<span class="type">int</span>&gt;(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef double T;</span></span><br><span class="line"><span class="built_in">Swap</span>&lt;<span class="type">double</span>&gt;(c, d);</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="（二）注意区分define宏定义"><a href="#（二）注意区分define宏定义" class="headerlink" title="（二）注意区分define宏定义"></a>（二）注意区分define宏定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">(T p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T a, b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p =&amp;a;</span><br><span class="line"><span class="built_in">fun</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p><code>fun(p);</code>就是<code>fun&lt;int*&gt;(p);</code> 其中 <code>typedef int* T;</code>所以fun函数中的a和b都是int*类型。</p><hr><h3 id="（三）总结"><a href="#（三）总结" class="headerlink" title="（三）总结"></a>（三）总结</h3><p>模板就是在编译期间，使用代码产生代码：使用模板代码生成对应类型的函数代码，再使用名字粉碎技术，将生成重载的函数进行编译。最终再程序运行时，调用对应类型的函数。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】extern关键字</title>
      <link href="/posts/b6ded5d9.html"/>
      <url>/posts/b6ded5d9.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）C语言中的extern"><a href="#（一）C语言中的extern" class="headerlink" title="（一）C语言中的extern"></a>（一）C语言中的extern</h3><p><strong>利用关键字extern，可以在同一项目下，在一个文件中引用另一个文件中定义的变量或者函数</strong></p><h4 id="（1）a-c文件"><a href="#（1）a-c文件" class="headerlink" title="（1）a.c文件"></a>（1）a.c文件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）b-c文件"><a href="#（2）b-c文件" class="headerlink" title="（2）b.c文件"></a>（2）b.c文件</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a;<span class="comment">//外部变量</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span>;<span class="comment">//外部函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);<span class="comment">//使用</span></span><br><span class="line"><span class="built_in">fun</span>();<span class="comment">//调用</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong><br><img src="https://img-blog.csdnimg.cn/1bef5353618e435e9a9c3499b5079dbb.png" alt="在这里插入图片描述"></p><hr><h3 id="（二）C-中的extern"><a href="#（二）C-中的extern" class="headerlink" title="（二）C++中的extern"></a>（二）C++中的extern</h3><p><strong>作用：干预代码的编译方式</strong></p><p><strong>语法：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对这段代码使用C编译器编译</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world c\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对这段代码使用C++编译器编译</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C++&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">funcpp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hello world cpp&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line"><span class="built_in">funcpp</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>结果：</strong><br><img src="https://img-blog.csdnimg.cn/7b05c5c36e224f8fbdd5db8563778921.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> extern关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】函数默认参数</title>
      <link href="/posts/46d8f99e.html"/>
      <url>/posts/46d8f99e.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）函数默认参数"><a href="#（一）函数默认参数" class="headerlink" title="（一）函数默认参数"></a>（一）函数默认参数</h3><p><strong>函数参数列表从右到左，依次可以赋予默认值，不能间断赋值</strong></p><h4 id="（1）正确用法"><a href="#（1）正确用法" class="headerlink" title="（1）正确用法"></a>（1）正确用法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Fun</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">3</span>, <span class="type">int</span> c = <span class="number">2</span>, <span class="type">int</span> d = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Fun</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）错误用法"><a href="#（2）错误用法" class="headerlink" title="（2）错误用法"></a>（2）错误用法</h4><p>间断赋值<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Fun</span><span class="params">(<span class="type">int</span> a = <span class="number">3</span>, <span class="type">int</span> b, <span class="type">int</span> c = <span class="number">2</span>, <span class="type">int</span> d = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Fun</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/45a42a2757e24043999eb2f05acdd5f5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="（二）函数重载和函数默认参数的问题"><a href="#（二）函数重载和函数默认参数的问题" class="headerlink" title="（二）函数重载和函数默认参数的问题"></a>（二）函数重载和函数默认参数的问题</h3><p><strong>举个栗子：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Fun</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Fun</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Fun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/65890c072b0d4c1dbf7c1ea11c54c370.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9f76a33ce58d45c194da9aa4ec85eec1.png" alt="在这里插入图片描述"></p><hr><h3 id="（三）拓展：函数名相同、参数类型相同、参数个数不同能否确定重载？"><a href="#（三）拓展：函数名相同、参数类型相同、参数个数不同能否确定重载？" class="headerlink" title="（三）拓展：函数名相同、参数类型相同、参数个数不同能否确定重载？"></a>（三）拓展：函数名相同、参数类型相同、参数个数不同能否确定重载？</h3><p><strong>答：这个得看情况。</strong></p><ul><li>当函数中存在默认参数时，是否能重载就要看在调用时是否产生二义性，产生二义性就不能重载</li><li>函数中不存在默认参数，就可以发生重载。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】函数重载</title>
      <link href="/posts/cd812ff6.html"/>
      <url>/posts/cd812ff6.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）函数重载"><a href="#（一）函数重载" class="headerlink" title="（一）函数重载"></a>（一）函数重载</h3><h4 id="（1）函数的原型"><a href="#（1）函数的原型" class="headerlink" title="（1）函数的原型"></a>（1）函数的原型</h4><p>函数返回值 函数名 形参列表（参数的类型 和个数 形参名可省略），且不需要函数体。</p><h4 id="（2）函数重载条件"><a href="#（2）函数重载条件" class="headerlink" title="（2）函数重载条件"></a>（2）函数重载条件</h4><ul><li>同一作用域下；</li><li>函数名相同；</li><li>函数的参数个数不同、参数的类型不同，或者顺序不同；</li></ul><p><strong>注意</strong>：函数的返回值不能作为函数重载的条件；</p><hr><h3 id="（二）C为什么不能函数重载，C-却可以？"><a href="#（二）C为什么不能函数重载，C-却可以？" class="headerlink" title="（二）C为什么不能函数重载，C++却可以？"></a>（二）C为什么不能函数重载，C++却可以？</h3><ul><li><p>C语言区分函数是以函数名来区分（C编译器会在编译阶段将函数命名为<code>_函数名</code>），若是使用同名函数，就会发生重定义。</p></li><li><p>C++区分函数是以函数的原型来区分（<code>C++编译器使用了名字粉碎技术</code>）</p></li></ul><h4 id="（1）vs2019-C编译器编译"><a href="#（1）vs2019-C编译器编译" class="headerlink" title="（1）vs2019 C编译器编译"></a>（1）vs2019 C编译器编译</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用C编译器</span></span><br><span class="line"><span class="comment">//编译成_fun</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Max</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>从汇编角度看：C编译器将Max函数编译成_Max</strong><br><img src="https://img-blog.csdnimg.cn/3283ee4d3521446e8b8b05113522647e.png" alt="在这里插入图片描述"></p><h4 id="（2）vs2019-C-编译器编译"><a href="#（2）vs2019-C-编译器编译" class="headerlink" title="（2）vs2019 C++编译器编译"></a>（2）vs2019 C++编译器编译</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用C++编译器</span></span><br><span class="line"><span class="comment">//编译成_fun</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C++&quot;</span> <span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Max</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>从汇编角度来看：vs2019未给出真实的函数名字粉碎的结果</strong><br><img src="https://img-blog.csdnimg.cn/49f954dcee8b41dea144d2a7907cf591.png" alt="在这里插入图片描述"></p><h4 id="（3）vc6-0编译结果"><a href="#（3）vc6-0编译结果" class="headerlink" title="（3）vc6.0编译结果"></a>（3）vc6.0编译结果</h4><p><img src="https://img-blog.csdnimg.cn/442e029100d448e992e7e852a668b957.png" alt="在这里插入图片描述"></p><hr><h3 id="（三）C-名字粉碎技术"><a href="#（三）C-名字粉碎技术" class="headerlink" title="（三）C++名字粉碎技术"></a>（三）C++名字粉碎技术</h3><p><strong>重新生成函数名</strong>：<code>?函数名@@YG参数代号@Z</code> （详细解释如下）</p><p><strong>标准调用约定：__stdcall</strong></p><blockquote><ul><li>1、以“?”标识函数名的开始，后跟函数名</li><li>2、函数名后面以“@@YG”标识参数表的开始，后跟参数表</li><li>3、参数表以代号表示</li></ul></blockquote><div class="table-container"><table><thead><tr><th>代号</th><th>参数类型</th></tr></thead><tbody><tr><td>X</td><td>void</td></tr><tr><td>D</td><td>char</td></tr><tr><td>E</td><td>unsigned char</td></tr><tr><td>F</td><td>short</td></tr><tr><td>H</td><td>int</td></tr><tr><td>I</td><td>unsigned int</td></tr><tr><td>J</td><td>long</td></tr><tr><td>K</td><td>unsigned long</td></tr><tr><td>M</td><td>float</td></tr><tr><td>N</td><td>double</td></tr><tr><td>N</td><td>bool</td></tr></tbody></table></div><p><strong>所以对（二）中的Max函数使用__stdcall调用约定，在编译时将Max函数使用名字粉碎技术得到的结果就是：<code>?Max@@YGHHH@Z</code>，所以在调用该函数Max(10, 20)时，通过形参类型（int, int）得到应该使用哪个函数。</strong></p><hr><h3 id="（四）返回类型不同的函数是否可以重载"><a href="#（四）返回类型不同的函数是否可以重载" class="headerlink" title="（四）返回类型不同的函数是否可以重载"></a>（四）返回类型不同的函数是否可以重载</h3><p><strong><code>不能通过函数的返回值类型来区分函数重载</code></strong></p><p>举个栗子：使用__stdcall调用约定</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//名字粉碎：?Sum@@HHH@Z</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//名字粉碎：?Sum@@NHH@Z</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">double</span>)(a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Sum</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用Sum函数时，系统根据参数类型int,int（HH）来调用Sum函数，两个函数的参数类型都是<strong>HH</strong>，并且在调用时发生了二义性。所以不能使用返回值作为函数重载的条件。</p><hr><p>后期讲解函数调用约定，敬请期待！！</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数重载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】浅谈引用</title>
      <link href="/posts/45bc9b23.html"/>
      <url>/posts/45bc9b23.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）引用的定义"><a href="#（一）引用的定义" class="headerlink" title="（一）引用的定义"></a>（一）引用的定义</h3><p>引用：类型&amp;称为引用符号，代表别名的意思。<br>语法：<code>类型&amp; 引用变量名称 = 变量名称;</code></p><h3 id="（二）区别其他-amp-符号"><a href="#（二）区别其他-amp-符号" class="headerlink" title="（二）区别其他&amp;符号"></a>（二）区别其他&amp;符号</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line">c = a &amp;&amp; b;<span class="comment">//截断与</span></span><br><span class="line">c = a &amp; b;<span class="comment">//按位与</span></span><br><span class="line"><span class="type">int</span>* p = &amp;a;<span class="comment">//取地址</span></span><br><span class="line"><span class="type">int</span>&amp; x = a;<span class="comment">//引用</span></span><br></pre></td></tr></table></figure><h3 id="（三）引用注意事项"><a href="#（三）引用注意事项" class="headerlink" title="（三）引用注意事项"></a>（三）引用注意事项</h3><ul><li>引用即别名：只是给已存在的对象起别名。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>&amp; b = a;<span class="comment">//b是a的别名</span></span><br></pre></td></tr></table></figure><ul><li>引用必须初始化，不能定义空引用；</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>&amp; a;<span class="comment">//错误用法</span></span><br></pre></td></tr></table></figure><ul><li>引用的类型必须与被引用的对象类型相同。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>&amp; b = a;<span class="comment">//正确类型。类型相同</span></span><br><span class="line"><span class="type">char</span>&amp; c = a;<span class="comment">//错误类型的引用</span></span><br></pre></td></tr></table></figure><ul><li>引用本身不是一个对象，不能作为被引用的对象（没有引用的引用）。</li><li>引用变量和被引用对象的空间是同一块空间。</li></ul><h3 id="（四）引用的使用情况"><a href="#（四）引用的使用情况" class="headerlink" title="（四）引用的使用情况"></a>（四）引用的使用情况</h3><h4 id="（1）常规使用"><a href="#（1）常规使用" class="headerlink" title="（1）常规使用"></a>（1）常规使用</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>&amp; b = a;</span><br></pre></td></tr></table></figure><h4 id="（2）函数形参"><a href="#（2）函数形参" class="headerlink" title="（2）函数形参"></a>（2）函数形参</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> tmp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">Swap</span>(a, b);<span class="comment">//java中不存在形参改变导致实参改变</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：在调用Swap函数时，实参列表会对Swap函数的形参引用进行初始化。</p><h4 id="（3）函数返回值"><a href="#（3）函数返回值" class="headerlink" title="（3）函数返回值"></a>（3）函数返回值</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">Add</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>返回值是int类型的引用。</p><h3 id="（五）const与引用"><a href="#（五）const与引用" class="headerlink" title="（五）const与引用"></a>（五）const与引用</h3><p><code>常引用：const + 引用</code></p><p><strong>（1）错误用法1：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; b = a;</span><br><span class="line">b = <span class="number">20</span>;<span class="comment">//错误，只能读，不能修改，扩大了b的权限</span></span><br></pre></td></tr></table></figure></p><p><strong>（2）错误用法2：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>&amp; b = a;<span class="comment">//错误,扩大a的权限</span></span><br></pre></td></tr></table></figure><p>随着后期深入学习，会继续完善本篇文章。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机系统】存储器层次结构</title>
      <link href="/posts/4682e482.html"/>
      <url>/posts/4682e482.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）存储器层次结构"><a href="#（一）存储器层次结构" class="headerlink" title="（一）存储器层次结构"></a>（一）存储器层次结构</h3><p><img src="https://img-blog.csdnimg.cn/26171b151e234d1c9d8557a29b6ea01c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>存储器的中心思想：K层的更快、更小的存储设备是K+1层更慢、更大的存储设备的高速缓存。<br><img src="https://img-blog.csdnimg.cn/99a294334a004a36b00b2b6c3e66fa92.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="（二）缓存"><a href="#（二）缓存" class="headerlink" title="（二）缓存"></a>（二）缓存</h3><h4 id="（1）两个概念"><a href="#（1）两个概念" class="headerlink" title="（1）两个概念"></a>（1）两个概念</h4><ul><li>高速缓存：第k层是k+1层的高速缓存</li><li>缓存：是一个过程，使用高速缓存的过程。</li></ul><h4 id="（2）缓存原理"><a href="#（2）缓存原理" class="headerlink" title="（2）缓存原理"></a>（2）缓存原理</h4><p><img src="https://img-blog.csdnimg.cn/17a2f33b73f64555a90215c5076277b8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="（三）缓存命中"><a href="#（三）缓存命中" class="headerlink" title="（三）缓存命中"></a>（三）缓存命中</h3><p>当程序需要某个数据块data时，先在本层K层进行查找，若在K层找到data数据块，就说明缓存命中。</p><h3 id="（四）缓存不命中"><a href="#（四）缓存不命中" class="headerlink" title="（四）缓存不命中"></a>（四）缓存不命中</h3><p>当程序需要的数据块data在k层未找到，即缓存不命中。当发生缓存不命中时，第K层的缓存从K+1层取出包含data的数据块，若K层缓存已满，则将会覆盖一个现存的块（缓存策略：决定覆盖哪个块）。</p><h3 id="（五）缓存策略"><a href="#（五）缓存策略" class="headerlink" title="（五）缓存策略"></a>（五）缓存策略</h3><p>缓存策略：决定覆盖哪个块。</p><h4 id="（1）调用缓存策略条件"><a href="#（1）调用缓存策略条件" class="headerlink" title="（1）调用缓存策略条件"></a>（1）调用缓存策略条件</h4><blockquote><ul><li>（1）发生缓存不命中</li><li>（2）该层缓存已满</li></ul></blockquote><p>覆盖一个现存块的过程叫做替换或者驱逐这个块（牺牲块）。</p><h4 id="（2）缓存策略"><a href="#（2）缓存策略" class="headerlink" title="（2）缓存策略"></a>（2）缓存策略</h4><blockquote><ul><li>随机替换策略：随机选择一个块进行替换</li><li>LRU：一个具有最近最少使用的块进行替换<h3 id="（六）缓存不命中的类型"><a href="#（六）缓存不命中的类型" class="headerlink" title="（六）缓存不命中的类型"></a>（六）缓存不命中的类型</h3><h4 id="（1）冷缓存"><a href="#（1）冷缓存" class="headerlink" title="（1）冷缓存"></a>（1）冷缓存</h4>该层存储设备上的数据块为空<br><img src="https://img-blog.csdnimg.cn/9352a23fd04d4d979603093246bae797.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ul></blockquote><h4 id="（2）冲突不命中"><a href="#（2）冲突不命中" class="headerlink" title="（2）冲突不命中"></a>（2）冲突不命中</h4><p>这种缓存不命中的结果是使用了取模的放置策略导致的。</p><p>取模的放置策略：<br><img src="https://img-blog.csdnimg.cn/7605f905c3864c2c8d3190e5960717b2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>解释：当K层要使用0时，K层的发生缓存不命中，此时要去k+1层取0数据块，根据取模放置策略，将0数据块覆盖在8数据块上。若是在K层访问8号数据块，此时发生缓存不命中，此时去k+1层上去取8数据块，根据取模放置策略，将8数据块覆盖0数据块。如此的反复下去，每次缓存都会发生不命中。这就是冲突不命中类型。</p><h4 id="（3）容量不命中"><a href="#（3）容量不命中" class="headerlink" title="（3）容量不命中"></a>（3）容量不命中</h4><p>例如：一个循环来访问同一个数组中的所有元素。这个块的集合称为工作集。当工作集超过缓存大小时，缓存会发生容量不命中。</p><h3 id="（七）缓存管理"><a href="#（七）缓存管理" class="headerlink" title="（七）缓存管理"></a>（七）缓存管理</h3><p>（软件和硬件）将各个缓存设备划分成块、在不同层次间传送块、判断是否缓存命中并处理他们。</p><p><img src="https://img-blog.csdnimg.cn/9e24dc29633341b4a3f9d0fd43c4da5c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 存储器层次结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机系统】局部性</title>
      <link href="/posts/5aecbf1e.html"/>
      <url>/posts/5aecbf1e.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）理解局部性："><a href="#（一）理解局部性：" class="headerlink" title="（一）理解局部性："></a>（一）理解局部性：</h3><ul><li><p>时间局部性：被引用过一次的内存位置，很有可能在不远的将来再次被引用。（引用可以理解为访问）</p></li><li><p>空间局部性：<code>步长</code>决定空间局部性的好坏，一般而言：步长越大，空间局部性越差。</p></li><li><p>顺序引用模式：步长为1的引用模式，例如一维数组（具有连续内存空间的数据结构）、二维数组（行优先）</p></li></ul><hr><h3 id="（二）为什么要引入局部性？"><a href="#（二）为什么要引入局部性？" class="headerlink" title="（二）为什么要引入局部性？"></a>（二）为什么要引入局部性？</h3><p>局部性好的程序比局部性差的程序运行的更快。（原因后期补充：先挖个坑）</p><p>举个例子：对一维数组的所有元素进行求和</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">SumArr</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == arr || len &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><blockquote><ul><li>对于sum来说，具有较好的时间局部性（访问频率高），不具备空间局部性（sum是标量）</li><li>对于arr来说，具有很好的空间局部性（地址连续，访问速度快），时间局部性差（arr每个元素只使用一次）</li></ul></blockquote><div class="table-container"><table><thead><tr><th>关键的变量</th><th>时间局部性</th><th>空间局部性</th></tr></thead><tbody><tr><td>sum</td><td>好</td><td>无</td></tr><tr><td>arr</td><td>差</td><td>好</td></tr></tbody></table></div><p><code>结论：对于一个程序来说，要么具有好的时间局部性，要么具有好的空间局部性，该程序具有较好的局部性</code></p><hr><h4 id="1-小试身手"><a href="#1-小试身手" class="headerlink" title="1. 小试身手"></a>1. 小试身手</h4><p>（1）行优先：对一个二维数组所有元素求和</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int Sum2DArr(int (*parr)[col], int row, int col)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Sum2DArr</span><span class="params">(<span class="type">int</span> parr[row][col], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注意：形参parr会退化成数组指针，原型如上个注释所示</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == parr || row &lt;= <span class="number">0</span> || col &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//行优先 求和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">&#123;</span><br><span class="line">sum += parr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><div class="table-container"><table><thead><tr><th>关键的变量</th><th>时间局部性</th><th>空间局部性</th></tr></thead><tbody><tr><td>sum</td><td>好</td><td>无</td></tr><tr><td>parr</td><td>差</td><td>好</td></tr></tbody></table></div><hr><h4 id="2-小试身手"><a href="#2-小试身手" class="headerlink" title="2. 小试身手"></a>2. 小试身手</h4><p>（1）列优先：对一个二维数组所有元素求和</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int Sum2DArr(int (*parr)[col], int row, int col)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Sum2DArr</span><span class="params">(<span class="type">int</span> parr[row][col], <span class="type">int</span> row, <span class="type">int</span> col)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注意：形参parr会退化成数组指针，原型如上个注释所示</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == parr || row &lt;= <span class="number">0</span> || col &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//行优先 求和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; col; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; row; j++)</span><br><span class="line">&#123;</span><br><span class="line">sum += parr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><div class="table-container"><table><thead><tr><th>关键的变量</th><th>时间局部性</th><th>空间局部性</th></tr></thead><tbody><tr><td>sum</td><td>好</td><td>无</td></tr><tr><td>parr</td><td>差</td><td>差</td></tr></tbody></table></div><p><code>结论：在对二维数组元素访问时采用列优先时，此时的步长为col, 访问的方式是parr[0][0]、 parr[1][0]......</code></p><hr><h3 id="（三）取指令的局部性"><a href="#（三）取指令的局部性" class="headerlink" title="（三）取指令的局部性"></a>（三）取指令的局部性</h3><blockquote><p>取指令：操作系统将该程序从就绪态转成运行态的过程中，会进行读取将程序的段加载到内存中，CPU会从存放指令段的内存地址中读取对应的程序的指令的过程。</p></blockquote><p><strong>对于上面写的程序来说，都使用了循环，那么对于循环内的指令来说，具有<code>好的时间局部性（多次访问）</code>、<code>好的空间局部性（指令存放内存的位置较为集中连续，引用步长小）。</code></strong></p><hr><h3 id="（四）局部性总结"><a href="#（四）局部性总结" class="headerlink" title="（四）局部性总结"></a>（四）局部性总结</h3><p><strong><code>量化局部性的原则：</code></strong></p><ul><li>重复引用相同变量的程序具有较好的时间局部性；</li><li>对于具有步长为N的引用模式的程序，步长越小，空间局部性就越好</li><li>对于取指令来说，循环具有良好的时间和空间局部性。循环体越小，迭代次数越多，局部性越好</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 局部性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】快速建表以及删除表</title>
      <link href="/posts/143c735f.html"/>
      <url>/posts/143c735f.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）快速建表"><a href="#（一）快速建表" class="headerlink" title="（一）快速建表"></a>（一）快速建表</h3><h4 id="（1）拷贝一张表"><a href="#（1）拷贝一张表" class="headerlink" title="（1）拷贝一张表"></a>（1）拷贝一张表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 新表名</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 旧表名;</span><br></pre></td></tr></table></figure><h4 id="（2）拷贝一张空表"><a href="#（2）拷贝一张空表" class="headerlink" title="（2）拷贝一张空表"></a>（2）拷贝一张空表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 新表名</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 旧表名 <span class="keyword">where</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="（3）自由拷贝表"><a href="#（3）自由拷贝表" class="headerlink" title="（3）自由拷贝表"></a>（3）自由拷贝表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 新表名</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> 需要的字段,字段<span class="number">2</span> <span class="keyword">from</span> 旧表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure><h3 id="（二）删除表"><a href="#（二）删除表" class="headerlink" title="（二）删除表"></a>（二）删除表</h3><p>删除程度可从强到弱如下排列：</p><ol><li><code>drop table 表名;</code> 直接将表格删除，无法找回。</li><li><code>truncate table 表名;</code>   truncate 是删除表中所有数据，但不能与where一起使用</li><li><code>delete from 表名;</code> 删除表中数据，但可以与where连用，删除特定行</li></ol><hr><p><strong>delete 和 truncate的区别：</strong><br><img src="https://img-blog.csdnimg.cn/e8a1b62618b24c41a604c45569678639.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】外键约束</title>
      <link href="/posts/31832cda.html"/>
      <url>/posts/31832cda.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）外键约束"><a href="#（一）外键约束" class="headerlink" title="（一）外键约束"></a>（一）外键约束</h3><ul><li>外键：是指表中某个字段的值依赖于另一个表中的某个字段的值(<code>被依赖的字段必须要有主键约束或者唯一约束</code>）</li><li><p>外键约束：用户实现数据库表的参照完整性。外键约束可以使两张表紧密结合起来，特别是对于删除/修改级联操作时，会保证数据的完整性。</p></li><li><p>子表/从表：使用外键约束的表 （学生表：学号，姓名，性别，年龄，班级号）</p></li><li>父表/主表：含有被依赖的字段的表（班级表：班级号，班级名）</li></ul><p><strong>注意：学生表中含有班级号</strong></p><hr><h3 id="（二）外键约束的功能"><a href="#（二）外键约束的功能" class="headerlink" title="（二）外键约束的功能"></a>（二）外键约束的功能</h3><ul><li>同一个字段有着大量重复数据，使用外键约束后，修改只修改一次父表中的数据即可，节省时间；</li></ul><p><strong><code>注意：外键约束只有表级约束</code></strong></p><hr><h3 id="（三）学生表和班级表"><a href="#（三）学生表和班级表" class="headerlink" title="（三）学生表和班级表"></a>（三）学生表和班级表</h3><h4 id="（1）练习"><a href="#（1）练习" class="headerlink" title="（1）练习"></a>（1）练习</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建主表（班级表）</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> class_table(</span><br><span class="line">c_id <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">c_name <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建从表（学生表）</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu_table(</span><br><span class="line">s_id <span class="type">int</span> <span class="keyword">PRIMARY</span> key auto_increment,</span><br><span class="line">s_name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">s_sex <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">check</span>(s_sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">or</span> s_sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">s_age <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">check</span>(s_age <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">and</span> s_age <span class="operator">&lt;</span> <span class="number">100</span>),</span><br><span class="line">c_id <span class="type">int</span>(<span class="number">4</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 班级表添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> class_table <span class="keyword">values</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;xg1901&#x27;</span>), (<span class="keyword">NULL</span>, <span class="string">&#x27;xg1902&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看班级表数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> class_table;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生表中插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_table <span class="keyword">values</span> (<span class="keyword">NULL</span>, <span class="string">&#x27;香菱&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_table <span class="keyword">values</span> (<span class="keyword">NULL</span>, <span class="string">&#x27;行秋&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_table <span class="keyword">values</span> (<span class="keyword">NULL</span>, <span class="string">&#x27;胡桃&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">16</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_table <span class="keyword">values</span> (<span class="keyword">NULL</span>, <span class="string">&#x27;班尼特&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">-- 查看学生表数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu_table;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e97b1bd26f794bde9fbe096e7122ad72.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/106b2dba3ff949168ca3771e0c60c4f7.png" alt="在这里插入图片描述"></p><h4 id="（2）两个问题"><a href="#（2）两个问题" class="headerlink" title="（2）两个问题"></a>（2）两个问题</h4><p>1) <strong>问题一：班级表中只有1， 2 ，那我们在学生表中插入3班学生呢？</strong><br><code>insert into stu_table values (NULL, &#39;测试名&#39;, &#39;女&#39;, 18, 3 );</code></p><p><img src="https://img-blog.csdnimg.cn/7b4c2b777f254edd84e5e3c5dfd2815b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong><code>结果很明显添加成功，但这种做法就是错误的，因为根本没有c_id = 3的班</code></strong></p><p>2) <strong>问题二：那我们删除班级表中的一条记录呢，那2班的人怎么办？</strong><br>比如：删除xg1902<br><code>delete from class_table where c_id = 2;</code><br><img src="https://img-blog.csdnimg.cn/88326043dc95417fa69eb1c6ade83a78.png" alt="在这里插入图片描述"><br>那么学生表中c_id = 2的学生有没有被删除呢？？很显然并没有<br><img src="https://img-blog.csdnimg.cn/3142401722e4466884824e1de3db9f3b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_13,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（3）解决方案"><a href="#（3）解决方案" class="headerlink" title="（3）解决方案"></a>（3）解决方案</h4><ul><li><strong>产生原因：未将外键约束语法添加进去</strong></li></ul><ul><li>添加外键约束(<code>只有表级约束</code>)：</li></ul><p>1.创建表时添加表级外键约束<br>语法：<code>constraint 约束名 foreign key 子表名 (子表字段名) references 父表名 (父表唯一字段名)</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建从表（学生表）</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu_table(</span><br><span class="line">s_id <span class="type">int</span> <span class="keyword">PRIMARY</span> key auto_increment,</span><br><span class="line">s_name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">s_sex <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">check</span>(s_sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">or</span> s_sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">s_age <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">check</span>(s_age <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">and</span> s_age <span class="operator">&lt;</span> <span class="number">100</span>),</span><br><span class="line">c_id <span class="type">int</span>(<span class="number">4</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建时添加表级外键约束</span></span><br><span class="line"><span class="keyword">constraint</span> fk_c_id  <span class="keyword">foreign</span> key (c_id) <span class="keyword">references</span> class_table (c_id)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/ea0614ccf8c6479a81fa11942e75a507.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>2.对已创建的表添加表级外键约束<br><code>alter table 子表名 add constraint 约束名 foreign key 子表名 (子表字段名) references 父表名 (父表唯一字段名);</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 已存在的表添加表级外键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_table <span class="keyword">add</span> <span class="keyword">constraint</span> fk_c_id  <span class="keyword">foreign</span> key (c_id) <span class="keyword">references</span> class_table (c_id);</span><br></pre></td></tr></table></figure><h4 id="（4）结果展示"><a href="#（4）结果展示" class="headerlink" title="（4）结果展示"></a>（4）结果展示</h4><p><img src="https://img-blog.csdnimg.cn/ca3a5779ec8d4bf3b11e7f015d6b1de1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f84ff17f12f94496a378a61a76982b03.png" alt="在这里插入图片描述"></p><hr><h3 id="（四）外键策略"><a href="#（四）外键策略" class="headerlink" title="（四）外键策略"></a>（四）外键策略</h3><h4 id="（1）策略一：手动置空"><a href="#（1）策略一：手动置空" class="headerlink" title="（1）策略一：手动置空"></a>（1）策略一：手动置空</h4><p><img src="https://img-blog.csdnimg.cn/f89ec604dec74c4da74205fd8d6a2871.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）策略二：级联操作-on-update-on-delete"><a href="#（2）策略二：级联操作-on-update-on-delete" class="headerlink" title="（2）策略二：级联操作 on update on delete"></a>（2）策略二：级联操作 on update on delete</h4><p><code>创建约束 外键策略;</code></p><blockquote><p><strong>什么是级联呢？</strong></p><p><code>开启级联后，更新/删除一个主表的主键值（唯一字段），系统会相应的更新/删除所有从表匹配的外键值。</code></p></blockquote><p><strong>先删除旧的外键约束，在添加含有外键策略（级联操作）的外键约束</strong></p><ul><li>语法格式：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.先删除旧的外键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表名 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键约束名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.重新添加带有级联操作(更新/删除)的外键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键约束名 <span class="keyword">foreign</span> key (从表字段名) <span class="keyword">references</span> 主表名 (主表字段名) <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade;</span><br></pre></td></tr></table></figure></li><li>示例：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.先删除旧的外键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_table <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_c_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.重新添加带有级联操作(更新/删除)的外键约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_table <span class="keyword">add</span> <span class="keyword">constraint</span> fk_c_id <span class="keyword">foreign</span> key (c_id) <span class="keyword">references</span> class_table (c_id) <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 级联更新</span></span><br><span class="line"><span class="keyword">update</span> class_table <span class="keyword">set</span> c_id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">where</span> c_id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 级联删除</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> class_table <span class="keyword">where</span> c_id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2ed959ac59084d8593cea2f6ecaffac2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（3）级联置空-set-null"><a href="#（3）级联置空-set-null" class="headerlink" title="（3）级联置空 set null"></a>（3）级联置空 set null</h4><p>举个例子，学生表中有4个2班的学生， 班级表有1班和2班，假设删除班级表中的2班，出现的情况如下：</p><blockquote><ul><li>外键约束的外键策略set null：学生表中的所有2班学生的班级号为null</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL外键约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】完整性约束之非外键约束</title>
      <link href="/posts/66ca7b91.html"/>
      <url>/posts/66ca7b91.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）什么是完整性约束？"><a href="#（一）什么是完整性约束？" class="headerlink" title="（一）什么是完整性约束？"></a>（一）什么是完整性约束？</h3><blockquote><p><strong>为了防止步符合规范的数据存入数据库，在用户对数据进行<code>增删改</code>操作时，MySQL提供一种机制来检查数据库中的数据是否满足规定的条件，确保数据的准确性和一致性。</strong></p></blockquote><hr><h3 id="（二）MySQL支持的完整性约束"><a href="#（二）MySQL支持的完整性约束" class="headerlink" title="（二）MySQL支持的完整性约束"></a>（二）MySQL支持的完整性约束</h3><p><img src="https://img-blog.csdnimg.cn/17dc67eeb4e94557adb3e2a85fd80e15.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="（三）列级约束"><a href="#（三）列级约束" class="headerlink" title="（三）列级约束"></a>（三）列级约束</h3><p><strong>列级约束：创建表时添加约束</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建stu_info表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu_info (</span><br><span class="line">  `s_id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">  `s_name` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`s_sex` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">CHECK</span>(s_sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">or</span> s_sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">  `s_age` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">CHECK</span>(s_age <span class="operator">&gt;</span> <span class="number">18</span> <span class="keyword">and</span> s_age <span class="operator">&lt;</span> <span class="number">100</span>),</span><br><span class="line">  `s_born_date` <span class="type">date</span> ,</span><br><span class="line">  `classname` <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">  `score` <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">1</span>),</span><br><span class="line">  `s_tel` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/cde95c87d71c4fb9a10aa769cf7c7b1e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/882f3d16a75b4bea9ed2ef0fee99a575.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>s_id 主键非空唯一 <code>若设置自动增长（可以 不填/NULL/default）</code><br>s_name 非空约束<br>s_sex 男/女约束<br>s_age &gt;18 and &lt; 100约束<br>s_tel 唯一约束</p><p><strong><code>注意：当主键设置了自动增长AUTO_INCREMENT并且插入数据产生错误时，数据没有插进去，但是主键已经自增，出现不连号现象（允许的）</code></strong></p><hr><h3 id="（四）表级约束"><a href="#（四）表级约束" class="headerlink" title="（四）表级约束"></a>（四）表级约束</h3><p>表级约束在建表时，在最后一个字段后使用 constraint限制，格式如下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名</span><br><span class="line">(</span><br><span class="line">...,</span><br><span class="line"><span class="comment">-- 表级约束</span></span><br><span class="line"><span class="keyword">constraint</span> 自定义约束名 约束 (字段名), </span><br><span class="line">... </span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu_info (</span><br><span class="line">  `s_id` <span class="type">int</span>(<span class="number">10</span>) AUTO_INCREMENT,</span><br><span class="line">  `s_name` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`s_sex` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span> ,</span><br><span class="line">  `s_age` <span class="type">int</span>(<span class="number">3</span>) ,</span><br><span class="line">  `s_born_date` <span class="type">date</span> ,</span><br><span class="line">  `classname` <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">  `score` <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">1</span>),</span><br><span class="line">  `s_tel` <span class="type">int</span>(<span class="number">11</span>),</span><br><span class="line"><span class="comment">-- 表级约束</span></span><br><span class="line">  <span class="keyword">constraint</span> pk_s_id <span class="keyword">primary</span> key (s_id),</span><br><span class="line">  <span class="keyword">constraint</span> sex_check <span class="keyword">CHECK</span>(s_sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">or</span> s_sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">  <span class="keyword">constraint</span> age_check <span class="keyword">CHECK</span>(s_age <span class="operator">&gt;</span> <span class="number">18</span> <span class="keyword">and</span> s_age <span class="operator">&lt;</span> <span class="number">100</span>),</span><br><span class="line">  <span class="keyword">constraint</span> s_tel_unique <span class="keyword">UNIQUE</span> (s_tel)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><ul><li><strong>自增约束前提时主键约束</strong></li><li><strong>auto_increment、not null、default只能使用列级约束</strong></li><li><strong>表级约束的优点就是当插入不合法的数据时，就会报错自定义的约束名，方便查错误</strong></li></ul></blockquote><hr><h3 id="（五）已存在的表添加约束"><a href="#（五）已存在的表添加约束" class="headerlink" title="（五）已存在的表添加约束"></a>（五）已存在的表添加约束</h3><ul><li><p><strong>一般：</strong><br><code>alter table 表名 add constraint 自定义约束名 约束类型;</code></p></li><li><p><strong>特殊：对于想给主键增加auto_increment约束（只能使用列级约束）</strong><br><code>alter table 表名 modify 字段名 类型 auto_increment;</code></p></li></ul><p>对已创建的stu_info表添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建stu_info表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu_info (</span><br><span class="line">  `s_id` <span class="type">int</span>(<span class="number">10</span>) ,</span><br><span class="line">  `s_name` <span class="type">varchar</span>(<span class="number">10</span>) ,</span><br><span class="line">`s_sex` <span class="type">char</span>(<span class="number">1</span>) ,</span><br><span class="line">  `s_age` <span class="type">int</span>(<span class="number">3</span>) ,</span><br><span class="line">  `s_born_date` <span class="type">date</span> ,</span><br><span class="line">  `classname` <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">  `score` <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">1</span>),</span><br><span class="line">  `s_tel` <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对已创建的表添加表级约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> pk_s_id <span class="keyword">primary</span> key (s_id);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> sex_check <span class="keyword">CHECK</span>(s_sex <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">or</span> s_sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> age_check <span class="keyword">CHECK</span>(s_age <span class="operator">&gt;</span> <span class="number">18</span> <span class="keyword">and</span> s_age <span class="operator">&lt;</span> <span class="number">100</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info <span class="keyword">add</span> <span class="keyword">CONSTRAINT</span> s_tel_unique <span class="keyword">UNIQUE</span> (s_tel);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对已创建的表添加列级约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info modify s_id <span class="type">int</span>(<span class="number">10</span>) AUTO_INCREMENT;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info modify s_name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info modify s_sex <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">desc</span> stu_info;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> stu_info;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>图形化操作：添加约束</strong><br><img src="https://img-blog.csdnimg.cn/e948e32c02384989997b12510816a7db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/00902914e24a4afead638a4ce366cac8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL完整性约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】表的操作</title>
      <link href="/posts/61738b16.html"/>
      <url>/posts/61738b16.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）修改表结构"><a href="#（一）修改表结构" class="headerlink" title="（一）修改表结构"></a>（一）修改表结构</h3><h4 id="（1）添加字段（默认尾部）"><a href="#（1）添加字段（默认尾部）" class="headerlink" title="（1）添加字段（默认尾部）"></a>（1）添加字段（默认尾部）</h4><p><code>alter table 表名 add 新字段名 新字段的类型;</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表结构</span></span><br><span class="line"><span class="comment">-- 增加性别字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info <span class="keyword">add</span> s_sex <span class="type">char</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/242d8ee75d264c7b9225907cd69d9b4c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h4 id="（2）添加字段（头部）"><a href="#（2）添加字段（头部）" class="headerlink" title="（2）添加字段（头部）"></a>（2）添加字段（头部）</h4><p><code>alter table 表名 add 新字段名 新字段的类型 first;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info <span class="keyword">add</span> s_sex <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">first</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/30f7e727869d49bab0c2d5c86f3ae410.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h4 id="（3）添加字段（指定位置后）"><a href="#（3）添加字段（指定位置后）" class="headerlink" title="（3）添加字段（指定位置后）"></a>（3）添加字段（指定位置后）</h4><p><code>alter table 表名 add 新字段名 新字段类型 after 旧字段名;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在s_name后添加s_sex</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info <span class="keyword">add</span> s_sex <span class="type">char</span>(<span class="number">1</span>) after s_name;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9e2ab056505e442d95c8f532f373e578.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="（二）删除字段"><a href="#（二）删除字段" class="headerlink" title="（二）删除字段"></a>（二）删除字段</h3><p><code>alter table 表名 drop 字段名;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除s_sex字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info <span class="keyword">drop</span> s_sex;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/7df6a578e55649bc96dda0895de64528.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="（三）修改字段的类型"><a href="#（三）修改字段的类型" class="headerlink" title="（三）修改字段的类型"></a>（三）修改字段的类型</h3><p><code>alter table 表名  modify 字段名  新类型;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info modify score <span class="keyword">double</span>(<span class="number">5</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>执行前：<br><img src="https://img-blog.csdnimg.cn/35615469241b4ead8eec40031a7b5e45.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>修改后：</p><p><img src="https://img-blog.csdnimg.cn/428e01bcf2584c38a2ae3eae062e67ea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="（四）修改字段名-类型"><a href="#（四）修改字段名-类型" class="headerlink" title="（四）修改字段名+类型"></a>（四）修改字段名+类型</h3><p><code>alter table 表名  change 旧字段名 新字段名 新类型;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改字段名+类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu_info change score new_score <span class="keyword">double</span>(<span class="number">5</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c7a7a2b383b5457082ced01037c420fd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><hr><h3 id="（五）删除表"><a href="#（五）删除表" class="headerlink" title="（五）删除表"></a>（五）删除表</h3><p><code>drop table 表名;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表ip_table</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> ip_table;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/51799da3b6354f2493b774798f558a86.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL表的操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】基础总结（未完待续）</title>
      <link href="/posts/7082de6b.html"/>
      <url>/posts/7082de6b.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、c和c-中const的区别"><a href="#一、c和c-中const的区别" class="headerlink" title="一、c和c++中const的区别"></a>一、c和c++中const的区别</h3><p><strong>C语言：加const</strong></p><ol><li>生成的是全局的符号；</li><li>const修饰的是变量（是一个常属性的<code>变量</code>）；</li></ol><p><strong>C++：加const</strong></p><ol><li>不生成符号，在编译阶段直接对初始化时值进行替换(<code>常量</code>)；</li><li>作用域是本文件；</li><li>必须初始化，且后面无法修改；</li></ol><h3 id="二、c和c-堆区开辟二维数组"><a href="#二、c和c-堆区开辟二维数组" class="headerlink" title="二、c和c++堆区开辟二维数组"></a>二、c和c++堆区开辟二维数组</h3><p><strong>C语言：malloc、free</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一维数组：</span></span><br><span class="line"><span class="type">int</span> *arr = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">10</span>); </span><br><span class="line">assert(arr != <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">free</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组：10 * 20</span></span><br><span class="line"><span class="type">int</span>** <span class="title function_">ApplySecondArr</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> **brr = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">int</span> *));</span><br><span class="line">assert(<span class="literal">NULL</span> != brr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">brr[i] = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span>(brr[i] == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">return</span> brr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">FreeSpace</span><span class="params">(<span class="type">int</span>** brr, <span class="type">int</span> rows)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line"><span class="keyword">if</span>(brr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//先删除后申请的</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(brr[i] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(brr[i]);</span><br><span class="line">brr[i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(brr);</span><br><span class="line">brr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>c++：new、delete</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一维数组：</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> len = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//创建:申请不用判空，自动抛异常</span></span><br><span class="line"><span class="type">int</span> *err = <span class="keyword">new</span> <span class="type">int</span>[len];</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> != err)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//申请2*10个int类型的空间</span></span><br><span class="line"><span class="type">int</span>** arr = <span class="keyword">new</span> <span class="type">int</span>* [<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、关于using-namespace-std"><a href="#三、关于using-namespace-std" class="headerlink" title="三、关于using namespace std;"></a>三、关于using namespace std;</h3><p>using 、namespace 都是c++的关键字</p><p>namespace是命名空间，std就是空间名</p><p><strong>作用：解决命名冲突，不同命名空间下的同名变量、方法、类、结构体等不会产生冲突</strong></p><p><strong>下面举个例子：自己定义一个命名空间</strong></p><p>fun.h文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> hello</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello,world&quot;</span> &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> cpp</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;cpp&quot;</span>&lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;fun.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一：直接全局声明在本文件可使用hello命名空间的内容</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> hello;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fun</span>();</span><br><span class="line">    <span class="comment">//此时fun()函数使用的是hello命名空间下的fun()函数</span></span><br><span class="line">    <span class="comment">//结果：hello,world</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方式二：命名空间名::方法</span></span><br><span class="line">    cpp::<span class="built_in">fun</span>();</span><br><span class="line">    <span class="comment">//结果：cpp</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li><p>命名空间只能在全局定义</p></li><li><p>命名空间可以嵌套命名空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> a</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ma = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">namespace</span> b</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> ma = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line"><span class="comment">//a::的ma = 10</span></span><br><span class="line">cout &lt;&lt; a::ma &lt;&lt; end;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a::b::ma = 20；</span></span><br><span class="line">cout &lt;&lt; a::b::ma&lt;&lt; endl;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>命名空间名可以是匿名</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ma = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> mb = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line">cout &lt;&lt; ma &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; ::ma &lt;&lt; endl;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>同名命名空间可以进行合并（相当于补充的功能）</p></li><li><p>命名空间名可以起别名</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> oldname</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ma = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">namespace</span> newname = oldname;</span><br><span class="line">    cout &lt;&lt; newname::ma &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="四、为什么使用初始化列表"><a href="#四、为什么使用初始化列表" class="headerlink" title="四、为什么使用初始化列表"></a>四、为什么使用初始化列表</h3><p>初始化列表使用情况：<strong>只有构造函数才有初始化列表</strong>；对成员属性进行初始化</p><p><strong>以下情况均需要在初始化列表进行初始化(常变量、引用)。</strong></p><p><strong>原因：成员属性中的常变量、引用在调用构造函数test()之前就需要进行初始化，所以只能使用初始化列表进行初始化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iosream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">test</span>(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">        :<span class="built_in">ma</span>(a),<span class="built_in">mb</span>(b)</span><br><span class="line">    &#123;   </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> ma;</span><br><span class="line">    <span class="type">int</span> &amp;mb;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="五、关于this指针"><a href="#五、关于this指针" class="headerlink" title="五、关于this指针"></a>五、关于this指针</h3><p><strong>this指针:是隐含在每一个非静态成员函数的指针；</strong><br>本质：Person<em> const this ;可以改变指向的内容，不可以改变指向；<br><strong>用途：</strong><br>1.当形参与成员变量名相同时，可用this指针加以区分；<br>2.在类的非静态成员函数中返回类的对象的本身，可使用return </em>this;</p><h3 id="六、成员变量和成员函数的联系"><a href="#六、成员变量和成员函数的联系" class="headerlink" title="六、成员变量和成员函数的联系"></a>六、成员变量和成员函数的联系</h3><ol><li><p>成员变量和成员函数是分开存储的</p></li><li><p>当类是一个空类时，该类实例化的对象的大小是1字节；<br>这是编译器为了区分空对象的占用内存的地址；</p></li><li><p>非静态成员变量 属于类的对象；<br>静态成员变量 不属于类的对象上；<br>静态成员函数 不属于类的对象上；<br>非静态成员函数 不属于类的对象上；</p></li></ol><h3 id="七、函数指针调用成员方法"><a href="#七、函数指针调用成员方法" class="headerlink" title="七、函数指针调用成员方法"></a>七、函数指针调用成员方法</h3><p>函数指针：typedef void (*pfun)();</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">test</span>():<span class="built_in">ma</span>(<span class="number">0</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="built_in">test</span>(<span class="type">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">ma = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt;<span class="keyword">this</span>-&gt;ma &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ma;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(test::*pshow)</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//函数指针p指向test类中的Show方法</span></span><br><span class="line">pshow p = &amp;test::Show;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用 (对象.*p)()调用test::Show()方法</span></span><br><span class="line">test ts;</span><br><span class="line">(ts.*p)();</span><br><span class="line">    test* pts = <span class="keyword">new</span> <span class="built_in">test</span>(<span class="number">20</span>);</span><br><span class="line">    (pts-&gt;*p)();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八、使用typeid-类、对象、变量名、函数-name-函数"><a href="#八、使用typeid-类、对象、变量名、函数-name-函数" class="headerlink" title="八、使用typeid(类、对象、变量名、函数).name()函数"></a>八、使用typeid(类、对象、变量名、函数).name()函数</h3><p>c++可以查看类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt;<span class="built_in">typeid</span>(a).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="九、函数返回值怎么被带回调用方"><a href="#九、函数返回值怎么被带回调用方" class="headerlink" title="九、函数返回值怎么被带回调用方"></a>九、函数返回值怎么被带回调用方</h3><p><strong>在32位系统上（非类类型），根据返回值的字节大小来不同的返回方式：</strong></p><ul><li>sizeof(data) &lt;= 4字节 由ax寄存器把数据保存起来</li><li>sizeof(data) &gt; 4 &amp;&amp; sizeof(data) &lt;= 8  由ax、dx寄存器把数据保存起来</li><li>sizeof(data)  &gt; 8 时，由寄存器存放临时量的地址，返回临时量的地址</li></ul><p><strong>类类型：</strong></p><p>不管几个字节，都是由寄存器带回临时对象的地址</p><h3 id="十、c-c-函数调用约定"><a href="#十、c-c-函数调用约定" class="headerlink" title="十、c/c++函数调用约定"></a>十、c/c++函数调用约定</h3><p>_cdcel：c标准默认调用约定</p><p>_stdcall：windows下的调用约定</p><p>_fastcall：快速调用约定</p><p><strong>约束内容：</strong></p><ol><li><p>生成的符号：不同调用约定的函数不能调用</p></li><li><p>入栈的顺序：c/c++都是从右向左sum(a, b),先b后a</p></li><li><p>开辟、清理 形参的内存：</p><ol><li><p>_cdecl 调用方开辟、清理；</p></li><li><p>_stdcall调用方开辟、被调用清理；</p></li><li><p>_fastcall；前两个形参由寄存器带入被调用方，没有内存开辟</p><p>​        以后的形参都是_stdcall相同的调用约定</p></li></ol></li></ol><h3 id="十一、静态成员函数、静态成员属性"><a href="#十一、静态成员函数、静态成员属性" class="headerlink" title="十一、静态成员函数、静态成员属性"></a>十一、静态成员函数、静态成员属性</h3><p><strong>特点：</strong><br>                所有的对象共享一份数据；<br>                在编译阶段给分配内存；<br>                类内声明，类外初始化</p><p><strong>访问：</strong><br>                使用对象调用；<br>                使用类名调用；</p><p><strong>静态成员属性：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Preson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetAge</span><span class="params">(<span class="type">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外初始化:需加上作用域</span></span><br><span class="line"><span class="type">int</span> Person::m_age = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><p><strong>静态成员函数：</strong></p><ul><li><p>静态成员函数可以访问静态成员变量；</p></li><li><p>静态成员函数不可以访问非静态成员变量；</p><p><strong>注意：通过类名访问成员函数时，只能访问静态成员函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; ma &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> ma;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类外初始化</span></span><br><span class="line"><span class="type">int</span> test::ma = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//对象调用</span></span><br><span class="line">test ts;</span><br><span class="line">ts.<span class="built_in">show</span>();</span><br><span class="line"><span class="comment">//类名调用</span></span><br><span class="line">test::<span class="built_in">show</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="十二、空指针-this访问成员函数"><a href="#十二、空指针-this访问成员函数" class="headerlink" title="十二、空指针 this访问成员函数"></a>十二、空指针 this访问成员函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Showma</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; ma &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">ShowHello</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;hello,world&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> ma;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test* pts = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//err</span></span><br><span class="line">    <span class="comment">//pts-&gt;Showma();</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">    pts-&gt;<span class="built_in">ShowHello</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：空指针test* pts = NULL</strong></p><p>访问成员函数的两种结果：</p><ol><li>访问成功：不包含成员属性的成员函数pts-&gt;ShowHello()</li><li>访问失败：包含成员属性的成员函数pts-&gt;Showma()</li></ol><h3 id="十三、extern-C"><a href="#十三、extern-C" class="headerlink" title="十三、extern C"></a>十三、extern C</h3><h3 id="十四、类与类之间的关系及构造、析构顺序"><a href="#十四、类与类之间的关系及构造、析构顺序" class="headerlink" title="十四、类与类之间的关系及构造、析构顺序"></a>十四、类与类之间的关系及构造、析构顺序</h3><p>依赖、关联、聚合、组合、继承</p><h3 id="十五、函数模板"><a href="#十五、函数模板" class="headerlink" title="十五、函数模板"></a>十五、函数模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;&gt;不仅能存放模板的类型参数、非类型的整形int常量(float、double不行)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="type">int</span> LEN&gt; <span class="comment">//LEN是常量</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowArr</span><span class="params">(T* arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; LEN; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">ShowArr</span>&lt;<span class="type">int</span>, <span class="number">2</span>&gt;(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：模板并不是万能的，比如自定义类型</strong></p><p><strong>所以就有了模板的特例化：</strong></p><p><strong>调用优先级：</strong></p><p>普通函数  &gt;特例化模板函数 &gt; 模板函数</p><h3 id="十六、类模板"><a href="#十六、类模板" class="headerlink" title="十六、类模板"></a>十六、类模板</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">demon</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>两种特例化的方式：</p><ol><li>完全特例化：类、函数都可以</li><li>部分特例化：只有类的成员方法</li></ol><p><strong>typename 作用：</strong></p><ol><li>定义模板参数</li><li>指明模板的类型</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】指针和引用的区别</title>
      <link href="/posts/7b76d06f.html"/>
      <url>/posts/7b76d06f.html</url>
      
        <content type="html"><![CDATA[<h3 id="引用（左值引用）的特点："><a href="#引用（左值引用）的特点：" class="headerlink" title="引用（左值引用）的特点："></a>引用（左值引用）的特点：</h3><ul><li>引用即别名：只是给已存在的对象起别名</li><li>引用的类型必须与被引用的对象类型相同。</li><li>引用本身不是一个对象，不能作为被引用的对象。</li></ul><h3 id="指针和引用的区别："><a href="#指针和引用的区别：" class="headerlink" title="指针和引用的区别："></a>指针和引用的区别：</h3><ol><li>是否初始化：指针可以不用初始化，引用必须初始化</li><li>性质不同：指针是一个变量，引用是对被引用的对象起的别名</li><li>所占内存单元：指针有自己的空间地址，引用和被引用对象占同一个空间地址</li><li>是否可用const修饰：指针可以使用const修饰，引用也可以（const int a = 10; const int&amp; b = a;）</li><li>是否可变：指针可以改变，引用一旦初始化，就不可改变</li><li>使用sizeof结果不同：sizeof(指针) = 4字节/8字节，sizeof(引用) == sizeof(被引用对象)</li><li>单目运算符++/—运算结果不同：指针++/—表示移动，引用++/—表示被引用对象的值++/—</li><li>动态开辟的对象情况：返回值时必须使用指针，引用会引起内存泄漏</li></ol><p><strong><code>以上区别都可以通过测试来验证！需要牢记，在使用时注意避坑即可！！</code></strong></p><p><img src="https://img-blog.csdnimg.cn/6618e9e6705e48f887de3ebd652fa0db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针+引用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】表中数据的增删改查</title>
      <link href="/posts/3ce745f5.html"/>
      <url>/posts/3ce745f5.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）数据的查询"><a href="#（一）数据的查询" class="headerlink" title="（一）数据的查询"></a>（一）数据的查询</h3><p>select语句用法：</p><p>（1）查询单个字段<br><code>select 字段名 from 表名;</code><br><img src="https://img-blog.csdnimg.cn/fb2321611b4b4e4391c5fbe8b4d2d10f.png" alt="在这里插入图片描述"></p><p>（2）查询多个字段<br><code>select 字段名1, 字段名2, ... from 表名;</code><br><img src="https://img-blog.csdnimg.cn/72c828fd8f1942248d4f527302f9f752.png" alt="在这里插入图片描述"></p><p>（3）查询所有字段（通配符<em>）<br>`select </em> from 表名`<br><img src="https://img-blog.csdnimg.cn/1f63d805991f45ff9615908a927b71a2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="（二）数据的添加"><a href="#（二）数据的添加" class="headerlink" title="（二）数据的添加"></a>（二）数据的添加</h3><h4 id="（1）指定字段添加数据"><a href="#（1）指定字段添加数据" class="headerlink" title="（1）指定字段添加数据"></a>（1）指定字段添加数据</h4><ul><li>方式一：<br>  <code>insert into 表名(列名1, 列名2...) values(数据1, 数据2...);</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 指定字段插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_info(s_id,s_name,s_age,s_born_date,classname,s_tel) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;甘雨&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;2001-07-08&#x27;</span>,<span class="string">&#x27;软工1200&#x27;</span>,<span class="number">1112223</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/88c62db80e984253836e316efd23d7d0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ul><li>方式二：<br><code>insert into 表名 set 列名n = 值n, 列名2 = 值2, ... ;</code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 指定字段插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_info <span class="keyword">set</span> s_id<span class="operator">=</span><span class="number">4</span>, s_name<span class="operator">=</span><span class="string">&#x27;测试&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e1ae0ffa8ffa4d6da809c06db62687ed.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）所有字段添加数据"><a href="#（2）所有字段添加数据" class="headerlink" title="（2）所有字段添加数据"></a>（2）所有字段添加数据</h4><p><code>insert into 表名 values(数据1, 数据2...);</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 所有字段插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu_info <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;胡桃&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;2002-07-28&#x27;</span>,<span class="string">&#x27;软工1302&#x27;</span>,<span class="number">233333</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/9ef0746eb35e4fc4a5939862dc525b41.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>注意：</strong></p><blockquote><ul><li>时间的输入方式有多种：<code>&#39;2000-07-28&#39;</code>，<code>&#39;2000/07/28&#39;</code>，<code>&#39;2000.07.28&#39;</code></li><li>字符串<code>不区分单双引号</code></li><li>输入当前时间 <code>now()</code>、<code>sysdate()</code>、<code>current_date()</code></li><li>char、varchar是字符的个数，可使用binary, varbinary 表示定长和不定长的字节个数</li></ul></blockquote><h3 id="（三）数据的修改"><a href="#（三）数据的修改" class="headerlink" title="（三）数据的修改"></a>（三）数据的修改</h3><p><code>update 表名 set 字段名=值 where 条件;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> stu_info <span class="keyword">set</span> s_age <span class="operator">=</span> <span class="number">100</span> <span class="keyword">where</span> s_name <span class="operator">=</span> <span class="string">&#x27;测试&#x27;</span> ;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/000f86c4feae46379158cde65ae51315.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>注意：</strong></p><blockquote><ul><li>关键字、表名、字段名不区分大小写</li><li>默认情况下，数据内容不区分大小写</li><li>修改时记得加where子句</li></ul></blockquote><h3 id="（四）数据的删除"><a href="#（四）数据的删除" class="headerlink" title="（四）数据的删除"></a>（四）数据的删除</h3><p><code>delete from 表名 where 条件;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> stu_info <span class="keyword">where</span> s_id <span class="operator">=</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5467ad79ac5c49ba9dd15e3c1c216289.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL增删改查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】基本数据类型介绍</title>
      <link href="/posts/3a5ff897.html"/>
      <url>/posts/3a5ff897.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）整型类型"><a href="#（一）整型类型" class="headerlink" title="（一）整型类型"></a>（一）整型类型</h3><p><img src="https://img-blog.csdnimg.cn/d5172d537d77429c89a4764850a1de4f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p><strong>注意：</strong></p><ul><li>Mysql支持显示的数值的宽度（例如：int(5)），显示宽度是5，但实际存储的数据范围是表格中的范围</li></ul></blockquote><hr><h3 id="（二）浮点类型"><a href="#（二）浮点类型" class="headerlink" title="（二）浮点类型"></a>（二）浮点类型</h3><p><img src="https://img-blog.csdnimg.cn/bc6c700aecca4385b70ca0eea24c55b2.png" alt="在这里插入图片描述"></p><blockquote><p><strong>注意：</strong></p><ul><li><code>double(4, 2)</code>表示显示总宽度4位，小数部分显示1位</li></ul></blockquote><hr><h3 id="（三）字符串类型"><a href="#（三）字符串类型" class="headerlink" title="（三）字符串类型"></a>（三）字符串类型</h3><p><img src="https://img-blog.csdnimg.cn/80bf5bfb388a4523875603d4f02820fa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>注意：</strong></p><blockquote><ul><li>char长度固定，varchar长度可变（动态开辟）</li><li>char和varchar表示的是字符的个数，不是字节个数</li><li>blob：存放二进制文本文件数据</li></ul></blockquote><hr><h3 id="（四）日期和时间类型"><a href="#（四）日期和时间类型" class="headerlink" title="（四）日期和时间类型"></a>（四）日期和时间类型</h3><p><img src="https://img-blog.csdnimg.cn/8d88a556e2814ba8b2df77a47a5adb65.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>注意：TIMESTAMP类型与DATETIME的区别</strong></p><blockquote><ul><li>TIMESTAMP取值范围小</li><li>未设置TIMESTAMP的值（或NULL值），自动填充系统当前时间</li><li>TIMESTAMP可使用CURRENT_TIMESTAMP来获取当前时间</li><li>TIMESTAMP有时区的区别</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】Navicat中SQL创建数据库表</title>
      <link href="/posts/97a5cd1f.html"/>
      <url>/posts/97a5cd1f.html</url>
      
        <content type="html"><![CDATA[<h3 id="Navicat中SQL基本操作"><a href="#Navicat中SQL基本操作" class="headerlink" title="Navicat中SQL基本操作"></a>Navicat中SQL基本操作</h3><h4 id="（1）创建数据库"><a href="#（1）创建数据库" class="headerlink" title="（1）创建数据库"></a>（1）创建数据库</h4><p><img src="https://img-blog.csdnimg.cn/4330b3c3fadf4078813cffe089e5ecd2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_11,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e21c5b3025624e60b2ba018b1ae9d3e3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）新建查询"><a href="#（2）新建查询" class="headerlink" title="（2）新建查询"></a>（2）新建查询</h4><p><img src="https://img-blog.csdnimg.cn/85ce5329112b4643abd31101ce6a4144.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_12,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（3）查询界面"><a href="#（3）查询界面" class="headerlink" title="（3）查询界面"></a>（3）查询界面</h4><p><img src="https://img-blog.csdnimg.cn/3949edc2339e47b4bc267c2abb0259c7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（4）注释写法"><a href="#（4）注释写法" class="headerlink" title="（4）注释写法"></a>（4）注释写法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##这是一条单行注释</span><br><span class="line"><span class="comment">-- 这是一条单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/042b52660fd84a11ab7998a1db1eb077.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（5）新建表练习"><a href="#（5）新建表练习" class="headerlink" title="（5）新建表练习"></a>（5）新建表练习</h4><p>创建一张表，存放学生的信息<br>字段包含学号、姓名、年龄、出生年月、班级、联系方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu_info (</span><br><span class="line"><span class="comment">-- 学号(10)显示10位</span></span><br><span class="line">s_id <span class="type">INT</span>(<span class="number">10</span>), </span><br><span class="line"><span class="comment">-- 姓名(10)10个字符</span></span><br><span class="line">s_name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"><span class="comment">-- 年龄</span></span><br><span class="line">s_age <span class="type">INT</span>(<span class="number">3</span>),</span><br><span class="line"><span class="comment">-- 出生年月</span></span><br><span class="line">s_born_date <span class="type">date</span>,</span><br><span class="line"><span class="comment">-- 班级</span></span><br><span class="line">classname <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"><span class="comment">-- 联系方式</span></span><br><span class="line">s_tel <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a39e24890b50460292d439e4caf2975b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f3b7ba49317e43f8b4b304911499aad4.png" alt="在这里插入图片描述"></p><h4 id="（6）查询表的结构"><a href="#（6）查询表的结构" class="headerlink" title="（6）查询表的结构"></a>（6）查询表的结构</h4><p><img src="https://img-blog.csdnimg.cn/f94f11e74b36401297131c4d204db428.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（7）查看表中数据"><a href="#（7）查看表中数据" class="headerlink" title="（7）查看表中数据"></a>（7）查看表中数据</h4><p><img src="https://img-blog.csdnimg.cn/38c50533512f45edb30e4c35593091e0.png" alt="在这里插入图片描述"></p><h4 id="（8）查看建表语句"><a href="#（8）查看建表语句" class="headerlink" title="（8）查看建表语句"></a>（8）查看建表语句</h4><p><img src="https://img-blog.csdnimg.cn/2cfd678c63e2426f9122472e71efe6ef.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `stu_info` (</span><br><span class="line">  `s_id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `s_name` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `s_age` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `s_born_date` <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `classname` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `s_tel` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci</span><br></pre></td></tr></table></figure><p>可以看到建表语句基本一致</p><h4 id="（9）查看建库语句"><a href="#（9）查看建库语句" class="headerlink" title="（9）查看建库语句"></a>（9）查看建库语句</h4><p><img src="https://img-blog.csdnimg.cn/28a6463c0c4b431db3937f207cce2147.png" alt="在这里插入图片描述"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `d_student_info` </span><br><span class="line"><span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL+Navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】SQL语言概述</title>
      <link href="/posts/a1d95bc0.html"/>
      <url>/posts/a1d95bc0.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）SQL语言的五部分"><a href="#（一）SQL语言的五部分" class="headerlink" title="（一）SQL语言的五部分"></a>（一）SQL语言的五部分</h3><h4 id="（1）数据查询语言（DQL）"><a href="#（1）数据查询语言（DQL）" class="headerlink" title="（1）数据查询语言（DQL）"></a>（1）数据查询语言（DQL）</h4><blockquote><ul><li>基本结构select子句，from子句，where子句<h4 id="（2）数据操作语言（DML）"><a href="#（2）数据操作语言（DML）" class="headerlink" title="（2）数据操作语言（DML）"></a>（2）数据操作语言（DML）</h4>对数据的增删改；</li><li>增添：insert</li><li>删除：delete</li><li>修改：updata<h4 id="（3）数据定义语言（DDL）"><a href="#（3）数据定义语言（DDL）" class="headerlink" title="（3）数据定义语言（DDL）"></a>（3）数据定义语言（DDL）</h4>创建、修改、删除（数据库、表、索引、视图、触发器、存储过程、函数）</li><li>创建：create</li><li>修改：alter</li><li>删除：drop<h4 id="（4）数据控制语言（DCL）"><a href="#（4）数据控制语言（DCL）" class="headerlink" title="（4）数据控制语言（DCL）"></a>（4）数据控制语言（DCL）</h4></li><li>授予权限：grant</li><li>移除权限：revoke</li></ul></blockquote><h4 id="（5）事务控制语言（TCL）"><a href="#（5）事务控制语言（TCL）" class="headerlink" title="（5）事务控制语言（TCL）"></a>（5）事务控制语言（TCL）</h4><p>（类似于原子操作）（银行转账问题a-&gt;b +100 ; a -100, b+100 这个过程必须同时成功/失败）</p><blockquote><ul><li>开启事务：start transaction</li><li>提交事务：commit</li><li>回滚事务：rollback</li></ul></blockquote><p><strong><code>注：上述的SQL语言大小写均可</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL概述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MySQL】Mysql、Navicat安装与常用Dos命令</title>
      <link href="/posts/3ef6359d.html"/>
      <url>/posts/3ef6359d.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）数据库系统："><a href="#（一）数据库系统：" class="headerlink" title="（一）数据库系统："></a>（一）数据库系统：</h3><p><img src="https://img-blog.csdnimg.cn/5adf5fcd631b42389c2401b589d0913e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><code>当我们学习数据库时，我们就是数据库管理员，通过数据库管理系统来操纵数据库。</code></p><h3 id="（二）数据库类型"><a href="#（二）数据库类型" class="headerlink" title="（二）数据库类型"></a>（二）数据库类型</h3><ul><li>网状数据库（已被淘汰）</li><li>层次数据库（已被淘汰）</li><li><p>关系型数据库SQL（类似二维表格存储数据）</p><blockquote><ul><li>mysql、Oracle、DB、SQL server</li></ul></blockquote></li><li><p>非关系型数据库NOSQL（键值对存放数据）</p><blockquote><p>MongDB、redis、HBase、Memcached</p></blockquote></li></ul><h3 id="（三）MySQL的优点"><a href="#（三）MySQL的优点" class="headerlink" title="（三）MySQL的优点"></a>（三）MySQL的优点</h3><ul><li>开源</li><li>跨平台</li><li>轻量级</li><li>成本低</li></ul><h3 id="（四）MySQL版本与安装"><a href="#（四）MySQL版本与安装" class="headerlink" title="（四）MySQL版本与安装"></a>（四）MySQL版本与安装</h3><p><a href="https://blog.csdn.net/blue_lll/article/details/98492780">详细安装教程</a></p><h3 id="（五）基本使用"><a href="#（五）基本使用" class="headerlink" title="（五）基本使用"></a>（五）基本使用</h3><h4 id="（1）启动mysql服务"><a href="#（1）启动mysql服务" class="headerlink" title="（1）启动mysql服务"></a>（1）启动mysql服务</h4><p>管理员身份启动cmd 输入<code>net start mysql</code><br><img src="https://img-blog.csdnimg.cn/3dabba4b7545457c9e63ff664730e95f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/66f57e9ffdb342d58c5c84fac971281d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（2）登录操作"><a href="#（2）登录操作" class="headerlink" title="（2）登录操作"></a>（2）登录操作</h4><p><code>mysql -h主机名 -u用户名 -p密码</code><br><img src="https://img-blog.csdnimg.cn/4764a166efba4e71ae5350d040e7f872.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（4）查看数据库"><a href="#（4）查看数据库" class="headerlink" title="（4）查看数据库"></a>（4）查看数据库</h4><p><code>show databases;</code><br><img src="https://img-blog.csdnimg.cn/204f7274a76f478cbc16a14578441ff2.png" alt="在这里插入图片描述"></p><h4 id="（5）创建数据库"><a href="#（5）创建数据库" class="headerlink" title="（5）创建数据库"></a>（5）创建数据库</h4><p><code>create database 数据库名;</code><br><img src="https://img-blog.csdnimg.cn/d56e6465153249bf855436d92a3228db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_12,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（6）使用数据库"><a href="#（6）使用数据库" class="headerlink" title="（6）使用数据库"></a>（6）使用数据库</h4><p><code>use 数据库名;</code><br><img src="https://img-blog.csdnimg.cn/9ce8e94b126645d49ae628105d629bfa.png" alt="在这里插入图片描述"></p><h4 id="（7）显示当前数据库中所有的表"><a href="#（7）显示当前数据库中所有的表" class="headerlink" title="（7）显示当前数据库中所有的表"></a>（7）显示当前数据库中所有的表</h4><p><code>show tables;</code></p><p><img src="https://img-blog.csdnimg.cn/42e7d9da9afc4f6b8f2c968e74c1f449.png" alt="在这里插入图片描述"><br>新建的数据库，还没有表；</p><h4 id="（8）新建表"><a href="#（8）新建表" class="headerlink" title="（8）新建表"></a>（8）新建表</h4><p><code>create table 表名称(列名1 类型名1 列名1属性..., 列名2 类型名2 列名2属性...);</code><br>创建个学生表试试<br><img src="https://img-blog.csdnimg.cn/b63d4d0005f548c2976c46bb653cc915.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（9）查看表的内容"><a href="#（9）查看表的内容" class="headerlink" title="（9）查看表的内容"></a>（9）查看表的内容</h4><p><code>select * from 表名;</code><br><img src="https://img-blog.csdnimg.cn/0ee4a1302a984099a7274e980554ceb5.png" alt="在这里插入图片描述"><br>可以看到是空的，表中还没有插入数据</p><h4 id="（10）查看表结构"><a href="#（10）查看表结构" class="headerlink" title="（10）查看表结构"></a>（10）查看表结构</h4><p><code>desc 表名;</code><br><img src="https://img-blog.csdnimg.cn/a76982a61d3d4673bc7835ff8065d343.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（11）表格插入数据"><a href="#（11）表格插入数据" class="headerlink" title="（11）表格插入数据"></a>（11）表格插入数据</h4><p><code>insert into 表名(列名1, 列名2...) values(数据1, 数据2...);</code><br><img src="https://img-blog.csdnimg.cn/f7887705759b45a082017b32ec1a9b38.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><code>insert into 表名 values(数据1, 数据2...);</code><br><img src="https://img-blog.csdnimg.cn/3bc890d1e70741ac980b931aa2040a40.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><code>insert into 表名 set 列名n = 值n, 列名2 = 值2, ... ;</code><br><img src="https://img-blog.csdnimg.cn/f61712ef9ccd48dea81babb0d0f5afd1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（12）退出数据库"><a href="#（12）退出数据库" class="headerlink" title="（12）退出数据库"></a>（12）退出数据库</h4><p><code>quit</code>或者<code>exit</code>或者<code>\q;</code><br><img src="https://img-blog.csdnimg.cn/c08c7fe1a61a4ffbbb7e069a366210e0.png" alt="在这里插入图片描述"></p><h4 id="（13）停止MySQL服务"><a href="#（13）停止MySQL服务" class="headerlink" title="（13）停止MySQL服务"></a>（13）停止MySQL服务</h4><p>管理员权限下cmd中输入<code>net start mysql</code><br><img src="https://img-blog.csdnimg.cn/75ef50966ae549afbe855818f695804a.png" alt="在这里插入图片描述"></p><h4 id="（六）图形化界面（Navicat-for-MySQL）"><a href="#（六）图形化界面（Navicat-for-MySQL）" class="headerlink" title="（六）图形化界面（Navicat for MySQL）"></a>（六）图形化界面（Navicat for MySQL）</h4><p>navicat可以帮助我们提高工作效率；</p><p><a href="https://navicat.com.cn/download/navicat-for-mysql">Navicat下载链接</a><br><img src="https://img-blog.csdnimg.cn/ee05eb6cf79a4ff29614c31f44cb6036.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="（1）创建链接MySQL"><a href="#（1）创建链接MySQL" class="headerlink" title="（1）创建链接MySQL"></a>（1）创建链接MySQL<img src="https://img-blog.csdnimg.cn/06e74c84cfdc41d7b7e83f1b61ebf623.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></h4><p><img src="https://img-blog.csdnimg.cn/e505402747044da9b602390c85a67024.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/8c7efb8a428e4f28b57d2f473bd62c54.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>双击该链接，海豚图标变成绿色表示连接上了mysql服务器<br><img src="https://img-blog.csdnimg.cn/5e47608896054719933f59fe68862418.png" alt="在这里插入图片描述"><br>我们来看看刚才创建的mydb中的表格数据<br><img src="https://img-blog.csdnimg.cn/d06aa3b60b9645ac8c034b74c7f03782.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL+Navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】bash命令解析器</title>
      <link href="/posts/7c04683c.html"/>
      <url>/posts/7c04683c.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）bash流程框架图："><a href="#（一）bash流程框架图：" class="headerlink" title="（一）bash流程框架图："></a>（一）bash流程框架图：</h3><p><img src="https://img-blog.csdnimg.cn/c4ca453a173944859163447013e318d7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAY29kZS0wMTY=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="（二）代码实现"><a href="#（二）代码实现" class="headerlink" title="（二）代码实现"></a>（二）代码实现</h3><ul><li>mybash.h</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYBASH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYBASH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/utsname.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">returncode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//地址空</span></span><br><span class="line">    ADDR_NULL = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">//退出 1</span></span><br><span class="line">    EXIT,</span><br><span class="line">    <span class="comment">//cd 2</span></span><br><span class="line">    MYCD,</span><br><span class="line">    <span class="comment">//exec 3</span></span><br><span class="line">    EXEC</span><br><span class="line">&#125;returncode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出提示符信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OutPutInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从键盘获取命令</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">GetCmd</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令解析</span></span><br><span class="line">returncode <span class="title function_">CmdResolve</span><span class="params">(<span class="type">char</span>* cmd, <span class="type">char</span>* cmdbuff[])</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程替换</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ChildExec</span><span class="params">(<span class="type">char</span>* cmdbuff[], <span class="type">const</span> <span class="type">char</span>* cmd)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理僵尸进程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Zombie</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否在后台运行</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsBack</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* cmdbuff)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切换目录</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Mycd</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>mybash.c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mybash.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出提示符信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OutPutInfo</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// struct passwd</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// char *pw_name; /* username */</span></span><br><span class="line"><span class="comment">// char *pw_passwd; /* user password */</span></span><br><span class="line"><span class="comment">// uid_t pw_uid; /* user ID */</span></span><br><span class="line"><span class="comment">// gid_t pw_gid; /* group ID */</span></span><br><span class="line"><span class="comment">// char *pw_gecos; /* user information */</span></span><br><span class="line"><span class="comment">// char *pw_dir; /* home directory */</span></span><br><span class="line"><span class="comment">// char *pw_shell; /* shell program */</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="type">char</span> flg = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">passwd</span>* <span class="title">pw</span> =</span> getpwuid(getuid());</span><br><span class="line"><span class="keyword">if</span>(pw == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是普通用户还是root用户</span></span><br><span class="line"><span class="keyword">if</span>(pw-&gt;pw_uid == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">flg = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*普通用户：</span></span><br><span class="line"><span class="comment">*用户名@主机名:当前工作路径名$</span></span><br><span class="line"><span class="comment">*root用户</span></span><br><span class="line"><span class="comment">*root@主机名:当前工作路径名#</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//获取主机名</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">utsname</span> <span class="title">buff</span>;</span></span><br><span class="line">uname(&amp;buff);</span><br><span class="line"><span class="comment">//获取当前工作路径的绝对路径</span></span><br><span class="line"><span class="type">char</span> pathname[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">getcwd(pathname, <span class="number">127</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//家目录的长度</span></span><br><span class="line"><span class="type">int</span> len_homepath = <span class="built_in">strlen</span>(pw-&gt;pw_dir);</span><br><span class="line"><span class="type">char</span>* p = pathname + len_homepath;</span><br><span class="line"><span class="comment">//如果当前的工作路径中包含家目录，就使用&quot;~&quot;替换前面的家目录部分</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strncmp</span>(pathname, pw-&gt;pw_dir, len_homepath) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(pathname, <span class="number">0</span>, len_homepath);</span><br><span class="line"><span class="built_in">strcat</span>(pathname, <span class="string">&quot;~&quot;</span>);</span><br><span class="line"><span class="built_in">strcat</span>(pathname, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s@%s:%s%c &quot;</span>,pw-&gt;pw_name,buff.nodename, pathname,flg);</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从键盘获取命令</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">GetCmd</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* cmd = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">128</span>);</span><br><span class="line"><span class="built_in">memset</span>(cmd, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>) * <span class="number">128</span>);</span><br><span class="line">fgets(cmd, <span class="number">127</span>, <span class="built_in">stdin</span>);</span><br><span class="line">cmd[<span class="built_in">strlen</span>(cmd) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//去掉&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cmd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//命令解析</span></span><br><span class="line">returncode <span class="title function_">CmdResolve</span><span class="params">(<span class="type">char</span>* cmd, <span class="type">char</span>* cmdbuff[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cmd == <span class="literal">NULL</span> || cmdbuff == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ADDR_NULL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分割指令</span></span><br><span class="line"><span class="type">char</span> *s = strtok(cmd, <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (s != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">cmdbuff[i++] = s;</span><br><span class="line">s = strtok(<span class="literal">NULL</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后一个置空</span></span><br><span class="line">cmdbuff[i] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmdbuff[<span class="number">0</span>], <span class="string">&quot;exit&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//退出</span></span><br><span class="line"><span class="keyword">return</span> EXIT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(cmdbuff[<span class="number">0</span>], <span class="string">&quot;cd&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//切换目录</span></span><br><span class="line"><span class="keyword">return</span> MYCD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//进程替换</span></span><br><span class="line"><span class="keyword">return</span> EXEC;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程替换</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ChildExec</span><span class="params">(<span class="type">char</span>* cmdbuff[], <span class="type">const</span> <span class="type">char</span>* cmd)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cmdbuff == <span class="literal">NULL</span> || cmd == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> pathname[<span class="number">128</span>] = &#123;<span class="string">&quot;/home/jiege/mybash/bin/&quot;</span>&#125;;</span><br><span class="line"><span class="built_in">strcat</span>(pathname, cmdbuff[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是前台/后台运行</span></span><br><span class="line"><span class="type">int</span> ret = IsBack(cmd);<span class="comment">//默认前台0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;fork err&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">execv(pathname, cmdbuff);</span><br><span class="line">perror(<span class="string">&quot;command not found&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//前台运行</span></span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后台运行通过注册的信号zombie去处理僵尸进程</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理后台的僵尸进程</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Zombie</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否在后台运行</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsBack</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* cmd)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cmd == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strstr</span>(cmd, <span class="string">&quot;&amp;&quot;</span>) != <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切换目录</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Mycd</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(path == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(chdir(path) == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;cd err&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>main.c</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mybash.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//处理后台的僵尸进程</span></span><br><span class="line">signal(SIGCHLD, Zombie);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* cmd = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//输出提示符信息</span></span><br><span class="line">OutPutInfo();</span><br><span class="line"><span class="comment">//从键盘获取命令</span></span><br><span class="line">cmd = GetCmd();</span><br><span class="line"><span class="comment">//存放解析后的参数</span></span><br><span class="line"><span class="type">char</span>* cmdbuff[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">//命令解析</span></span><br><span class="line">returncode ret = CmdResolve(cmd, cmdbuff);</span><br><span class="line"><span class="keyword">if</span>(ret == EXIT)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(cmd);</span><br><span class="line">cmd = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ret == MYCD)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//切换路径</span></span><br><span class="line">Mycd(cmdbuff[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">free</span>(cmd);</span><br><span class="line">cmd = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//空地址</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ret == ADDR_NULL)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(cmd);</span><br><span class="line">cmd = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//进程替换</span></span><br><span class="line">ChildExec(cmdbuff, cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>makefile</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">objects=main.o mybash.o </span><br><span class="line"></span><br><span class="line"><span class="section">mybash:<span class="variable">$(objects)</span></span></span><br><span class="line">gcc -o mybash <span class="variable">$(objects)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(objects)</span>: mybash.h main.c mybash.c</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f mybash <span class="variable">$(objects)</span></span><br></pre></td></tr></table></figure><h3 id="（三）最终项目文件结构"><a href="#（三）最终项目文件结构" class="headerlink" title="（三）最终项目文件结构"></a>（三）最终项目文件结构</h3><p><img src="https://img-blog.csdnimg.cn/e1c7affbd08f481589d44f70060ea991.png" alt="在这里插入图片描述"></p><p>源码已上传github<a href="https://github.com/HuTaoHub/mybash.git">https://github.com/HuTaoHub/mybash.git</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux+bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】进程替换</title>
      <link href="/posts/d68fca0a.html"/>
      <url>/posts/d68fca0a.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）进程替换"><a href="#（一）进程替换" class="headerlink" title="（一）进程替换"></a>（一）进程替换</h3><ul><li>进程替换不会创建新的进程，进程PCB未发生改变，进程实体（数据代码内容）被替换</li><li>进程替换成功后不会执行替换函数下的代码，失败后会执行</li><li>进程替换成功不返回，失败后返回-1</li></ul><hr><h3 id="（二）环境变量"><a href="#（二）环境变量" class="headerlink" title="（二）环境变量"></a>（二）环境变量</h3><ul><li>环境变量的作用：</li></ul><blockquote><p>当使用shell来运行一个程序时，若没有加绝对路径，系统先会在当前路径下寻找该程序，若没找到就会去环境变量中去寻找该程序。都没找到就会报没有该指令的错误。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jiege@ubuntu:~/Desktop/code/c$ <span class="built_in">pwd</span></span><br><span class="line">/home/jiege/Desktop/code/c</span><br><span class="line">jiege@ubuntu:~/Desktop/code/c$ <span class="built_in">which</span> gcc</span><br><span class="line">/usr/bin/gcc</span><br><span class="line">jiege@ubuntu:~/Desktop/code/c$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">/home/jiege/tools/nodejs/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br><span class="line">jiege@ubuntu:~/Desktop/code/c$ </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>查看所有的环境变量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> arg, <span class="type">char</span>* argv[], <span class="type">char</span>* envp[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(envp[i] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, envp[i++]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>结果：</strong></p><p><img src="envp.png" alt=""></p></blockquote><hr><h3 id="（三）进程替换API-unistd-h"><a href="#（三）进程替换API-unistd-h" class="headerlink" title="（三）进程替换API(unistd.h)"></a>（三）进程替换API<code>(unistd.h)</code></h3><blockquote><p>exec族函数参数极难记忆和分辨，函数名中的字符会给我们一些帮助：</p><ul><li>l : 使用参数列表</li><li>p：使用文件名，并从PATH环境进行寻找可执行文件</li><li>v：应先构造一个指向各参数的指针数组，然后将该数组的地址作为这些函数的参数。</li><li>e：多了envp[]数组，使用新的环境变量代替调用进程的环境变量</li></ul></blockquote><h4 id="（1）系统调用API"><a href="#（1）系统调用API" class="headerlink" title="（1）系统调用API"></a>（1）系统调用API</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="title function_">execve</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">char</span> *<span class="type">const</span> argv[],</span></span><br><span class="line"><span class="params">                  <span class="type">char</span>  *<span class="type">const</span> envp[])</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（2）库函数API"><a href="#（2）库函数API" class="headerlink" title="（2）库函数API"></a>（2）库函数API</h4><ul><li><p><code>int execl(const char* pathname, const char* arg, .../*(char*)NULL*/);</code></p><blockquote><p><strong>参数解释：</strong><code>目标程序的进程替换</code></p><ul><li>pathname：目标程序的路径</li><li>arg：执行这个程序的方式</li><li>返回值：失败-1</li><li>例如：<code>execl(&quot;/bin/ls&quot;, &quot;ls&quot; &quot;-a&quot;, &quot;-l&quot;, (char*)NULL);</code></li></ul></blockquote></li></ul><hr><ul><li><p><code>int execlp(const char *file, const char *arg, .../* (char*) NULL */);</code></p><blockquote><p><strong>参数解释：</strong><code>该函数会在环境变量的路径中查找file</code></p><ul><li>file：要执行的目标程序</li><li>arg：传给目标程序的参数</li><li>返回值：失败-1</li><li>例如：<code>execlp(&quot;ls&quot;, &quot;ls&quot;, &quot;-a&quot;, &quot;-l&quot;, (char*)NULL);</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">execlp(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-a&quot;</span>, <span class="string">&quot;-l&quot;</span>, (<span class="type">char</span>*)<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;world\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jiege@ubuntu:~/Desktop/test$ vim main.c</span><br><span class="line">jiege@ubuntu:~/Desktop/test$ gcc -o main main.c</span><br><span class="line">jiege@ubuntu:~/Desktop/test$ ./main</span><br><span class="line">hello</span><br><span class="line">总用量 24</span><br><span class="line">-rwxrwxr-x 1 jiege jiege 16736 12月  9 20:12 main</span><br><span class="line">-rw-rw-r-- 1 jiege jiege   148 12月  9 20:12 main.c</span><br><span class="line">jiege@ubuntu:~/Desktop/test$ </span><br></pre></td></tr></table></figure></blockquote></li></ul><hr><ul><li><p><code>int execle(const char *pathname, const char *arg, .../* (char*) NULL, char *const envp[] */);</code></p><blockquote><p><strong>参数解释：</strong><code>给这个目标进程传入指定envp的环境变量</code></p><ul><li><p>pathname：目标程序的路径</p></li><li><p>arg：替换后如何执行的方式，envp表示要导入的环境变量</p></li><li><p>例：</p><ul><li>程序myenv输出未设置环境变量的变量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;myenvp: %s\n&quot;</span>, getenv(<span class="string">&quot;MYENVP&quot;</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="image-20211209231841948.png" alt=""></p><ul><li>程序b再使用进程替换给a程序传入环境变量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* buff[] = &#123;<span class="string">&quot;MYENVP=/home/jiege/awei&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">execle(<span class="string">&quot;./myenv&quot;</span>, <span class="string">&quot;myenv&quot;</span>, <span class="literal">NULL</span>, buff);</span><br><span class="line">perror(<span class="string">&quot;execle err&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><p><img src="image-20211209232624866.png" alt=""></p></li></ul><p>  <code>注意：envp数组前的参数是NULL，envp数组最后一个元素为NULL，并且该操作会覆盖原环境变量的值</code></p></blockquote></li></ul><hr><ul><li><p><code>int execv(const char *pathname, char *const argv[]);</code></p><blockquote><p><strong>参数详解：</strong></p><ul><li>pathname：目标程序路径名<code>/usr/...</code></li><li>argv：将所有的执行方式存放在argv指针数组中</li><li>例：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span>* buff[] = &#123;<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">execv(<span class="string">&quot;/usr/bin/ls&quot;</span>, buff);</span><br><span class="line">perror(<span class="string">&quot;execv err&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：</li></ul><p><img src="image-20211209234834509.png" alt=""></p></blockquote></li></ul><hr><ul><li><p><code>int execvp(const char *file, char *const argv[]);</code></p><blockquote><p><strong>参数详解：</strong><code>给目标程序传入参数</code></p><ul><li>file：被执行的目标程序</li><li><p>argv：传给file程序的参数</p></li><li><p>例：使用程序a中替换成程序b，b将得到的参数打印</p><ul><li><p>a.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A start execvp\n&quot;</span>);</span><br><span class="line"><span class="type">char</span>* argv[] = &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line"></span><br><span class="line">execvp(<span class="string">&quot;./b&quot;</span>, argv);</span><br><span class="line">perror(<span class="string">&quot;execvp err&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>b.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(argv[i] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, argv[i++]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>结果：</li></ul><p><img src="image-20211210000106262.png" alt=""></p></blockquote></li></ul><hr><ul><li><p><code>int execvpe(const char *file, char *const argv[], char *const envp[]);</code></p><blockquote><p><strong>参数详解：</strong></p><ul><li>file：目标程序</li><li>argv：函数参数</li><li>envp：环境变量</li></ul></blockquote></li></ul><h3 id="（四）进程替换和fork的结合使用案例"><a href="#（四）进程替换和fork的结合使用案例" class="headerlink" title="（四）进程替换和fork的结合使用案例"></a>（四）进程替换和fork的结合使用案例</h3><ul><li>一个例子：就比如bash窗口中输入<code>ps -f</code>指令，查看当前进程的完整格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jiege@ubuntu:~$ ps -f</span><br><span class="line">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class="line">jiege       2680    2669  0 14:28 pts/0    00:00:00 bash</span><br><span class="line">jiege      11269    2680  0 17:07 pts/0    00:00:00 ps -f</span><br><span class="line">jiege@ubuntu:~$ </span><br></pre></td></tr></table></figure><ul><li><p>分析：</p><blockquote><p>可以看到<code>ps -f</code>这个进程的进程号PID是11269，它的父进程的进程号PPID是2680；而2680就是bash这个进程。</p></blockquote></li><li><p>结论：</p><blockquote><p>bash就是这个shell窗口的进程的名字，当你输入<code>ps -f</code>时，bash这个进程就fork一个子进程，子进程进程替换执行ps -f命令，将此时的结果输出给父进程bash，父进程输出打印结果</p></blockquote></li></ul><h3 id="（五）进程替换测试"><a href="#（五）进程替换测试" class="headerlink" title="（五）进程替换测试"></a>（五）进程替换测试</h3><ul><li>代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pid of main: %d\n&quot;</span>, getpid());</span><br><span class="line"></span><br><span class="line"><span class="comment">//进程替换</span></span><br><span class="line">execl(<span class="string">&quot;/bin/ps&quot;</span>, <span class="string">&quot;ps&quot;</span>, <span class="string">&quot;-f&quot;</span>, (<span class="type">char</span>*)<span class="literal">NULL</span>);</span><br><span class="line">perror(<span class="string">&quot;exec err&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jiege@ubuntu:~/Desktop/code/exec$ ./main</span><br><span class="line">pid of main: 11556</span><br><span class="line">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class="line">jiege       9970    2669  0 14:28 pts/1    00:00:00 bash</span><br><span class="line">jiege      11556    9970  0 17:50 pts/1    00:00:00 ps -f</span><br><span class="line">jiege@ubuntu:~/Desktop/code/exec$ </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>结果分析：</p><blockquote><ul><li>在bash中执行./main时，bash进程fork出子进程，子进程替换成main程序，main程序中再进行进程替换成ps -f程序</li></ul></blockquote></li></ul><hr><h3 id="（六）进程替换API总结"><a href="#（六）进程替换API总结" class="headerlink" title="（六）进程替换API总结"></a>（六）进程替换API总结</h3><div class="table-container"><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">参数传递形式</th><th style="text-align:center">路径</th><th style="text-align:center">是否导入环境变量</th></tr></thead><tbody><tr><td style="text-align:center">execl</td><td style="text-align:center">列表</td><td style="text-align:center">需要可执行程序路径</td><td style="text-align:center">不导入 使用当前环境变量</td></tr><tr><td style="text-align:center">execlp</td><td style="text-align:center">列表</td><td style="text-align:center">默认在环境变量中找</td><td style="text-align:center">不导入 使用当前环境变量</td></tr><tr><td style="text-align:center">execle</td><td style="text-align:center">列表</td><td style="text-align:center">需要可执行程序路径</td><td style="text-align:center">导入 使用导入的环境变量</td></tr><tr><td style="text-align:center">execv</td><td style="text-align:center">数组</td><td style="text-align:center">需要可执行程序路径</td><td style="text-align:center">不导入 使用当前环境变量</td></tr><tr><td style="text-align:center">execvp</td><td style="text-align:center">数组</td><td style="text-align:center">默认在环境变量中找</td><td style="text-align:center">不导入 使用当前环境变量</td></tr><tr><td style="text-align:center">execve</td><td style="text-align:center">数组</td><td style="text-align:center">需要可执行程序路径</td><td style="text-align:center">导入 使用导入的环境变量</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进程替换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】库函数和系统调用</title>
      <link href="/posts/38d4ff6.html"/>
      <url>/posts/38d4ff6.html</url>
      
        <content type="html"><![CDATA[<h3 id="（一）系统调用和库函数"><a href="#（一）系统调用和库函数" class="headerlink" title="（一）系统调用和库函数"></a>（一）系统调用和库函数</h3><p>概念：</p><ul><li>系统调用：在内核空间中实现的函数，内核空间中执行（内核态）</li><li>库函数：在函数库中实现的函数，用户空间执行（用户态）</li></ul><h3 id="（二）用户空间和内核空间"><a href="#（二）用户空间和内核空间" class="headerlink" title="（二）用户空间和内核空间"></a>（二）用户空间和内核空间</h3><p><img src="image-20211209130538579.png" alt=""></p><h3 id="（三）当调用系统调用都发生了什么？？"><a href="#（三）当调用系统调用都发生了什么？？" class="headerlink" title="（三）当调用系统调用都发生了什么？？"></a>（三）当调用系统调用都发生了什么？？</h3><p>当一个进程在用户空间执行系统调用时，将系统调用号写入eax寄存器并触发0x80中断，此时系统对该程序进行现场保护，CPU停止执行该进程用户空间的代码，进程会从运行态——&gt;阻塞态，系统会让内核执行，内核通过读取eax寄存器中的调用号<code>查询系统调用表</code>，来执行对应的系统调用的内核代码（可能会访问PCB中的信息），内核代码执行完毕后，会进行现场恢复。</p><blockquote><p>通过调用open系统调用加深理解：</p><ul><li>用户空间代码调用open系统调用</li><li>将系统调用号写入eax寄存器中，并触发0x80中断</li><li>系统对用户空间代码数据进行现场保护</li><li>进程状态从运行态转成阻塞态</li><li>内核从eax得到系统调用号，内核通过查询系统调用表得到内核代码（内核代码执行会访问用户空间的文件表，查询最小的文件描述符，再进行对open的文件分配文件描述符，最终返回写入用户空间的文件表中）</li><li>内核代码执行完毕，恢复现场</li></ul></blockquote><h3 id="（四）printf库函数和write系统调用"><a href="#（四）printf库函数和write系统调用" class="headerlink" title="（四）printf库函数和write系统调用"></a>（四）printf库函数和write系统调用</h3><p>众所周知，printf是c库函数的打印函数，printf函数有一个输出缓冲区，每次将输出的数据暂时存放在这个缓冲区中，当遇到<code>\n</code>或者缓冲区满或者fflush(stdout)来刷出缓冲区中的内容时，<code>就会调用write系统调用将缓冲区中的数据输出在屏幕上。</code></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统调用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】C++多态</title>
      <link href="/posts/3cbc9ca7.html"/>
      <url>/posts/3cbc9ca7.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是多态"><a href="#1-什么是多态" class="headerlink" title="1.什么是多态"></a>1.什么是多态</h3><p><strong>答：（要点）</strong><br>（1）静多态 早绑定 函数重载、模板（编译时期的多态）<br>（2）动多态 晚绑定 主要表现在继承中的多态 运行时期确定</p><p><strong>详细回答：</strong></p><p>C++中多态分为两种，静态多态和动态多态。静态多态主要是指函数重载、模板的多态，在编译阶段就已经确定该调用那个函数、确定模板的参数类型，也称为早绑定；动态多态主要是指在运行期间发生的多多态，也称晚绑定，主要是在继承上的多态，由于子类重写父类的虚函数，即子类的成员方法指针覆盖了父类的成员方法指针，最后使用父类指针或者引用调用虚函数时发生多态。</p><h3 id="2-动多态的必须条件，动多态的调用过程"><a href="#2-动多态的必须条件，动多态的调用过程" class="headerlink" title="2.动多态的必须条件，动多态的调用过程"></a>2.动多态的必须条件，动多态的调用过程</h3><p><strong>答：</strong></p><p><strong>动多态的必须条件：</strong></p><ol><li>基类必须有虚函数，派生类重写父类虚函数；</li><li>其次有基类指针或者基类引用指向派生类对象；</li><li>最后该指针或者引用调用虚函数。</li><li>对象必须完整（构造之后，析构之前）</li></ol><p><strong>动多态的调用过程：</strong></p><ul><li>指针/引用调用虚函数</li><li>通过vfptr（虚函数指针）找到vftable（虚函数表）</li><li>在vftable（虚函数表中）找到对应的函数指针</li><li>调用该函数指针</li></ul><h3 id="3-什么情况下析构函数必须写成虚函数"><a href="#3-什么情况下析构函数必须写成虚函数" class="headerlink" title="3.什么情况下析构函数必须写成虚函数"></a>3.什么情况下析构函数必须写成虚函数</h3><p><strong>答：</strong>父类指针指向堆上的子类对象，delete父类指针的时候，防止未调用子类的析构函数，父类的析构函数必须写成虚函数。</p><p>（基类中最好要有虚函数，防止基类指针指向子类对象时候，指针指向位置不是子类的开始位置—）</p><h3 id="4-静态函数、构造函数、析构函数能不能写成虚函数"><a href="#4-静态函数、构造函数、析构函数能不能写成虚函数" class="headerlink" title="4.静态函数、构造函数、析构函数能不能写成虚函数"></a>4.静态函数、构造函数、析构函数能不能写成虚函数</h3><p><strong>静态函数：不可以</strong></p><p>（1）静态函数不依赖类对象存在，加上virtual没有意义</p><p>（2）静态函数没有this指针，通过this指针可以访问虚函数指针，通过虚函数表访问函数指针；</p><p>​            <strong>依赖关如下：</strong>this -&gt; vfptr -&gt; vftable -&gt;virtual function</p><p><strong>构造函数：不可以</strong></p><ol><li>虚函数的执行依赖于虚函数表。而虚函数表在构造函数中进行初始化，即让vfptr指向正确的虚函数表，而在构造对象期间，虚函数表还未初始化，无法找到构造函数的地址。</li><li>虚函数是在运行期间确定实际类型的，而构造一个对象的时候必须确定对象的类型（编译期间），产生矛盾。</li></ol><h3 id="5-虚函数能不能被处理成内联"><a href="#5-虚函数能不能被处理成内联" class="headerlink" title="5.虚函数能不能被处理成内联"></a>5.虚函数能不能被处理成内联</h3><p><strong>答：</strong>不能，是否将函数处理成内联取决于编译器，在编译期间是否将函数处理成内联函数（展开后，没有该函数地址，不用进入函数，直接执行函数体），而在运行期间，虚函数的确定需要函数的地址，此时该函数已经没有地址。</p><h3 id="6-什么是虚函数表，产生时间，存放位置，什么时候把vfptr写入对象中"><a href="#6-什么是虚函数表，产生时间，存放位置，什么时候把vfptr写入对象中" class="headerlink" title="6.什么是虚函数表，产生时间，存放位置，什么时候把vfptr写入对象中"></a>6.什么是虚函数表，产生时间，存放位置，什么时候把vfptr写入对象中</h3><p><strong>答：</strong></p><p><strong>虚函数表：</strong>就是用来存放虚函数的地址</p><p><strong>产生时间：</strong>编译期间，存放在.rodata段</p><p><strong>构造对象时候将vfptr写入对象。</strong></p><h3 id="7-什么是RTTI，RTTI的产生时间和存放位置"><a href="#7-什么是RTTI，RTTI的产生时间和存放位置" class="headerlink" title="7.什么是RTTI，RTTI的产生时间和存放位置"></a>7.什么是RTTI，RTTI的产生时间和存放位置</h3><p><strong>RTTI:</strong>运行期间类型标识，RTTI是对象类型结构体的一个指针，指向对象类型的结构体；</p><p>RTTI在编译时期产生，产生之后将地址写入vftable（虚函数表），存放在.rodata段；</p><h3 id="8-类与类的关系"><a href="#8-类与类的关系" class="headerlink" title="8.类与类的关系"></a>8.类与类的关系</h3><p><strong>答：</strong></p><p>（1）组合关系：一个类是另一个类的一部分<br>（2）代理关系：一个类的接口是另一个类的接口的一部分<br>（3）继承关系：一个类是另一个类的一种</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++多态 RTTI </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"code-016","short_name":"code-016","theme_color":"#efcdd0","background_color":"#efcdd0","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* 鼠标图标 */  body {    cursor: url("/img/default.cur"), auto;  }  a,  [type="button"]:not(:disabled),  [type="reset"]:not(:disabled),  [type="submit"]:not(:disabled),  button:not(:disabled) {    cursor: url("/img/pointer.cur"), auto !important;  }  /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/font_3972896_h8tze2p4k5.css"/>
      <url>/css/font_3972896_h8tze2p4k5.css</url>
      
        <content type="html"><![CDATA[@font-face {  font-family: "iconfont"; /* Project id 3972896 */  src: url('//at.alicdn.com/t/c/font_3972896_h8tze2p4k5.woff2?t=1679614486420') format('woff2'),       url('//at.alicdn.com/t/c/font_3972896_h8tze2p4k5.woff?t=1679614486420') format('woff'),       url('//at.alicdn.com/t/c/font_3972896_h8tze2p4k5.ttf?t=1679614486420') format('truetype');}.iconfont {  font-family: "iconfont" !important;  font-size: 16px;  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.icon-tanghulu:before {  content: "\e638";}.icon-fudai:before {  content: "\e639";}.icon-fuguizhu:before {  content: "\e63a";}.icon-lachang:before {  content: "\e63b";}.icon-rili:before {  content: "\e63c";}.icon-bianpao:before {  content: "\e62a";}.icon-niangao:before {  content: "\e62b";}.icon-baozi1:before {  content: "\e62c";}.icon-jinjie:before {  content: "\e62d";}.icon-huoguo:before {  content: "\e62e";}.icon-hongbao:before {  content: "\e62f";}.icon-zhongguojie:before {  content: "\e630";}.icon-tangyuan1:before {  content: "\e631";}.icon-jiaozi:before {  content: "\e632";}.icon-changmian:before {  content: "\e633";}.icon-denglong:before {  content: "\e634";}.icon-fu:before {  content: "\e635";}.icon-nvhai:before {  content: "\e636";}.icon-nanhai:before {  content: "\e637";}.icon-red_envelope:before {  content: "\e601";}.icon-tangerine:before {  content: "\e602";}.icon-tangyuan:before {  content: "\e603";}.icon-spring:before {  content: "\e604";}.icon-baozi:before {  content: "\e605";}.icon-boy:before {  content: "\e607";}.icon-festival:before {  content: "\e608";}.icon-firecracker:before {  content: "\e60a";}.icon-fish:before {  content: "\e60b";}.icon-chinese_lion:before {  content: "\e60c";}.icon-girl:before {  content: "\e60d";}.icon-lantern:before {  content: "\e60e";}.icon-knot:before {  content: "\e60f";}.icon-lucky_coin:before {  content: "\e610";}.icon-plum_flower:before {  content: "\e611";}.icon-dragon_chen:before {  content: "\e612";}.icon-dog_xu:before {  content: "\e613";}.icon-dog:before {  content: "\e614";}.icon-goat:before {  content: "\e615";}.icon-goat_wei:before {  content: "\e616";}.icon-dragon:before {  content: "\e617";}.icon-horse:before {  content: "\e618";}.icon-monkey_shen:before {  content: "\e619";}.icon-ox_chou:before {  content: "\e61a";}.icon-monkey:before {  content: "\e61b";}.icon-horse_wu:before {  content: "\e61c";}.icon-ox:before {  content: "\e61d";}.icon-rabbit_mao:before {  content: "\e61e";}.icon-rabbit:before {  content: "\e61f";}.icon-rat_zi:before {  content: "\e620";}.icon-rat:before {  content: "\e621";}.icon-rooster_you:before {  content: "\e622";}.icon-rooster:before {  content: "\e623";}.icon-snake_si:before {  content: "\e624";}.icon-tiger_yin:before {  content: "\e625";}.icon-snake:before {  content: "\e626";}.icon-tiger:before {  content: "\e627";}.icon-boar:before {  content: "\e628";}.icon-boar_hai:before {  content: "\e629";}.icon-bilibili1:before {  content: "\e609";}.icon-weixin:before {  content: "\e64b";}.icon-QQ:before {  content: "\e667";}.icon-bilibili:before {  content: "\e606";}.icon-maomaojiaoyi:before {  content: "\e775";}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/runtime.min.css"/>
      <url>/css/runtime.min.css</url>
      
        <content type="html"><![CDATA[div#runtime{width:180px;margin:auto;color:#fff;padding-inline:5px;border-radius:10px;background-color:rgba(0,0,0,.7)}#workboard{font-size:12px}[data-theme=dark] div#runtime{color:#28b4c8;box-shadow:0 0 5px rgba(28,69,218,.71);animation:flashlight 1s linear infinite alternate}#ghbdages .github-badge img{height:20px}@-moz-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-webkit-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-o-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!(function (c) {  var l,    h,    a,    t,    i,    v =      '<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',    o = (o = document.getElementsByTagName("script"))[o.length - 1].getAttribute("data-injectcss"),    p = function (c, l) {      l.parentNode.insertBefore(c, l);    };  if (o && !c.__iconfont__svg__cssinject__) {    c.__iconfont__svg__cssinject__ = !0;    try {      document.write(        "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"      );    } catch (c) {      console && console.log(c);    }  }  function d() {    i || ((i = !0), a());  }  function m() {    try {      t.documentElement.doScroll("left");    } catch (c) {      return void setTimeout(m, 50);    }    d();  }  (l = function () {    var c,      l = document.createElement("div");    (l.innerHTML = v),      (v = null),      (l = l.getElementsByTagName("svg")[0]) &&        (l.setAttribute("aria-hidden", "true"),        (l.style.position = "absolute"),        (l.style.width = 0),        (l.style.height = 0),        (l.style.overflow = "hidden"),        (l = l),        (c = document.body).firstChild ? p(l, c.firstChild) : c.appendChild(l));  }),    document.addEventListener      ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)        ? setTimeout(l, 0)        : ((h = function () {            document.removeEventListener("DOMContentLoaded", h, !1), l();          }),          document.addEventListener("DOMContentLoaded", h, !1))      : document.attachEvent &&        ((a = l),        (t = c.document),        (i = !1),        m(),        (t.onreadystatechange = function () {          "complete" == t.readyState && ((t.onreadystatechange = null), d());        }));})(window);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.min.js"/>
      <url>/js/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var t=new Date("03/23/2023 00:00:00");now.setTime(now.getTime()+250);var e=(now-t)/1e3/60/60/24,a=Math.floor(e),n=(now-t)/1e3/60/60-24*a,r=Math.floor(n);1==String(r).length&&(r="0"+r);var s=(now-t)/1e3/60-1440*a-60*r,i=Math.floor(s);1==String(i).length&&(i="0"+i);var o=(now-t)/1e3-86400*a-3600*r-60*i,l=Math.round(o);1==String(l).length&&(l="0"+l);let g="";g=r<18&&r>=9?`<img class='boardsign' src='' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`:`<img class='boardsign' src=''><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=g)}setInterval((()=>{createtime()}),250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/coin/coin.css"/>
      <url>/css/coin/coin.css</url>
      
        <content type="html"><![CDATA[.tip-button {  border: 0;  border-radius: 0.25rem;  cursor: pointer;  font-size: 20px;  font-weight: 600;  height: 2.6rem;  margin-bottom: -4rem;  outline: 0;  position: relative;  top: 0;  transform-origin: 0% 100%;  transition: transform 50ms ease-in-out;  width: auto;  -webkit-tap-highlight-color: transparent;}.tip-button:active {  transform: rotate(4deg);}.tip-button.clicked {  animation: 150ms ease-in-out 1 shake;  pointer-events: none;}.tip-button.clicked .tip-button__text {  opacity: 0;  transition: opacity 100ms linear 200ms;}.tip-button.clicked::before {  height: 0.5rem;  width: 60%;  background: $button-hover-color;}.tip-button.clicked .coin {  transition: margin-bottom 1s linear 200ms;  margin-bottom: 0;}.tip-button.shrink-landing::before {  transition: width 200ms ease-in;  width: 0;}.tip-button.coin-landed::after {  opacity: 1;  transform: scale(1);  transform-origin: 50% 100%;}.tip-button.coin-landed .coin-wrapper {  background: radial-gradient(circle at 35% 97%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(      circle at 45% 92%,      rgba(3, 16, 50, 0.4) 0.04rem,      transparent 0.02rem    ), radial-gradient(circle at 55% 98%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at        65% 96%, rgba(3, 16, 50, 0.4) 0.06rem, transparent 0.06rem);  background-position: center bottom;  background-size: 100%;  bottom: -1rem;  opacity: 0;  transform: scale(2) translateY(-10px);}.tip-button__text {  color: #fff;  margin-right: 1.8rem;  opacity: 1;  position: relative;  transition: opacity 100ms linear 500ms;  z-index: 3;}.tip-button::before {  border-radius: 0.25rem;  bottom: 0;  content: "";  display: block;  height: 100%;  left: 50%;  position: absolute;  transform: translateX(-50%);  transition: height 250ms ease-in-out 400ms, width 250ms ease-in-out 300ms;  width: 100%;  z-index: 2;}.tip-button::after {  bottom: -1rem;  color: white;  content: "ヾ(≧O≦)〃嗷~"; /*点击后显示的内容*/  height: 110%;  left: 0;  opacity: 0;  position: absolute;  pointer-events: none;  text-align: center;  transform: scale(0);  transform-origin: 50% 20%;  transition: transform 200ms cubic-bezier(0, 0, 0.35, 1.43);  width: 100%;  z-index: 1;}.coin-wrapper {  background: none;  bottom: 0;  height: 18rem;  left: 0;  opacity: 1;  overflow: hidden;  pointer-events: none;  position: absolute;  transform: none;  transform-origin: 50% 100%;  transition: opacity 200ms linear 100ms, transform 300ms ease-out;  width: 100%;}.coin {  --front-y-multiplier: 0;  --back-y-multiplier: 0;  --coin-y-multiplier: 0;  --coin-x-multiplier: 0;  --coin-scale-multiplier: 0;  --coin-rotation-multiplier: 0;  --shine-opacity-multiplier: 0.4;  --shine-bg-multiplier: 50%;  bottom: calc(var(--coin-y-multiplier) * 1rem - 3.5rem);  height: 3.5rem;  margin-bottom: 3.05rem;  position: absolute;  right: calc(var(--coin-x-multiplier) * 34% + 16%);  transform: translateX(50%) scale(calc(0.4 + var(--coin-scale-multiplier))) rotate(calc(var(            --coin-rotation-multiplier          ) * -1deg));  transition: opacity 100ms linear 200ms;  width: 3.5rem;  z-index: 3;}.coin__front,.coin__middle,.coin__back,.coin::before,.coin__front::after,.coin__back::after {  border-radius: 50%;  box-sizing: border-box;  height: 100%;  left: 0;  position: absolute;  width: 100%;  z-index: 3;}.coin__front {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),    linear-gradient(210deg, #8590b3 32%, transparent 32%), linear-gradient(150deg, #8590b3 32%, transparent 32%),    linear-gradient(to right, #8590b3 22%, transparent 22%, transparent 78%, #8590b3 78%), linear-gradient(      to bottom,      #fcfaf9 44%,      transparent 44%,      transparent 65%,      #fcfaf9 65%,      #fcfaf9 71%,      #8590b3 71%    ), linear-gradient(to right, transparent 28%, #fcfaf9 28%, #fcfaf9 34%, #8590b3 34%, #8590b3 40%, #fcfaf9 40%, #fcfaf9        47%, #8590b3 47%, #8590b3 53%, #fcfaf9 53%, #fcfaf9 60%, #8590b3 60%, #8590b3 66%, #fcfaf9 66%, #fcfaf9 72%, transparent        72%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--front-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--front-scale-multiplier));}.coin__front::after {  background: rgba(0, 0, 0, 0.2);  content: "";  opacity: var(--front-y-multiplier);}.coin__middle {  background: #737c99;  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--middle-scale-multiplier));}.coin__back {  background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%),    radial-gradient(circle at 50% 40%, #fcfaf9 23%, transparent 23%), radial-gradient(circle at 50% 100%, #fcfaf9 35%, transparent        35%);  background-color: #8590b3;  background-size: 100% 100%;  transform: translateY(calc(var(--back-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--back-scale-multiplier));}.coin__back::after {  background: rgba(0, 0, 0, 0.2);  content: "";  opacity: var(--back-y-multiplier);}.coin::before {  background: radial-gradient(circle at 25% 65%, transparent 50%, rgba(255, 255, 255, 0.9) 90%), linear-gradient(55deg, transparent        calc(var(--shine-bg-multiplier) + 0%), #e9f4ff calc(var(--shine-bg-multiplier) + 0%), transparent calc(var(              --shine-bg-multiplier            ) + 50%));  content: "";  opacity: var(--shine-opacity-multiplier);  transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / -2)) scaleY(var(--middle-scale-multiplier))    rotate(calc(var(--coin-rotation-multiplier) * 1deg));  z-index: 10;}.coin::after {  background: #737c99;  content: "";  height: 0.3181818182rem;  left: 0;  position: absolute;  top: 50%;  transform: translateY(-50%);  width: 100%;  z-index: 2;}@keyframes shake {  0% {    transform: rotate(4deg);  }  66% {    transform: rotate(-4deg);  }  100% {    transform: rotate();  }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/coin/coin.js"/>
      <url>/js/coin/coin.js</url>
      
        <content type="html"><![CDATA[var tipButtons = document.querySelectorAll(".tip-button");function coinAudio() {  var coinAudio = document.getElementById("coinAudio");  if (coinAudio) {    coinAudio.play(); //有音频时播放  }}// Loop through all buttons (allows for multiple buttons on page)tipButtons.forEach(button => {  var coin = button.querySelector(".coin");  // The larger the number, the slower the animation  coin.maxMoveLoopCount = 90;  button.addEventListener("click", () => {    if (/Android|webOS|BlackBerry/i.test(navigator.userAgent)) return true; //媒体选择    if (button.clicked) return;    button.classList.add("clicked");    // Wait to start flipping th coin because of the button tilt animation    setTimeout(() => {      // Randomize the flipping speeds just for fun      coin.sideRotationCount = Math.floor(Math.random() * 5) * 90;      coin.maxFlipAngle = (Math.floor(Math.random() * 4) + 3) * Math.PI;      button.clicked = true;      flipCoin();      coinAudio();    }, 50);  });  var flipCoin = () => {    coin.moveLoopCount = 0;    flipCoinLoop();  };  var resetCoin = () => {    coin.style.setProperty("--coin-x-multiplier", 0);    coin.style.setProperty("--coin-scale-multiplier", 0);    coin.style.setProperty("--coin-rotation-multiplier", 0);    coin.style.setProperty("--shine-opacity-multiplier", 0.4);    coin.style.setProperty("--shine-bg-multiplier", "50%");    coin.style.setProperty("opacity", 1);    // Delay to give the reset animation some time before you can click again    setTimeout(() => {      button.clicked = false;    }, 300);  };  var flipCoinLoop = () => {    coin.moveLoopCount++;    var percentageCompleted = coin.moveLoopCount / coin.maxMoveLoopCount;    coin.angle = -coin.maxFlipAngle * Math.pow(percentageCompleted - 1, 2) + coin.maxFlipAngle;    // Calculate the scale and position of the coin moving through the air    coin.style.setProperty("--coin-y-multiplier", -11 * Math.pow(percentageCompleted * 2 - 1, 4) + 11);    coin.style.setProperty("--coin-x-multiplier", percentageCompleted);    coin.style.setProperty("--coin-scale-multiplier", percentageCompleted * 0.6);    coin.style.setProperty("--coin-rotation-multiplier", percentageCompleted * coin.sideRotationCount);    // Calculate the scale and position values for the different coin faces    // The math uses sin/cos wave functions to similate the circular motion of 3D spin    coin.style.setProperty("--front-scale-multiplier", Math.max(Math.cos(coin.angle), 0));    coin.style.setProperty("--front-y-multiplier", Math.sin(coin.angle));    coin.style.setProperty("--middle-scale-multiplier", Math.abs(Math.cos(coin.angle), 0));    coin.style.setProperty("--middle-y-multiplier", Math.cos((coin.angle + Math.PI / 2) % Math.PI));    coin.style.setProperty("--back-scale-multiplier", Math.max(Math.cos(coin.angle - Math.PI), 0));    coin.style.setProperty("--back-y-multiplier", Math.sin(coin.angle - Math.PI));    coin.style.setProperty("--shine-opacity-multiplier", 4 * Math.sin((coin.angle + Math.PI / 2) % Math.PI) - 3.2);    coin.style.setProperty("--shine-bg-multiplier", -40 * (Math.cos((coin.angle + Math.PI / 2) % Math.PI) - 0.5) + "%");    // Repeat animation loop    if (coin.moveLoopCount < coin.maxMoveLoopCount) {      if (coin.moveLoopCount === coin.maxMoveLoopCount - 6) button.classList.add("shrink-landing");      window.requestAnimationFrame(flipCoinLoop);    } else {      button.classList.add("coin-landed");      coin.style.setProperty("opacity", 0);      setTimeout(() => {        button.classList.remove("clicked", "shrink-landing", "coin-landed");        setTimeout(() => {          resetCoin();        }, 300);      }, 1500);    }  };});]]></content>
      
    </entry>
    
    
  
</search>
